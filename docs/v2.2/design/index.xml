<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Design principles. The big picture. on KrakenD - Open source API Gateway</title><link>https://www.krakend.io/docs/v2.2/design/</link><description>Recent content in Design principles. The big picture. on KrakenD - Open source API Gateway</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 14 Jan 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://www.krakend.io/docs/v2.2/design/index.xml" rel="self" type="application/rss+xml"/><item><title>The Backend For Frontend pattern</title><link>https://www.krakend.io/docs/v2.2/design/backend-for-frontend/</link><pubDate>Mon, 13 Mar 2023 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v2.2/design/backend-for-frontend/</guid><description>One of the main differences between KrakenD and any other API gateway in the market is that all your endpoints can offer a ready-to-use Backend For Frontend experience by simply declaring the backend sources and the fields your client needs. But why and when do you need to use a BFF?
The problem a BFF solves When developers of APIs create new endpoints, whether in a microservices pattern or a monolith, using an intermediate gateway or directly connecting to backends, they must provide general-purpose responses.</description></item><item><title>Zero-trust policy</title><link>https://www.krakend.io/docs/v2.2/design/zero-trust/</link><pubDate>Mon, 13 Mar 2023 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v2.2/design/zero-trust/</guid><description>Real-world API deployments suffer attacks every day, even if you don&amp;rsquo;t notice it. Where there is an accessible server, there is malicious activity.
The Zero Trust security is a software architecture design choice to deny by default any activity unless specifically allowed. This type of policy is very secure, but usually adds a lot of burden on infrastructure administrators. KrakenD offers a balance of tools and default secure choices to ease the administration while keeping the software secure.</description></item><item><title>KrakenD Execution Flow</title><link>https://www.krakend.io/docs/v2.2/design/execution-flow/</link><pubDate>Tue, 06 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v2.2/design/execution-flow/</guid><description>To truly master KrakenD, you should get familiar with the concept of &amp;ldquo;pipes&amp;rdquo; and how these pipes define the execution flow of KrakenD from request to response.
A recurring question we hear from developers: Is the configuration X executed before the configuration Y?. If you are unfamiliar with KrakenD, it&amp;rsquo;s hard to tell, as the declaration order does not matter (with a few sequential exceptions). Instead, each piece acts in a specific part(s) of the request and response journey.</description></item></channel></rss>