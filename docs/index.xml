<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs on KrakenD - Open source API Gateway</title><link>https://www.krakend.io/docs/</link><description>Recent content in Docs on KrakenD - Open source API Gateway</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 08 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.krakend.io/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Extending KrakenD, the big picture.</title><link>https://www.krakend.io/docs/enterprise/v1.3/extending/the-big-picture/</link><pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v1.3/extending/the-big-picture/</guid><description>Before starting to dive into the KrakenD code, spend a few minutes understanding the big pieces of the system, how it works, and the philosophy behind it.
The KrakenD rules Let&amp;rsquo;s start with the rules followed to code KrakenD (shared with The Lura Project), as they answer to architectural design questions:
Reactive is key Reactive is key (yes, it is very very important) Failing fast is better than succeeding slow (say it one more time!</description></item><item><title>Extending KrakenD, the big picture.</title><link>https://www.krakend.io/docs/v1.3/extending/the-big-picture/</link><pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/extending/the-big-picture/</guid><description>Before starting to dive into the KrakenD code, spend a few minutes understanding the big pieces of the system, how it works, and the philosophy behind it.
The KrakenD rules Let&amp;rsquo;s start with the rules followed to code KrakenD (shared with The Lura Project), as they answer to architectural design questions:
Reactive is key Reactive is key (yes, it is very very important) Failing fast is better than succeeding slow (say it one more time!</description></item><item><title>Extending KrakenD, the big picture.</title><link>https://www.krakend.io/docs/v1.4/extending/the-big-picture/</link><pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/extending/the-big-picture/</guid><description>Before starting to dive into the KrakenD code, spend a few minutes understanding the big pieces of the system, how it works, and the philosophy behind it.
The KrakenD rules Let&amp;rsquo;s start with the rules followed to code KrakenD (shared with The Lura Project), as they answer to architectural design questions:
Reactive is key Reactive is key (yes, it is very very important) Failing fast is better than succeeding slow (say it one more time!</description></item><item><title>Service Discovery overview</title><link>https://www.krakend.io/docs/enterprise/v1.3/service-discovery/overview/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v1.3/service-discovery/overview/</guid><description>Service discovery enables clients to detect and locate services on your enterprise network automatically. Instead of defining a static list of IPs or hostnames pointing to your backends, you can use a service discovery provider and let KrakenD interact with it to get the hosts dynamically.
Static resolution The static resolution is the default service discovery choice. It uses a list of hosts declared in the configuration file and KrakenD must be able to reach them directly by hostname, DNS or IP.</description></item><item><title>Service Discovery overview</title><link>https://www.krakend.io/docs/v1.3/service-discovery/overview/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/service-discovery/overview/</guid><description>Service discovery enables clients to detect and locate services on your enterprise network automatically. Instead of defining a static list of IPs or hostnames pointing to your backends, you can use a service discovery provider and let KrakenD interact with it to get the hosts dynamically.
Static resolution The static resolution is the default service discovery choice. It uses a list of hosts declared in the configuration file and KrakenD must be able to reach them directly by hostname, DNS or IP.</description></item><item><title>Service Discovery overview</title><link>https://www.krakend.io/docs/v1.4/service-discovery/overview/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/service-discovery/overview/</guid><description>Service discovery enables clients to detect and locate services on your enterprise network automatically. Instead of defining a static list of IPs or hostnames pointing to your backends, you can use a service discovery provider and let KrakenD interact with it to get the hosts dynamically.
Static resolution The static resolution is the default service discovery choice. It uses a list of hosts declared in the configuration file and KrakenD must be able to reach them directly by hostname, DNS or IP.</description></item><item><title>High-availability cluster</title><link>https://www.krakend.io/docs/enterprise/v1.3/cluster/cluster-overview/</link><pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v1.3/cluster/cluster-overview/</guid><description>A KrakenD cluster consists of multiple KrakenD instances running simultaneously and working together to provide increased reliability, higher throughput, scalability, and fail-over.
A KrakenD cluster runs with the same KrakenD open source software you use today to start a single instance. Consequently no license is needed to operate a sizeable enterprise-grade API gateway.
KrakenD cluster benefits Having a KrakenD cluster provides these immediate benefits:
Increased throughput and capacity: Having more KrakenD nodes expands the number of requests the API can handle.</description></item><item><title>High-availability cluster</title><link>https://www.krakend.io/docs/v1.3/cluster/cluster-overview/</link><pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/cluster/cluster-overview/</guid><description>A KrakenD cluster consists of multiple KrakenD instances running simultaneously and working together to provide increased reliability, higher throughput, scalability, and fail-over.
A KrakenD cluster runs with the same KrakenD open source software you use today to start a single instance. Consequently no license is needed to operate a sizeable enterprise-grade API gateway.
KrakenD cluster benefits Having a KrakenD cluster provides these immediate benefits:
Increased throughput and capacity: Having more KrakenD nodes expands the number of requests the API can handle.</description></item><item><title>High-availability cluster</title><link>https://www.krakend.io/docs/v1.4/cluster/cluster-overview/</link><pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/cluster/cluster-overview/</guid><description>A KrakenD cluster consists of multiple KrakenD instances running simultaneously and working together to provide increased reliability, higher throughput, scalability, and fail-over.
A KrakenD cluster runs with the same KrakenD open source software you use today to start a single instance. Consequently no license is needed to operate a sizeable enterprise-grade API gateway.
KrakenD cluster benefits Having a KrakenD cluster provides these immediate benefits:
Increased throughput and capacity: Having more KrakenD nodes expands the number of requests the API can handle.</description></item><item><title>Running KrakenD server. The `krakend run` command</title><link>https://www.krakend.io/docs/enterprise/v1.3/commands/run/</link><pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v1.3/commands/run/</guid><description>To start KrakenD, you need to invoke the run command with the path to the configuration file. You can also specify the port (defaults to 8080)
Command to start KrakenD&amp;nbsp; $krakend run -c krakend.json # or krakend run --config /path/to/krakend.json # or krakend run --config /path/to/krakend.json -p 8080 The krakend run command with no flags will remind you that you need the path to the configuration file:</description></item><item><title>Running KrakenD server. The `krakend run` command</title><link>https://www.krakend.io/docs/v1.3/commands/run/</link><pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/commands/run/</guid><description>To start KrakenD, you need to invoke the run command with the path to the configuration file. You can also specify the port (defaults to 8080)
Command to start KrakenD&amp;nbsp; $krakend run -c krakend.json # or krakend run --config /path/to/krakend.json # or krakend run --config /path/to/krakend.json -p 8080 The krakend run command with no flags will remind you that you need the path to the configuration file:</description></item><item><title>Running KrakenD server. The `krakend run` command</title><link>https://www.krakend.io/docs/v1.4/commands/run/</link><pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/commands/run/</guid><description>To start KrakenD, you need to invoke the run command with the path to the configuration file. You can also specify the port (defaults to 8080)
Command to start KrakenD&amp;nbsp; $krakend run -c krakend.json # or krakend run --config /path/to/krakend.json # or krakend run --config /path/to/krakend.json -p 8080 The krakend run command with no flags will remind you that you need the path to the configuration file:</description></item><item><title>API Key authentication with rate limiting</title><link>https://www.krakend.io/docs/enterprise/authentication/api-keys/</link><pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/authentication/api-keys/</guid><description>The API key authentication enables a Role-Based Access Control (RBAC) and a rate-limiting mechanism based on an API key passed by the client. For the desired endpoints, KrakenD rejects requests from users that do not provide a valid key, are trying to access a resource with insufficient permissions for the user&amp;rsquo;s role, or are exceeding the defined quota.
The authentication is granular and works per-endpoint, meaning that you can combine public endpoints (no API Key needed) and private endpoints in the same configuration.</description></item><item><title>API Key authentication using RBAC</title><link>https://www.krakend.io/docs/enterprise/v1.3/authentication/api-keys/</link><pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v1.3/authentication/api-keys/</guid><description>The API key authentication enables a Role-Based Access Control (RBAC) mechanism by reading the Authorization header of incoming requests. For all your desired endpoints, KrakenD rejects requests from users that do not provide a valid key or are trying to access a resource with insufficient permissions for the user&amp;rsquo;s role.
The authentication is granular and works per-endpoint, meaning that you can combine public endpoints and private endpoints in the same configuration.</description></item><item><title>API Key authentication with rate limiting</title><link>https://www.krakend.io/docs/enterprise/v2.0/authentication/api-keys/</link><pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v2.0/authentication/api-keys/</guid><description>The API key authentication enables a Role-Based Access Control (RBAC) and a rate-limiting mechanism based on an API key passed by the client. For the desired endpoints, KrakenD rejects requests from users that do not provide a valid key, are trying to access a resource with insufficient permissions for the user&amp;rsquo;s role, or are exceeding the defined quota.
The authentication is granular and works per-endpoint, meaning that you can combine public endpoints (no API Key needed) and private endpoints in the same configuration.</description></item><item><title>Basic endpoint authentication using .htpasswd</title><link>https://www.krakend.io/docs/enterprise/authentication/basic-authentication/</link><pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/authentication/basic-authentication/</guid><description>The Basic Authentication plugin protects the access to selected endpoints using basic username and password credentials. The functionality works at the router level, and when the authentication fails, the backend is never hit.
How does it work Basic auth functionality is provided by a plugin, meaning that a separate binary needs to be included. To do so, make sure to provide basic-auth.so, and set the configuration as described below.
KrakenD feeds from a regular.</description></item><item><title>Basic endpoint authentication using .htpasswd</title><link>https://www.krakend.io/docs/enterprise/v1.3/authentication/basic-authentication/</link><pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v1.3/authentication/basic-authentication/</guid><description>The Basic Authentication plugin protects the access to selected endpoints using basic username and password credentials. The functionality works at the router level, and when the authentication fails, the backend is never hit.
How does it work Basic auth functionality is provided by a plugin, meaning that a separate binary needs to be included. To do so, make sure to provide krakend-basic-auth.so, and set the configuration as described below.
KrakenD feeds from a regular.</description></item><item><title>Basic endpoint authentication using .htpasswd</title><link>https://www.krakend.io/docs/enterprise/v2.0/authentication/basic-authentication/</link><pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v2.0/authentication/basic-authentication/</guid><description>The Basic Authentication plugin protects the access to selected endpoints using basic username and password credentials. The functionality works at the router level, and when the authentication fails, the backend is never hit.
How does it work Basic auth functionality is provided by a plugin, meaning that a separate binary needs to be included. To do so, make sure to provide basic-auth.so, and set the configuration as described below.
KrakenD feeds from a regular.</description></item><item><title>Enabling TLS for HTTPS and HTTP/2</title><link>https://www.krakend.io/docs/enterprise/v1.3/service-settings/tls/</link><pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v1.3/service-settings/tls/</guid><description>There are two different strategies when using TLS over KrakenD:
Use TLS for HTTPS and HTTP/2 in KrakenD Use a balancer with TLS termination in front of KrakenD (e.g., ELB, HAproxy) In case you want to enable TLS in KrakenD you need to add a tls key at service level (configuration&amp;rsquo;s file root) with at least the public key and the private key. When you add TLS, KrakenD listens only using TLS, and no traffic to plain HTTP is accepted.</description></item><item><title>Enabling TLS for HTTPS and HTTP/2</title><link>https://www.krakend.io/docs/v1.3/service-settings/tls/</link><pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/service-settings/tls/</guid><description>There are two different strategies when using TLS over KrakenD:
Use TLS for HTTPS and HTTP/2 in KrakenD Use a balancer with TLS termination in front of KrakenD (e.g., ELB, HAproxy) In case you want to enable TLS in KrakenD you need to add a tls key at service level (configuration&amp;rsquo;s file root) with at least the public key and the private key. When you add TLS, KrakenD listens only using TLS, and no traffic to plain HTTP is accepted.</description></item><item><title>Enabling TLS for HTTPS and HTTP/2</title><link>https://www.krakend.io/docs/v1.4/service-settings/tls/</link><pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/service-settings/tls/</guid><description>There are two different strategies when using TLS over KrakenD:
Use TLS for HTTPS and HTTP/2 in KrakenD Use a balancer with TLS termination in front of KrakenD (e.g., ELB, HAproxy) In case you want to enable TLS in KrakenD you need to add a tls key at service level (configuration&amp;rsquo;s file root) with at least the public key and the private key. When you add TLS, KrakenD listens only using TLS, and no traffic to plain HTTP is accepted.</description></item><item><title>SD with DNS SRV (e.g., Consul, k8s)</title><link>https://www.krakend.io/docs/v1.4/service-discovery/dns-srv/</link><pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/service-discovery/dns-srv/</guid><description>The DNS SRV is a market standard used by systems such as Kubernetes, Mesos, Haproxy, Nginx plus, AWS ECS, Linkerd, and more.
To integrate Consul as the Service Discovery or any other DNS SRV compatible systems you only need to set two keys:
&amp;quot;sd&amp;quot;: &amp;quot;dns&amp;quot;: To set service discovery = DNS SRV &amp;quot;host&amp;quot;: []: The list of all the names providing the resolution These keys need to be added in the backend section of your configuration.</description></item><item><title>Writing custom plugins</title><link>https://www.krakend.io/docs/enterprise/v1.3/extending/writing-plugins/</link><pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v1.3/extending/writing-plugins/</guid><description>KrakenD&amp;rsquo;s modular design allows you to extend its functionality by adding your custom code. As an engineer, it&amp;rsquo;s always tempting to start writing code but the majority of scenarios do not require writing any. Existing modules, middleware, and plugins suffice almost everyone&amp;rsquo;s needs.
It&amp;rsquo;s important to remark, that if you want to do complex business logic checks and transformations, aside from the core functionality, there is specific scripting designed for that without compiling Go code.</description></item><item><title>Writing custom plugins</title><link>https://www.krakend.io/docs/v1.3/extending/writing-plugins/</link><pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/extending/writing-plugins/</guid><description>KrakenD&amp;rsquo;s modular design allows you to extend its functionality by adding your custom code. As an engineer, it&amp;rsquo;s always tempting to start writing code but the majority of scenarios do not require writing any. Existing modules, middleware, and plugins suffice almost everyone&amp;rsquo;s needs.
It&amp;rsquo;s important to remark, that if you want to do complex business logic checks and transformations, aside from the core functionality, there is specific scripting designed for that without compiling Go code.</description></item><item><title>Writing custom plugins</title><link>https://www.krakend.io/docs/v1.4/extending/writing-plugins/</link><pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/extending/writing-plugins/</guid><description>KrakenD&amp;rsquo;s modular design allows you to extend its functionality by adding your custom code. As an engineer, it&amp;rsquo;s always tempting to start writing code but the majority of scenarios do not require writing any. Existing modules, middleware, and plugins suffice almost everyone&amp;rsquo;s needs.
It&amp;rsquo;s important to remark, that if you want to do complex business logic checks and transformations, aside from the core functionality, there is specific scripting designed for that without compiling Go code.</description></item><item><title>Extended metrics and the `/__stats` endpoint</title><link>https://www.krakend.io/docs/enterprise/v1.3/extended-metrics/metrics/</link><pubDate>Mon, 05 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v1.3/extended-metrics/metrics/</guid><description>The metrics middleware collects extended metrics and exposes them in the /__stats/ endpoint. The endpoint runs in a different port than the API, and contains a lot of metrics.
Through the extended metrics you can create new tools or integrate with existing ones. For instance, combining the metrics with the InfluxDB extended metrics you can have a Grafana dashboard.
Configuration In order to add metrics to your KrakenD installation add the github_com/devopsfaith/krakend-metrics namespace under extra_config in the root of your configuration file, e.</description></item><item><title>Extended metrics and the `/__stats` endpoint</title><link>https://www.krakend.io/docs/v1.3/extended-metrics/metrics/</link><pubDate>Mon, 05 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/extended-metrics/metrics/</guid><description>The metrics middleware collects extended metrics and exposes them in the /__stats/ endpoint. The endpoint runs in a different port than the API, and contains a lot of metrics.
Through the extended metrics you can create new tools or integrate with existing ones. For instance, combining the metrics with the InfluxDB extended metrics you can have a Grafana dashboard.
Configuration In order to add metrics to your KrakenD installation add the github_com/devopsfaith/krakend-metrics namespace under extra_config in the root of your configuration file, e.</description></item><item><title>Extended metrics and the `/__stats` endpoint</title><link>https://www.krakend.io/docs/v1.4/extended-metrics/metrics/</link><pubDate>Mon, 05 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/extended-metrics/metrics/</guid><description>The metrics middleware collects extended metrics and exposes them in the /__stats/ endpoint. The endpoint runs in a different port than the API, and contains a lot of metrics.
Through the extended metrics you can create new tools or integrate with existing ones. For instance, combining the metrics with the InfluxDB extended metrics you can have a Grafana dashboard.
Configuration In order to add metrics to your KrakenD installation add the github_com/devopsfaith/krakend-metrics namespace under extra_config in the root of your configuration file, e.</description></item><item><title>JSON Web Tokens overview</title><link>https://www.krakend.io/docs/authorization/jwt-overview/</link><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/authorization/jwt-overview/</guid><description>The JSON Web Token specification is an industry standard to represent claims securely between two parties. The JWT is a base64 encoded JSON object that contains key-value pairs of attributes that are signed by a trusted authority.
When JWT shields a specific set of endpoints, requests to the API gateway must provide a token. Verification of the token takes place in every request, including the check of the signature and optionally the assurance that its issuer, roles, and audience are sufficient to access the endpoint.</description></item><item><title>JSON Web Tokens overview</title><link>https://www.krakend.io/docs/enterprise/authorization/jwt-overview/</link><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/authorization/jwt-overview/</guid><description>The JSON Web Token specification is an industry standard to represent claims securely between two parties. The JWT is a base64 encoded JSON object that contains key-value pairs of attributes that are signed by a trusted authority.
When JWT shields a specific set of endpoints, requests to the API gateway must provide a token. Verification of the token takes place in every request, including the check of the signature and optionally the assurance that its issuer, roles, and audience are sufficient to access the endpoint.</description></item><item><title>JSON Web Tokens overview</title><link>https://www.krakend.io/docs/enterprise/v1.3/authorization/jwt-overview/</link><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v1.3/authorization/jwt-overview/</guid><description>The JSON Web Token specification is an industry standard to represent claims securely between two parties. The JWT is an encoded JSON object that contains key-value pairs of attributes that are signed by a trusted authority.
When JWT shields a specific set of endpoints, requests to the API gateway must provide a token. Verification of the token takes place in every request, including the check of the signature and optionally the assurance that its issuer, roles, and audience are sufficient to access the endpoint.</description></item><item><title>JSON Web Tokens overview</title><link>https://www.krakend.io/docs/enterprise/v2.0/authorization/jwt-overview/</link><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v2.0/authorization/jwt-overview/</guid><description>The JSON Web Token specification is an industry standard to represent claims securely between two parties. The JWT is a base64 encoded JSON object that contains key-value pairs of attributes that are signed by a trusted authority.
When JWT shields a specific set of endpoints, requests to the API gateway must provide a token. Verification of the token takes place in every request, including the check of the signature and optionally the assurance that its issuer, roles, and audience are sufficient to access the endpoint.</description></item><item><title>JSON Web Tokens overview</title><link>https://www.krakend.io/docs/v1.3/authorization/jwt-overview/</link><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/authorization/jwt-overview/</guid><description>The JSON Web Token specification is an industry standard to represent claims securely between two parties. The JWT is an encoded JSON object that contains key-value pairs of attributes that are signed by a trusted authority.
When JWT shields a specific set of endpoints, requests to the API gateway must provide a token. Verification of the token takes place in every request, including the check of the signature and optionally the assurance that its issuer, roles, and audience are sufficient to access the endpoint.</description></item><item><title>JSON Web Tokens overview</title><link>https://www.krakend.io/docs/v1.4/authorization/jwt-overview/</link><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/authorization/jwt-overview/</guid><description>The JSON Web Token specification is an industry standard to represent claims securely between two parties. The JWT is an encoded JSON object that contains key-value pairs of attributes that are signed by a trusted authority.
When JWT shields a specific set of endpoints, requests to the API gateway must provide a token. Verification of the token takes place in every request, including the check of the signature and optionally the assurance that its issuer, roles, and audience are sufficient to access the endpoint.</description></item><item><title>JSON Web Tokens overview</title><link>https://www.krakend.io/docs/v2.0/authorization/jwt-overview/</link><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v2.0/authorization/jwt-overview/</guid><description>The JSON Web Token specification is an industry standard to represent claims securely between two parties. The JWT is a base64 encoded JSON object that contains key-value pairs of attributes that are signed by a trusted authority.
When JWT shields a specific set of endpoints, requests to the API gateway must provide a token. Verification of the token takes place in every request, including the check of the signature and optionally the assurance that its issuer, roles, and audience are sufficient to access the endpoint.</description></item><item><title>Setting up a cluster</title><link>https://www.krakend.io/docs/enterprise/v1.3/cluster/configuration/</link><pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v1.3/cluster/configuration/</guid><description>Hardware can fail at any time, and a Gateway is a piece critical enough to have redundancy of the service. Having a cluster of machines operating the service assures high availability.
KrakenD nodes are stateless and they don&amp;rsquo;t store data or application state to a persistent storage. Instead, any configuration data and application state exist within the configuration file. Nodes are expendable and replaceable at any time, as they do not hold anything.</description></item><item><title>Setting up a cluster</title><link>https://www.krakend.io/docs/v1.3/cluster/configuration/</link><pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/cluster/configuration/</guid><description>Hardware can fail at any time, and a Gateway is a piece critical enough to have redundancy of the service. Having a cluster of machines operating the service assures high availability.
KrakenD nodes are stateless and they don&amp;rsquo;t store data or application state to a persistent storage. Instead, any configuration data and application state exist within the configuration file. Nodes are expendable and replaceable at any time, as they do not hold anything.</description></item><item><title>Setting up a cluster</title><link>https://www.krakend.io/docs/v1.4/cluster/configuration/</link><pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/cluster/configuration/</guid><description>Hardware can fail at any time, and a Gateway is a piece critical enough to have redundancy of the service. Having a cluster of machines operating the service assures high availability.
KrakenD nodes are stateless and they don&amp;rsquo;t store data or application state to a persistent storage. Instead, any configuration data and application state exist within the configuration file. Nodes are expendable and replaceable at any time, as they do not hold anything.</description></item><item><title>Commands - check</title><link>https://www.krakend.io/docs/enterprise/v1.3/commands/check/</link><pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v1.3/commands/check/</guid><description>The krakend check command validates the passed configuration. Since KrakenD does not implement a strict parsing, typos in the config file could be shadowed. In order to validate your config completely, it is recommended to use the --debug flag.
Usage of KrakenD check&amp;nbsp; $./krakend check -h ╓▄█ ▄▄▌ ╓██████▄µ ▐███ ▄███╨▐███▄██H╗██████▄ ║██▌ ,▄███╨ ▄██████▄ ▓██▌█████▄ ███▀╙╙▀▀███╕ ▐███▄███▀ ▐█████▀&amp;#34;╙▀▀&amp;#34;╙▀███ ║███▄███┘ ███▀&amp;#34;&amp;#34;▀███ ████▀╙▀███H ███ ╙███ ▐██████▌ ▐███⌐ ,▄████████M║██████▄ ║██████████M███▌ ███H ███ ,███ ▐███╨▀███µ ▐███ ███▌ ,███M║███╙▀███ ███▄```▄▄` ███▌ ███H ███,,,╓▄███▀ ▐███ ╙███▄▐███ ╙█████████M║██▌ ╙███▄`▀███████╨ ███▌ ███H █████████▀ `` `&amp;#39;` Version: v1.</description></item><item><title>Commands - check</title><link>https://www.krakend.io/docs/v1.3/commands/check/</link><pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/commands/check/</guid><description>The krakend check command validates the passed configuration. Since KrakenD does not implement a strict parsing, typos in the config file could be shadowed. In order to validate your config completely, it is recommended to use the --debug flag.
Usage of KrakenD check&amp;nbsp; $./krakend check -h `7MMF&amp;#39; `YMM&amp;#39; `7MM `7MM&amp;#34;&amp;#34;&amp;#34;Yb. MM .M&amp;#39; MM MM `Yb. MM .d&amp;#34; `7Mb,od8 ,6&amp;#34;Yb. MM ,MP&amp;#39;.gP&amp;#34;Ya `7MMpMMMb. MM `Mb MMMMM. MM&amp;#39; &amp;#34;&amp;#39;8) MM MM ;Y ,M&amp;#39; Yb MM MM MM MM MM VMA MM ,pm9MM MM;Mm 8M&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34; MM MM MM ,MP MM `MM.</description></item><item><title>Commands - check</title><link>https://www.krakend.io/docs/v1.4/commands/check/</link><pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/commands/check/</guid><description>The krakend check command validates the passed configuration. Since KrakenD does not implement a strict parsing, typos in the config file could be shadowed. In order to validate your config completely, it is recommended to use the --debug flag.
Usage of KrakenD check&amp;nbsp; $./krakend check -h `7MMF&amp;#39; `YMM&amp;#39; `7MM `7MM&amp;#34;&amp;#34;&amp;#34;Yb. MM .M&amp;#39; MM MM `Yb. MM .d&amp;#34; `7Mb,od8 ,6&amp;#34;Yb. MM ,MP&amp;#39;.gP&amp;#34;Ya `7MMpMMMb. MM `Mb MMMMM. MM&amp;#39; &amp;#34;&amp;#39;8) MM MM ;Y ,M&amp;#39; Yb MM MM MM MM MM VMA MM ,pm9MM MM;Mm 8M&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34; MM MM MM ,MP MM `MM.</description></item><item><title>SD with DNS SRV (e.g., Consul, k8s)</title><link>https://www.krakend.io/docs/enterprise/v1.3/service-discovery/dns-srv/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v1.3/service-discovery/dns-srv/</guid><description>The DNS SRV is a market standard used by systems such as Kubernetes, Mesos, Haproxy, Nginx plus, AWS ECS, Linkerd, and more.
To integrate Consul as the Service Discovery or any other DNS SRV compatible systems you only need to set two keys:
&amp;quot;sd&amp;quot;: &amp;quot;dns&amp;quot;: To set service discovery = DNS SRV &amp;quot;host&amp;quot;: []: The list of all the names providing the resolution These keys need to be added in the backend section of your configuration.</description></item><item><title>SD with DNS SRV (e.g., Consul, k8s)</title><link>https://www.krakend.io/docs/v1.3/service-discovery/dns-srv/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/service-discovery/dns-srv/</guid><description>The DNS SRV is a market standard used by systems such as Kubernetes, Mesos, Haproxy, Nginx plus, AWS ECS, Linkerd, and more.
To integrate Consul as the Service Discovery or any other DNS SRV compatible systems you only need to set two keys:
&amp;quot;sd&amp;quot;: &amp;quot;dns&amp;quot;: To set service discovery = DNS SRV &amp;quot;host&amp;quot;: []: The list of all the names providing the resolution These keys need to be added in the backend section of your configuration.</description></item><item><title>Native InfluxDB exporter</title><link>https://www.krakend.io/docs/enterprise/v1.3/extended-metrics/influxdb/</link><pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v1.3/extended-metrics/influxdb/</guid><description>KrakenD can expose detailed and extended metrics via the krakend-metrics). The krakend-influx component lets you send these extended KrakenD metrics to InfluxDB.
Notice that there are two different implementations of InfluxDB in KrakenD:
Native InfluxDB exporter (this page) OpenCensus InfluxDB exporter Which InfluxDB implementation should I choose? The native implementation exports data from a collector that is tailor-made for KrakenD, and also richer in content and less abstract.</description></item><item><title>Native InfluxDB exporter</title><link>https://www.krakend.io/docs/v1.3/extended-metrics/influxdb/</link><pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/extended-metrics/influxdb/</guid><description>KrakenD can expose detailed and extended metrics via the krakend-metrics). The krakend-influx component lets you send these extended KrakenD metrics to InfluxDB.
Notice that there are two different implementations of InfluxDB in KrakenD:
Native InfluxDB exporter (this page) OpenCensus InfluxDB exporter Which InfluxDB implementation should I choose? The native implementation exports data from a collector that is tailor-made for KrakenD, and also richer in content and less abstract.</description></item><item><title>Native InfluxDB exporter</title><link>https://www.krakend.io/docs/v1.4/extended-metrics/influxdb/</link><pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/extended-metrics/influxdb/</guid><description>KrakenD can expose detailed and extended metrics via the krakend-metrics). The krakend-influx component lets you send these extended KrakenD metrics to InfluxDB.
Notice that there are two different implementations of InfluxDB in KrakenD:
Native InfluxDB exporter (this page) OpenCensus InfluxDB exporter Which InfluxDB implementation should I choose? The native implementation exports data from a collector that is tailor-made for KrakenD, and also richer in content and less abstract.</description></item><item><title>Enabling Cross Origin Resource Sharing (CORS)</title><link>https://www.krakend.io/docs/enterprise/v1.3/service-settings/cors/</link><pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v1.3/service-settings/cors/</guid><description>When KrakenD endpoints are consumed from a browser, you might need to enable the Cross-Origin Resource Sharing (CORS) module as browsers restrict cross-origin HTTP requests initiated from scripts.
When the Cross-Origin Resource Sharing (CORS) configuration is enabled, KrakenD uses additional HTTP headers to tell browsers that they can use resources from a different origin (domain, protocol, or port). For instance, you will need this configuration if your web page is hosted at https://domain-a.</description></item><item><title>Enabling Cross Origin Resource Sharing (CORS)</title><link>https://www.krakend.io/docs/v1.3/service-settings/cors/</link><pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/service-settings/cors/</guid><description>When KrakenD endpoints are consumed from a browser, you might need to enable the Cross-Origin Resource Sharing (CORS) module as browsers restrict cross-origin HTTP requests initiated from scripts.
When the Cross-Origin Resource Sharing (CORS) configuration is enabled, KrakenD uses additional HTTP headers to tell browsers that they can use resources from a different origin (domain, protocol, or port). For instance, you will need this configuration if your web page is hosted at https://domain-a.</description></item><item><title>Enabling Cross Origin Resource Sharing (CORS)</title><link>https://www.krakend.io/docs/v1.4/service-settings/cors/</link><pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/service-settings/cors/</guid><description>When KrakenD endpoints are consumed from a browser, you might need to enable the Cross-Origin Resource Sharing (CORS) module as browsers restrict cross-origin HTTP requests initiated from scripts.
When the Cross-Origin Resource Sharing (CORS) configuration is enabled, KrakenD uses additional HTTP headers to tell browsers that they can use resources from a different origin (domain, protocol, or port). For instance, you will need this configuration if your web page is hosted at https://www.</description></item><item><title>Plugin and dependencies validator</title><link>https://www.krakend.io/docs/enterprise/v1.3/extending/plugin-tools/</link><pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v1.3/extending/plugin-tools/</guid><description>The plugin validator is an online tool that allows you to find problems with your plugin dependencies. Go plugins are strict on which versions of libraries you can use, so it&amp;rsquo;s important to make sure that your dependencies are compatible with the selected KrakenD versions.
Access the online plugin validation tools The plugin validator checks your go.sum file to find problems and reports all associated problems. From which Go version is supported, to which individual libraries will conflict during runtime.</description></item><item><title>Plugin and dependencies validator</title><link>https://www.krakend.io/docs/v1.3/extending/plugin-tools/</link><pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/extending/plugin-tools/</guid><description>The plugin validator is an online tool that allows you to find problems with your plugin dependencies. Go plugins are strict on which versions of libraries you can use, so it&amp;rsquo;s important to make sure that your dependencies are compatible with the selected KrakenD versions.
Access the online plugin validation tools The plugin validator checks your go.sum file to find problems and reports all associated problems. From which Go version is supported, to which individual libraries will conflict during runtime.</description></item><item><title>Plugin and dependencies validator</title><link>https://www.krakend.io/docs/v1.4/extending/plugin-tools/</link><pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/extending/plugin-tools/</guid><description>The plugin validator is an online tool that allows you to find problems with your plugin dependencies. Go plugins are strict on which versions of libraries you can use, so it&amp;rsquo;s important to make sure that your dependencies are compatible with the selected KrakenD versions.
Access the online plugin validation tools The plugin validator checks your go.sum file to find problems and reports all associated problems. From which Go version is supported, to which individual libraries will conflict during runtime.</description></item><item><title>JSON Web Token Validation</title><link>https://www.krakend.io/docs/authorization/jwt-validation/</link><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/authorization/jwt-validation/</guid><description>Protect endpoints from public usage by validating JWT tokens generated by any industry-standard OpenID Connect (OIDC) integration.
Before digging any further, some answers to frequently asked questions:
KrakenD does not generate the tokens itself. Still, you can plug it into any SaaS or self-hosted OpenID Identity Provider (IdP) using industry standards (e.g., Auth0, Azure AD, Google Firebase, Keycloak, etc.)
KrakenD does not need to validate all calls using your IdP.</description></item><item><title>JSON Web Token Validation</title><link>https://www.krakend.io/docs/enterprise/authorization/jwt-validation/</link><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/authorization/jwt-validation/</guid><description>Protect endpoints from public usage by validating JWT tokens generated by any industry-standard OpenID Connect (OIDC) integration.
Before digging any further, some answers to frequently asked questions:
KrakenD does not generate the tokens itself. Still, you can plug it into any SaaS or self-hosted OpenID Identity Provider (IdP) using industry standards (e.g., Auth0, Azure AD, Google Firebase, Keycloak, etc.)
KrakenD does not need to validate all calls using your IdP.</description></item><item><title>JWT Validation</title><link>https://www.krakend.io/docs/enterprise/v1.3/authorization/jwt-validation/</link><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v1.3/authorization/jwt-validation/</guid><description>The component krakend-jose is responsible for the JWT validation and protects endpoints from public usage, requiring end-users to provide a valid token to access its contents.
Before digging any further, some answers to frequently asked questions:
KrakenD does not generate the tokens itself. Still, you can plug it into any SaaS or self-hosted Identity Provider (IdP) using industry standards (e.g.: Auth0, Azure AD, Google Firebase, Keycloak, etc.)
KrakenD does not need to validate all calls using your IdP.</description></item><item><title>JSON Web Token Validation</title><link>https://www.krakend.io/docs/enterprise/v2.0/authorization/jwt-validation/</link><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v2.0/authorization/jwt-validation/</guid><description>Protect endpoints from public usage by validating JWT tokens generated by any industry-standard OpenID Connect (OIDC) integration.
Before digging any further, some answers to frequently asked questions:
KrakenD does not generate the tokens itself. Still, you can plug it into any SaaS or self-hosted OpenID Identity Provider (IdP) using industry standards (e.g., Auth0, Azure AD, Google Firebase, Keycloak, etc.)
KrakenD does not need to validate all calls using your IdP.</description></item><item><title>JWT Validation</title><link>https://www.krakend.io/docs/v1.3/authorization/jwt-validation/</link><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/authorization/jwt-validation/</guid><description>The component krakend-jose is responsible for the JWT validation and protects endpoints from public usage, requiring end-users to provide a valid token to access its contents.
Before digging any further, some answers to frequently asked questions:
KrakenD does not generate the tokens itself. Still, you can plug it into any SaaS or self-hosted Identity Provider (IdP) using industry standards (e.g.: Auth0, Azure AD, Google Firebase, Keycloak, etc.)
KrakenD does not need to validate all calls using your IdP.</description></item><item><title>JWT Validation</title><link>https://www.krakend.io/docs/v1.4/authorization/jwt-validation/</link><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/authorization/jwt-validation/</guid><description>Protect endpoints from public usage by validating JWT tokens generated by any industry-standard OpenID Connect (OIDC) integration.
Before digging any further, some answers to frequently asked questions:
KrakenD does not generate the tokens itself. Still, you can plug it into any SaaS or self-hosted OpenID Identity Provider (IdP) using industry standards (e.g.: Auth0, Azure AD, Google Firebase, Keycloak, etc.)
KrakenD does not need to validate all calls using your IdP.</description></item><item><title>JSON Web Token Validation</title><link>https://www.krakend.io/docs/v2.0/authorization/jwt-validation/</link><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v2.0/authorization/jwt-validation/</guid><description>Protect endpoints from public usage by validating JWT tokens generated by any industry-standard OpenID Connect (OIDC) integration.
Before digging any further, some answers to frequently asked questions:
KrakenD does not generate the tokens itself. Still, you can plug it into any SaaS or self-hosted OpenID Identity Provider (IdP) using industry standards (e.g., Auth0, Azure AD, Google Firebase, Keycloak, etc.)
KrakenD does not need to validate all calls using your IdP.</description></item><item><title>Service Discovery with etcd (deprecated)</title><link>https://www.krakend.io/docs/enterprise/v1.3/service-discovery/etcd/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v1.3/service-discovery/etcd/</guid><description>Deprecated Since KrakenD 1.3.0 etcd is not longer supported. The documentation is left here for reference. The etcd Service Discovery integration allows you to perform the host resolution using your existing etcd setup.
The integration etcd is controlled by the krakend-etcd component and adds client and subscriber capabilities for etcd.
Enabling etcd To enable the integration add in the root of your configuration file the necessary settings:</description></item><item><title>Service Discovery with etcd (deprecated)</title><link>https://www.krakend.io/docs/v1.3/service-discovery/etcd/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/service-discovery/etcd/</guid><description>Deprecated Since KrakenD 1.3.0 etcd is not longer supported. The documentation is left here for reference. The etcd Service Discovery integration allows you to perform the host resolution using your existing etcd setup.
The integration etcd is controlled by the krakend-etcd component and adds client and subscriber capabilities for etcd.
Enabling etcd To enable the integration add in the root of your configuration file the necessary settings:</description></item><item><title>Preconfigured Grafana dashboard</title><link>https://www.krakend.io/docs/enterprise/v1.3/extended-metrics/grafana/</link><pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v1.3/extended-metrics/grafana/</guid><description>The Grafana dashboard for KrakenD offers valuable information to understand the performance of your services and detect anomalies in the service.
The dashboard is extensive and offers you metrics like:
Requests from users to KrakenD Requests from KrakenD to your backends Response times Memory usage and details Endpoints and status codes Heatmaps Open connections Throughput Distributions, timers, garbage collection and a long etcetera Configure Grafana Add the following configuration to your krakend.</description></item><item><title>Preconfigured Grafana dashboard</title><link>https://www.krakend.io/docs/v1.3/extended-metrics/grafana/</link><pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/extended-metrics/grafana/</guid><description>The Grafana dashboard for KrakenD offers valuable information to understand the performance of your services and detect anomalies in the service.
The dashboard is extensive and offers you metrics like:
Requests from users to KrakenD Requests from KrakenD to your backends Response times Memory usage and details Endpoints and status codes Heatmaps Open connections Throughput Distributions, timers, garbage collection and a long etcetera Configure Grafana Add the following configuration to your krakend.</description></item><item><title>Preconfigured Grafana dashboard</title><link>https://www.krakend.io/docs/v1.4/extended-metrics/grafana/</link><pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/extended-metrics/grafana/</guid><description>The Grafana dashboard for KrakenD offers valuable information to understand the performance of your services and detect anomalies in the service.
The dashboard is extensive and offers you metrics like:
Requests from users to KrakenD Requests from KrakenD to your backends Response times Memory usage and details Endpoints and status codes Heatmaps Open connections Throughput Distributions, timers, garbage collection and a long etcetera Configure Grafana Add the following configuration to your krakend.</description></item><item><title>Generate signed JWT tokens</title><link>https://www.krakend.io/docs/authorization/jwt-signing/</link><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/authorization/jwt-signing/</guid><description>The JWT signing component creates a wrapper for your existing login endpoint that signs with your secret key the selected fields of the backend payload right before returning the content to the end-user.
The primary usage for this component is in migrations from monolith to microservices, or in ecosystems where there is no Identity/OAuth server yet, as it allows the immediate adoption of signed JSON Web Tokens without the need to implement a new service.</description></item><item><title>Generate signed JWT tokens</title><link>https://www.krakend.io/docs/enterprise/authorization/jwt-signing/</link><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/authorization/jwt-signing/</guid><description>The JWT signing component creates a wrapper for your existing login endpoint that signs with your secret key the selected fields of the backend payload right before returning the content to the end-user.
The primary usage for this component is in migrations from monolith to microservices, or in ecosystems where there is no Identity/OAuth server yet, as it allows the immediate adoption of signed JSON Web Tokens without the need to implement a new service.</description></item><item><title>JWT Signing</title><link>https://www.krakend.io/docs/enterprise/v1.3/authorization/jwt-signing/</link><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v1.3/authorization/jwt-signing/</guid><description>The JWT signing component creates a wrapper for your login endpoint that signs with your secret key the selected fields of the backend payload right before returning the content to the end-user.
The primary usage for this component is in migrations from monolith to microservices, or in ecosystems where there is no Identity server yet, as it allows the immediate adoption of signed JSON Web Tokens without the need to implement a new service.</description></item><item><title>JWT Signing</title><link>https://www.krakend.io/docs/enterprise/v2.0/authorization/jwt-signing/</link><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v2.0/authorization/jwt-signing/</guid><description>The JWT signing component creates a wrapper for your login endpoint that signs with your secret key the selected fields of the backend payload right before returning the content to the end-user.
The primary usage for this component is in migrations from monolith to microservices, or in ecosystems where there is no Identity server yet, as it allows the immediate adoption of signed JSON Web Tokens without the need to implement a new service.</description></item><item><title>JWT Signing</title><link>https://www.krakend.io/docs/v1.3/authorization/jwt-signing/</link><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/authorization/jwt-signing/</guid><description>The JWT signing component creates a wrapper for your login endpoint that signs with your secret key the selected fields of the backend payload right before returning the content to the end-user.
The primary usage for this component is in migrations from monolith to microservices, or in ecosystems where there is no Identity server yet, as it allows the immediate adoption of signed JSON Web Tokens without the need to implement a new service.</description></item><item><title>JWT Signing</title><link>https://www.krakend.io/docs/v1.4/authorization/jwt-signing/</link><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/authorization/jwt-signing/</guid><description>The JWT signing component creates a wrapper for your login endpoint that signs with your secret key the selected fields of the backend payload right before returning the content to the end-user.
The primary usage for this component is in migrations from monolith to microservices, or in ecosystems where there is no Identity server yet, as it allows the immediate adoption of signed JSON Web Tokens without the need to implement a new service.</description></item><item><title>JWT Signing</title><link>https://www.krakend.io/docs/v2.0/authorization/jwt-signing/</link><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v2.0/authorization/jwt-signing/</guid><description>The JWT signing component creates a wrapper for your login endpoint that signs with your secret key the selected fields of the backend payload right before returning the content to the end-user.
The primary usage for this component is in migrations from monolith to microservices, or in ecosystems where there is no Identity server yet, as it allows the immediate adoption of signed JSON Web Tokens without the need to implement a new service.</description></item><item><title>Service Discovery with Eureka</title><link>https://www.krakend.io/docs/enterprise/v1.3/service-discovery/eureka/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v1.3/service-discovery/eureka/</guid><description>Users of the Netflix&amp;rsquo;s service Eureka have a couple of user contributed integrations available listed in our krakend-contrib repository.
The integrations are not bundled with KrakenD-CE releases but they can be added to the project and make a custom build without difficulties.
schibsted/krakend-eureka: The Eureka client Schibsted has been running in production since 2017. joaoqalves/krakend-eureka: A Eureka client contributed by João Alves</description></item><item><title>Service Discovery with Eureka</title><link>https://www.krakend.io/docs/v1.3/service-discovery/eureka/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/service-discovery/eureka/</guid><description>Users of the Netflix&amp;rsquo;s service Eureka have a couple of user contributed integrations available listed in our krakend-contrib repository.
The integrations are not bundled with KrakenD-CE releases but they can be added to the project and make a custom build without difficulties.
schibsted/krakend-eureka: The Eureka client Schibsted has been running in production since 2017. joaoqalves/krakend-eureka: A Eureka client contributed by João Alves</description></item><item><title>Service Discovery with Eureka</title><link>https://www.krakend.io/docs/v1.4/service-discovery/eureka/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/service-discovery/eureka/</guid><description>Users of the Netflix&amp;rsquo;s service Eureka have a couple of user contributed integrations available listed in our krakend-contrib repository.
The integrations are not bundled with KrakenD-CE releases but they can be added to the project and make a custom build without difficulties.
schibsted/krakend-eureka: The Eureka client Schibsted has been running in production since 2017. joaoqalves/krakend-eureka: A Eureka client contributed by João Alves</description></item><item><title>Revoking valid tokens with a Bloom filter</title><link>https://www.krakend.io/docs/authorization/revoking-tokens/</link><pubDate>Mon, 05 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/authorization/revoking-tokens/</guid><description>The API Gateway authorizes users that provide valid tokens according to your criteria, but at some point, you might want to change your mind and decide to revoke JWT tokens that are still valid.
When are you going to need this? Examples of situations where you might need to revoke perfectly legit tokens:
A user wants to log out from all my devices. An administrator wants to kick out someone from the platform.</description></item><item><title>Revoking valid tokens with a Bloom filter</title><link>https://www.krakend.io/docs/enterprise/authorization/revoking-tokens/</link><pubDate>Mon, 05 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/authorization/revoking-tokens/</guid><description>The API Gateway authorizes users that provide valid tokens according to your criteria, but at some point, you might want to change your mind and decide to revoke JWT tokens that are still valid.
When are you going to need this? Examples of situations where you might need to revoke perfectly legit tokens:
A user wants to log out from all my devices. An administrator wants to kick out someone from the platform.</description></item><item><title>Revoking valid tokens with a Bloom filter</title><link>https://www.krakend.io/docs/enterprise/v1.3/authorization/revoking-tokens/</link><pubDate>Mon, 05 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v1.3/authorization/revoking-tokens/</guid><description>The API Gateway authorizes users that provide valid tokens according to your criteria, but at some point, you might want to change your mind and decide to revoke JWT tokens that are still valid.
When are you going to need this? Examples of situations where you might need to revoke perfectly legit tokens: As a user, I want to log me out of all my devices. As an administrator, I want to kick out someone from the platform.</description></item><item><title>Revoking valid tokens with a Bloom filter</title><link>https://www.krakend.io/docs/enterprise/v2.0/authorization/revoking-tokens/</link><pubDate>Mon, 05 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v2.0/authorization/revoking-tokens/</guid><description>The API Gateway authorizes users that provide valid tokens according to your criteria, but at some point, you might want to change your mind and decide to revoke JWT tokens that are still valid.
When are you going to need this? Examples of situations where you might need to revoke perfectly legit tokens: As a user, I want to log me out of all my devices. As an administrator, I want to kick out someone from the platform.</description></item><item><title>Revoking valid tokens with a Bloom filter</title><link>https://www.krakend.io/docs/v1.3/authorization/revoking-tokens/</link><pubDate>Mon, 05 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/authorization/revoking-tokens/</guid><description>The API Gateway authorizes users that provide valid tokens according to your criteria, but at some point, you might want to change your mind and decide to revoke JWT tokens that are still valid.
When are you going to need this? Examples of situations where you might need to revoke perfectly legit tokens: As a user, I want to log me out of all my devices. As an administrator, I want to kick out someone from the platform.</description></item><item><title>Revoking valid tokens with a Bloom filter</title><link>https://www.krakend.io/docs/v1.4/authorization/revoking-tokens/</link><pubDate>Mon, 05 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/authorization/revoking-tokens/</guid><description>The API Gateway authorizes users that provide valid tokens according to your criteria, but at some point, you might want to change your mind and decide to revoke JWT tokens that are still valid.
When are you going to need this? Examples of situations where you might need to revoke perfectly legit tokens: As a user, I want to log me out of all my devices. As an administrator, I want to kick out someone from the platform.</description></item><item><title>Revoking valid tokens with a Bloom filter</title><link>https://www.krakend.io/docs/v2.0/authorization/revoking-tokens/</link><pubDate>Mon, 05 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v2.0/authorization/revoking-tokens/</guid><description>The API Gateway authorizes users that provide valid tokens according to your criteria, but at some point, you might want to change your mind and decide to revoke JWT tokens that are still valid.
When are you going to need this? Examples of situations where you might need to revoke perfectly legit tokens: As a user, I want to log me out of all my devices. As an administrator, I want to kick out someone from the platform.</description></item><item><title>Security</title><link>https://www.krakend.io/docs/enterprise/v1.3/service-settings/security/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v1.3/service-settings/security/</guid><description>KrakenD has implemented several security strategies, controlled via krakend-httpsecure. To enable them you only need to add the extra_config at service (root) level.
The following example describes the options explained later in this article:
&amp;quot;extra_config&amp;quot;: { &amp;quot;github_com/devopsfaith/krakend-httpsecure&amp;quot;: { &amp;quot;allowed_hosts&amp;quot;: [ &amp;quot;host.known.com:443&amp;quot; ], &amp;quot;ssl_proxy_headers&amp;quot;: { &amp;quot;X-Forwarded-Proto&amp;quot;: &amp;quot;https&amp;quot; }, &amp;quot;ssl_redirect&amp;quot;: true, &amp;quot;ssl_host&amp;quot;: &amp;quot;ssl.host.domain&amp;quot;, &amp;quot;ssl_port&amp;quot;: &amp;quot;443&amp;quot;, &amp;quot;ssl_certificate&amp;quot;: &amp;quot;/path/to/cert&amp;quot;, &amp;quot;ssl_private_key&amp;quot;: &amp;quot;/path/to/key&amp;quot;, &amp;quot;sts_seconds&amp;quot;: 300, &amp;quot;sts_include_subdomains&amp;quot;: true, &amp;quot;frame_deny&amp;quot;: true, &amp;quot;custom_frame_options_value&amp;quot;: &amp;quot;ALLOW-FROM https://example.com&amp;quot;, &amp;quot;hpkp_public_key&amp;quot;: &amp;quot;pin-sha256=\&amp;quot;base64==\&amp;quot;; max-age=expireTime [; includeSubDomains][; report-uri=\&amp;quot;reportURI\&amp;quot;]&amp;quot;, &amp;quot;content_type_nosniff&amp;quot;: true, &amp;quot;browser_xss_filter&amp;quot;: true, &amp;quot;content_security_policy&amp;quot;: &amp;quot;default-src 'self';&amp;quot; } See below the different options described in this configuration file.</description></item><item><title>Security</title><link>https://www.krakend.io/docs/v1.3/service-settings/security/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/service-settings/security/</guid><description>KrakenD has implemented several security strategies, controlled via krakend-httpsecure. To enable them you only need to add the extra_config at service (root) level.
The following example describes the options explained later in this article:
&amp;quot;extra_config&amp;quot;: { &amp;quot;github_com/devopsfaith/krakend-httpsecure&amp;quot;: { &amp;quot;allowed_hosts&amp;quot;: [ &amp;quot;host.known.com:443&amp;quot; ], &amp;quot;ssl_proxy_headers&amp;quot;: { &amp;quot;X-Forwarded-Proto&amp;quot;: &amp;quot;https&amp;quot; }, &amp;quot;ssl_redirect&amp;quot;: true, &amp;quot;ssl_host&amp;quot;: &amp;quot;ssl.host.domain&amp;quot;, &amp;quot;ssl_port&amp;quot;: &amp;quot;443&amp;quot;, &amp;quot;ssl_certificate&amp;quot;: &amp;quot;/path/to/cert&amp;quot;, &amp;quot;ssl_private_key&amp;quot;: &amp;quot;/path/to/key&amp;quot;, &amp;quot;sts_seconds&amp;quot;: 300, &amp;quot;sts_include_subdomains&amp;quot;: true, &amp;quot;frame_deny&amp;quot;: true, &amp;quot;custom_frame_options_value&amp;quot;: &amp;quot;ALLOW-FROM https://example.com&amp;quot;, &amp;quot;hpkp_public_key&amp;quot;: &amp;quot;pin-sha256=\&amp;quot;base64==\&amp;quot;; max-age=expireTime [; includeSubDomains][; report-uri=\&amp;quot;reportURI\&amp;quot;]&amp;quot;, &amp;quot;content_type_nosniff&amp;quot;: true, &amp;quot;browser_xss_filter&amp;quot;: true, &amp;quot;content_security_policy&amp;quot;: &amp;quot;default-src 'self';&amp;quot; } See below the different options described in this configuration file.</description></item><item><title>Security</title><link>https://www.krakend.io/docs/v1.4/service-settings/security/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/service-settings/security/</guid><description>KrakenD has implemented several security strategies, controlled via krakend-httpsecure. To enable them you only need to add the extra_config at service (root) level.
The following example describes the options explained later in this article:
&amp;quot;extra_config&amp;quot;: { &amp;quot;github_com/devopsfaith/krakend-httpsecure&amp;quot;: { &amp;quot;allowed_hosts&amp;quot;: [ &amp;quot;host.known.com:443&amp;quot; ], &amp;quot;ssl_proxy_headers&amp;quot;: { &amp;quot;X-Forwarded-Proto&amp;quot;: &amp;quot;https&amp;quot; }, &amp;quot;ssl_redirect&amp;quot;: true, &amp;quot;ssl_host&amp;quot;: &amp;quot;ssl.host.domain&amp;quot;, &amp;quot;ssl_port&amp;quot;: &amp;quot;443&amp;quot;, &amp;quot;ssl_certificate&amp;quot;: &amp;quot;/path/to/cert&amp;quot;, &amp;quot;ssl_private_key&amp;quot;: &amp;quot;/path/to/key&amp;quot;, &amp;quot;sts_seconds&amp;quot;: 300, &amp;quot;sts_include_subdomains&amp;quot;: true, &amp;quot;frame_deny&amp;quot;: true, &amp;quot;custom_frame_options_value&amp;quot;: &amp;quot;ALLOW-FROM https://example.com&amp;quot;, &amp;quot;hpkp_public_key&amp;quot;: &amp;quot;pin-sha256=\&amp;quot;base64==\&amp;quot;; max-age=expireTime [; includeSubDomains][; report-uri=\&amp;quot;reportURI\&amp;quot;]&amp;quot;, &amp;quot;content_type_nosniff&amp;quot;: true, &amp;quot;browser_xss_filter&amp;quot;: true, &amp;quot;content_security_policy&amp;quot;: &amp;quot;default-src 'self';&amp;quot; } See below the different options described in this configuration file.</description></item><item><title>Revoke Server for cluster-wide management of token revocations</title><link>https://www.krakend.io/docs/enterprise/authentication/revoke-server/</link><pubDate>Fri, 07 Oct 2022 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/authentication/revoke-server/</guid><description>The Revoke Server (a.k.a Revoker) is a standalone server that coordinates token revocation in a KrakenD Cluster. When you start the service, it offers a ping endpoint for all KrakenD instances to self-register and pushes token revocation instructions to all nodes in the cluster.
The Revoker passes the instructions to all instances by connecting to their bloom filter RPC port. It offers centralized management despite the size of your cluster. Using the Revoke Server, you no longer need to know how many KrakenDs are running and interact with them individually.</description></item><item><title>Advanced HTTP Server settings</title><link>https://www.krakend.io/docs/enterprise/v1.3/service-settings/http-server-settings/</link><pubDate>Tue, 18 Jan 2022 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v1.3/service-settings/http-server-settings/</guid><description>KrakenD starts an HTTP server to offer the API Gateway server. You can personalize some of the settings used to start the service and also override the default settings of the underlying Go standard library.
If you want to customize any of the settings below, they must be written at the top level of the configuration.
Setting parameter Type Description port integer The TCP port where KrakenD listens to.</description></item><item><title>Generate documentation using OpenAPI</title><link>https://www.krakend.io/docs/enterprise/v1.3/commands/openapi/</link><pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v1.3/commands/openapi/</guid><description>The OpenAPI or Swagger generator is a command line utility embedded in the KrakenD binary, offering the automatic generation of API documentation through a static Swagger file.
For an OpenAPI specification with detailed fields of backend responses (an information the gateway does not have), use the OpenAPI generator in the KrakenD Studio as is capable of providing in-depth detail of backend responses in the documentation through inspection of live requests.</description></item><item><title>Token validation with multiple Identity Providers</title><link>https://www.krakend.io/docs/enterprise/authentication/multiple-identity-providers/</link><pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/authentication/multiple-identity-providers/</guid><description>The JWK aggregator plugin allows KrakenD to validate tokens issued by multiple Identity Providers.
The default behavior of KrakenD allows you to validate JWT tokens using a single Identity Provider or tenant per endpoint. There are times when tokens arriving at an endpoint originate in different providers or different tenants. This is especially true in multi-tenant scenarios, or where there is an ongoing migration, or when different systems converge into the gateway.</description></item><item><title>Token validation with multiple Identity Providers</title><link>https://www.krakend.io/docs/enterprise/v2.0/authentication/multiple-identity-providers/</link><pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v2.0/authentication/multiple-identity-providers/</guid><description>The JWK aggregator plugin allows KrakenD to validate tokens issued by multiple Identity Providers.
The default behavior of KrakenD allows you to validate JWT tokens using a single Identity Provider or tenant per endpoint. There are times when tokens arriving at an endpoint originate in different providers or different tenants. This is especially true in multi-tenant scenarios, or where there is an ongoing migration, or when different systems converge into the gateway.</description></item><item><title>Token validation with multiple Identity Providers</title><link>https://www.krakend.io/docs/enterprise/v1.3/authentication/multiple-identity-providers/</link><pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v1.3/authentication/multiple-identity-providers/</guid><description>This plugin allows KrakenD to validate tokens issued by multiple Identity Providers.
The default behavior of KrakenD allows you to validate JWT tokens using a single Identity Provider or tenant per endpoint. There are times when tokens arriving at an endpoint originate in different providers or different tenants. This is especially true in multi-tenant scenarios, or where there is an ongoing migration, or when different systems converge into the gateway. The KrakenD krakend-jwk-aggregator allows you to alleviate this issue.</description></item><item><title>Securing B2B communication with mTLS</title><link>https://www.krakend.io/docs/authorization/mutual-authentication/</link><pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/authorization/mutual-authentication/</guid><description>Mutual TLS authentication (mTLS) is an authentication mechanism used traditionally in business-to-business (B2B) applications where clients provide a certificate that allows to connect to the KrakenD server.
The certificates must be recognized by your system&amp;rsquo;s Certification Authority (CA) or be added under the ca_certs list.
Configuring mutual authentication From the configuration file perspective, Mutual TLS Authentication is no more than flag at the root level of the configuration.
When mTLS is enabled, all KrakenD endpoints require clients to provide a known client-side X.</description></item><item><title>Securing B2B communication with mTLS</title><link>https://www.krakend.io/docs/enterprise/authorization/mutual-authentication/</link><pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/authorization/mutual-authentication/</guid><description>Mutual TLS authentication (mTLS) is an authentication mechanism used traditionally in business-to-business (B2B) applications where clients provide a certificate that allows to connect to the KrakenD server.
The certificates must be recognized by your system&amp;rsquo;s Certification Authority (CA) or be added under the ca_certs list.
Configuring mutual authentication From the configuration file perspective, Mutual TLS Authentication is no more than flag at the root level of the configuration.
When mTLS is enabled, all KrakenD endpoints require clients to provide a known client-side X.</description></item><item><title>Securing B2B communication with mTLS</title><link>https://www.krakend.io/docs/enterprise/v1.3/authorization/mutual-authentication/</link><pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v1.3/authorization/mutual-authentication/</guid><description>Mutual TLS authentication (mTLS) is an authentication mechanism used traditionally in business-to-business (B2B) applications where clients provide a certificate that allows to connect to the KrakenD server.
Configuring mutual authentication From the configuration file perspective, Mutual TLS Authentication is no more than flag at the root level of the configuration.
When mTLS is enabled, all KrakenD endpoints require clients to provide a known client-side X.509 authentication certificate. KrakenD relies on the system&amp;rsquo;s CA to validate certificates.</description></item><item><title>Securing B2B communication with mTLS</title><link>https://www.krakend.io/docs/enterprise/v2.0/authorization/mutual-authentication/</link><pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v2.0/authorization/mutual-authentication/</guid><description>Mutual TLS authentication (mTLS) is an authentication mechanism used traditionally in business-to-business (B2B) applications where clients provide a certificate that allows to connect to the KrakenD server.
The certificates must be recognized by your system&amp;rsquo;s Certification Authority (CA). KrakenD relies on the machine where is running.
Configuring mutual authentication From the configuration file perspective, Mutual TLS Authentication is no more than flag at the root level of the configuration.
When mTLS is enabled, all KrakenD endpoints require clients to provide a known client-side X.</description></item><item><title>Securing B2B communication with mTLS</title><link>https://www.krakend.io/docs/v1.3/authorization/mutual-authentication/</link><pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/authorization/mutual-authentication/</guid><description>Mutual TLS authentication (mTLS) is an authentication mechanism used traditionally in business-to-business (B2B) applications where clients provide a certificate that allows to connect to the KrakenD server.
The certificates must be recognized by your system&amp;rsquo;s Certification Authority (CA). KrakenD relies on the machine where is running.
Configuring mutual authentication From the configuration file perspective, Mutual TLS Authentication is no more than flag at the root level of the configuration.
When mTLS is enabled, all KrakenD endpoints require clients to provide a known client-side X.</description></item><item><title>Securing B2B communication with mTLS</title><link>https://www.krakend.io/docs/v1.4/authorization/mutual-authentication/</link><pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/authorization/mutual-authentication/</guid><description>Mutual TLS authentication (mTLS) is an authentication mechanism used traditionally in business-to-business (B2B) applications where clients provide a certificate that allows to connect to the KrakenD server.
The certificates must be recognized by your system&amp;rsquo;s Certification Authority (CA). KrakenD relies on the machine where is running.
Configuring mutual authentication From the configuration file perspective, Mutual TLS Authentication is no more than flag at the root level of the configuration.
When mTLS is enabled, all KrakenD endpoints require clients to provide a known client-side X.</description></item><item><title>Securing B2B communication with mTLS</title><link>https://www.krakend.io/docs/v2.0/authorization/mutual-authentication/</link><pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v2.0/authorization/mutual-authentication/</guid><description>Mutual TLS authentication (mTLS) is an authentication mechanism used traditionally in business-to-business (B2B) applications where clients provide a certificate that allows to connect to the KrakenD server.
The certificates must be recognized by your system&amp;rsquo;s Certification Authority (CA). KrakenD relies on the machine where is running.
Configuring mutual authentication From the configuration file perspective, Mutual TLS Authentication is no more than flag at the root level of the configuration.
When mTLS is enabled, all KrakenD endpoints require clients to provide a known client-side X.</description></item><item><title>OAuth 2.0 Client Credentials (2-legged flow)</title><link>https://www.krakend.io/docs/authorization/client-credentials/</link><pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/authorization/client-credentials/</guid><description>Through the OAuth 2.0 Client Credentials Grant, KrakenD can do a 2-legged OAuth2 flow, which means that the gateway requests to your authorization server an access token before reaching the backend&amp;rsquo;s protected resources. This token is passed in the &amp;ldquo;Authorization&amp;rdquo; header. The token refreshes when needed.
The client credentials authorize KrakenD, as the client, to access the protected resources.
Successfully setting the client credentials for a backend means that KrakenD can get the protected content.</description></item><item><title>OAuth 2.0 Client Credentials (2-legged flow)</title><link>https://www.krakend.io/docs/enterprise/authorization/client-credentials/</link><pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/authorization/client-credentials/</guid><description>Through the OAuth 2.0 Client Credentials Grant, KrakenD can do a 2-legged OAuth2 flow, which means that the gateway requests to your authorization server an access token before reaching the backend&amp;rsquo;s protected resources. This token is passed in the &amp;ldquo;Authorization&amp;rdquo; header. The token refreshes when needed.
The client credentials authorize KrakenD, as the client, to access the protected resources.
Successfully setting the client credentials for a backend means that KrakenD can get the protected content.</description></item><item><title>OAuth 2.0 Client Credentials</title><link>https://www.krakend.io/docs/enterprise/v1.3/authorization/client-credentials/</link><pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v1.3/authorization/client-credentials/</guid><description>Through the OAuth 2.0 Client Credentials Grant KrakenD can request to your authorization server an access token to reach protected resources.
The client credentials authorize KrakenD, as the client, to access the protected resources. Do not confuse this with authorizing an end-user (see JWT instead).
Successfully setting the client credentials for a backend means that KrakenD can get the protected content, but the endpoint offered to the end-user is going to be public unless you protect it with JWT.</description></item><item><title>OAuth 2.0 Client Credentials (2-legged flow)</title><link>https://www.krakend.io/docs/enterprise/v2.0/authorization/client-credentials/</link><pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v2.0/authorization/client-credentials/</guid><description>Through the OAuth 2.0 Client Credentials Grant, KrakenD can do a 2-legged OAuth2 flow, which means that the gateway requests to your authorization server an access token before reaching the backend&amp;rsquo;s protected resources. The token refreshes when needed.
The client credentials authorize KrakenD, as the client, to access the protected resources.
Successfully setting the client credentials for a backend means that KrakenD can get the protected content. Still, the endpoint offered to the end-user will be public unless you protect it with JWT or another end-user authentication mechanism.</description></item><item><title>OAuth 2.0 Client Credentials</title><link>https://www.krakend.io/docs/v1.3/authorization/client-credentials/</link><pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/authorization/client-credentials/</guid><description>Through the OAuth 2.0 Client Credentials Grant KrakenD can request to your authorization server an access token to reach protected resources.
The client credentials authorize KrakenD, as the client, to access the protected resources. Do not confuse this with authorizing an end-user (see JWT instead).
Successfully setting the client credentials for a backend means that KrakenD can get the protected content, but the endpoint offered to the end-user is going to be public unless you protect it with JWT.</description></item><item><title>OAuth 2.0 Client Credentials</title><link>https://www.krakend.io/docs/v1.4/authorization/client-credentials/</link><pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/authorization/client-credentials/</guid><description>Through the OAuth 2.0 Client Credentials Grant KrakenD can request to your authorization server an access token to reach protected resources.
The client credentials authorize KrakenD, as the client, to access the protected resources. Do not confuse this with authorizing an end-user (see JWT instead).
Successfully setting the client credentials for a backend means that KrakenD can get the protected content, but the endpoint offered to the end-user is going to be public unless you protect it with JWT.</description></item><item><title>OAuth 2.0 Client Credentials (2-legged flow)</title><link>https://www.krakend.io/docs/v2.0/authorization/client-credentials/</link><pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v2.0/authorization/client-credentials/</guid><description>Through the OAuth 2.0 Client Credentials Grant, KrakenD can do a 2-legged OAuth2 flow, which means that the gateway requests to your authorization server an access token before reaching the backend&amp;rsquo;s protected resources. The token refreshes when needed.
The client credentials authorize KrakenD, as the client, to access the protected resources.
Successfully setting the client credentials for a backend means that KrakenD can get the protected content. Still, the endpoint offered to the end-user will be public unless you protect it with JWT or another end-user authentication mechanism.</description></item><item><title>Generate Postman collections</title><link>https://www.krakend.io/docs/enterprise/v1.3/commands/postman/</link><pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v1.3/commands/postman/</guid><description>The Postman Swagger generator is a command line utility embedded in the KrakenD binary, offering the automatic generation of Postman collections. The generation of Postman collections is also available in KrakenD Studio.
Generating the Postman collection The command needed to generate the Postman collection is krakend generate postman:
Command to start KrakenD&amp;nbsp; $krakend generate postman -h ╓▄█ ▄▄▌ ╓██████▄µ ▐███ ▄███╨▐███▄██H╗██████▄ ║██▌ ,▄███╨ ▄██████▄ ▓██▌█████▄ ███▀╙╙▀▀███╕ ▐███▄███▀ ▐█████▀&amp;#34;╙▀▀&amp;#34;╙▀███ ║███▄███┘ ███▀&amp;#34;&amp;#34;▀███ ████▀╙▀███H ███ ╙███ ▐██████▌ ▐███⌐ ,▄████████M║██████▄ ║██████████M███▌ ███H ███ ,███ ▐███╨▀███µ ▐███ ███▌ ,███M║███╙▀███ ███▄```▄▄` ███▌ ███H ███,,,╓▄███▀ ▐███ ╙███▄▐███ ╙█████████M║██▌ ╙███▄`▀███████╨ ███▌ ███H █████████▀ `` `&amp;#39;` Version: v1.</description></item><item><title>Generate graphs from your configuration</title><link>https://www.krakend.io/docs/enterprise/v1.3/commands/config2dot/</link><pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v1.3/commands/config2dot/</guid><description>The krakend.json file whether it is a single file or the result of using the flexible configuration, it might be a complex file. A generated image of the configuration might help you understand better the running configuration.
The config2dot generator will generate internally an intermediate DOT dile to immediately render it to a png image.
The following image illustrates an example of a KrakenD configuration:
Generating the Postman collection The command needed to generate the Postman collection is krakend generate postman:</description></item><item><title>Protecting APIs using the Auth0 integration</title><link>https://www.krakend.io/docs/authorization/auth0/</link><pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/authorization/auth0/</guid><description>Let&amp;rsquo;s start with the elephant in the room: when you face the challenge of creating a modern API that has to be scalable, secure, performant, and resilient, it might look like a daunting task.
The good news is that combining products like Auth0 and KrakenD helps you solve this exact problem with an implementation that is straightforward.
Auth0 can authenticate users and machines, and KrakenD knows your business APIs and validate them in a very efficient and convenient way.</description></item><item><title>Protecting APIs using the Auth0 integration</title><link>https://www.krakend.io/docs/enterprise/authorization/auth0/</link><pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/authorization/auth0/</guid><description>Let&amp;rsquo;s start with the elephant in the room: when you face the challenge of creating a modern API that has to be scalable, secure, performant, and resilient, it might look like a daunting task.
The good news is that combining products like Auth0 and KrakenD helps you solve this exact problem with an implementation that is straightforward.
Auth0 can authenticate users and machines, and KrakenD knows your business APIs and validate them in a very efficient and convenient way.</description></item><item><title>Protecting APIs using the Auth0 integration</title><link>https://www.krakend.io/docs/enterprise/v1.3/authorization/auth0/</link><pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v1.3/authorization/auth0/</guid><description>Let&amp;rsquo;s start with the elephant in the room: when you face the challenge of creating a modern API that has to be scalable, secure, performant, and resilient, it might look like a daunting task.
The good news is that combining products like Auth0 and KrakenD helps you solve this exact problem with an implementation that is straightforward.
Auth0 can authenticate users and machines, and KrakenD knows your business APIs and validate them in a very efficient and convenient way.</description></item><item><title>Protecting APIs using the Auth0 integration</title><link>https://www.krakend.io/docs/enterprise/v2.0/authorization/auth0/</link><pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v2.0/authorization/auth0/</guid><description>Let&amp;rsquo;s start with the elephant in the room: when you face the challenge of creating a modern API that has to be scalable, secure, performant, and resilient, it might look like a daunting task.
The good news is that combining products like Auth0 and KrakenD helps you solve this exact problem with an implementation that is straightforward.
Auth0 can authenticate users and machines, and KrakenD knows your business APIs and validate them in a very efficient and convenient way.</description></item><item><title>Protecting APIs using the Auth0 integration</title><link>https://www.krakend.io/docs/v1.3/authorization/auth0/</link><pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/authorization/auth0/</guid><description>Let&amp;rsquo;s start with the elephant in the room: when you face the challenge of creating a modern API that has to be scalable, secure, performant, and resilient, it might look like a daunting task.
The good news is that combining products like Auth0 and KrakenD helps you solve this exact problem with an implementation that is straightforward.
Auth0 can authenticate users and machines, and KrakenD knows your business APIs and validate them in a very efficient and convenient way.</description></item><item><title>Protecting APIs using the Auth0 integration</title><link>https://www.krakend.io/docs/v1.4/authorization/auth0/</link><pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/authorization/auth0/</guid><description>Let&amp;rsquo;s start with the elephant in the room: when you face the challenge of creating a modern API that has to be scalable, secure, performant, and resilient, it might look like a daunting task.
The good news is that combining products like Auth0 and KrakenD helps you solve this exact problem with an implementation that is straightforward.
Auth0 can authenticate users and machines, and KrakenD knows your business APIs and validate them in a very efficient and convenient way.</description></item><item><title>Protecting APIs using the Auth0 integration</title><link>https://www.krakend.io/docs/v2.0/authorization/auth0/</link><pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v2.0/authorization/auth0/</guid><description>Let&amp;rsquo;s start with the elephant in the room: when you face the challenge of creating a modern API that has to be scalable, secure, performant, and resilient, it might look like a daunting task.
The good news is that combining products like Auth0 and KrakenD helps you solve this exact problem with an implementation that is straightforward.
Auth0 can authenticate users and machines, and KrakenD knows your business APIs and validate them in a very efficient and convenient way.</description></item><item><title>Protecting APIs using Keycloak</title><link>https://www.krakend.io/docs/authorization/keycloak/</link><pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/authorization/keycloak/</guid><description>The Keycloak integration allows one of the many possible OpenID Connect different security options available in KrakenD.
Keycloak is an Open Source Identity and Access Management project, sponsored by RedHat. The KrakenD configuration for Keycloak relies internally on the JWT validation component.
Keycloak integration JSON web tokens (JWT) are an open standard (RFC 7519) that define a way for securely transmitting information between parties. JWT tokens are compact, secure (digitally signed), and have become an industry-standard used at internet scale.</description></item><item><title>Protecting APIs using Keycloak</title><link>https://www.krakend.io/docs/enterprise/authorization/keycloak/</link><pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/authorization/keycloak/</guid><description>The Keycloak integration allows one of the many possible OpenID Connect different security options available in KrakenD.
Keycloak is an Open Source Identity and Access Management project, sponsored by RedHat. The KrakenD configuration for Keycloak relies internally on the JWT validation component.
Keycloak integration JSON web tokens (JWT) are an open standard (RFC 7519) that define a way for securely transmitting information between parties. JWT tokens are compact, secure (digitally signed), and have become an industry-standard used at internet scale.</description></item><item><title>Protecting APIs using Keycloak</title><link>https://www.krakend.io/docs/enterprise/v2.0/authorization/keycloak/</link><pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v2.0/authorization/keycloak/</guid><description>The Keycloak integration allows one of the many possible OpenID Connect different security options available in KrakenD.
Keycloak is an Open Source Identity and Access Management project, sponsored by RedHat. The KrakenD configuration for Keycloak relies internally on the JWT validation component.
Keycloak integration JSON web tokens (JWT) are an open standard (RFC 7519) that define a way for securely transmitting information between parties. JWT tokens are compact, secure (digitally signed), and have become an industry-standard used at internet scale.</description></item><item><title>Protecting APIs using Keycloak</title><link>https://www.krakend.io/docs/v1.4/authorization/keycloak/</link><pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/authorization/keycloak/</guid><description>The Keycloak integration allows one of the many possible OpenID Connect different security options available in KrakenD.
Keycloak is an Open Source Identity and Access Management project, sponsored by RedHat. The KrakenD configuration for Keycloak relies internally on the JWT validation component.
Keycloak integration JSON web tokens (JWT) are an open standard (RFC 7519) that define a way for securely transmitting information between parties. JWT tokens are compact, secure (digitally signed), and have become an industry-standard used at internet scale.</description></item><item><title>Protecting APIs using Keycloak</title><link>https://www.krakend.io/docs/v2.0/authorization/keycloak/</link><pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v2.0/authorization/keycloak/</guid><description>The Keycloak integration allows one of the many possible OpenID Connect different security options available in KrakenD.
Keycloak is an Open Source Identity and Access Management project, sponsored by RedHat. The KrakenD configuration for Keycloak relies internally on the JWT validation component.
Keycloak integration JSON web tokens (JWT) are an open standard (RFC 7519) that define a way for securely transmitting information between parties. JWT tokens are compact, secure (digitally signed), and have become an industry-standard used at internet scale.</description></item><item><title>Handling WebSockets connections</title><link>https://www.krakend.io/docs/enterprise/v1.3/websockets/</link><pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v1.3/websockets/</guid><description>KrakenD Enterprise supports communications using the WebSocket Protocol (RFC-6455) to enable two-way communication between a client to a backend host through the API gateway. This technology aims to provide a mechanism for browser-based applications that need two-way communication with servers that do not rely on opening multiple HTTP connections.
KrakenD has the capability of multiplexing. Each individual end-client (e.g., Desktop, Mobile device) establishes a connection with the gateway directly, and KrakenD opens a single channel with the backend host to handle all its connected clients.</description></item><item><title>WebSockets</title><link>https://www.krakend.io/docs/enterprise/v2.0/websockets/</link><pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v2.0/websockets/</guid><description>KrakenD Enterprise supports communications using the WebSocket Protocol (RFC-6455) to enable two-way communication between a client to a backend host through the API gateway. This technology aims to provide a mechanism for browser-based applications that need two-way communication with servers that do not rely on opening multiple HTTP connections.
KrakenD has the capability of multiplexing. Each individual end client (e.g., Desktop, Mobile device) establishes a connection with the gateway directly, and KrakenD opens a single channel with the backend host to handle all its connected clients.</description></item><item><title>WebSockets</title><link>https://www.krakend.io/docs/enterprise/websockets/</link><pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/websockets/</guid><description>KrakenD Enterprise supports communications using the WebSocket Protocol (RFC-6455) to enable two-way communication between a client to a backend host through the API gateway. This technology aims to provide a mechanism for browser-based applications that need two-way communication with servers that do not rely on opening multiple HTTP connections.
KrakenD has the capability of multiplexing. Each individual end client (e.g., Desktop, Mobile device) establishes a connection with the gateway directly, and KrakenD opens a single channel with the backend host to handle all its connected clients.</description></item><item><title>Frequently Asked Questions</title><link>https://www.krakend.io/docs/enterprise/v1.3/faq/</link><pubDate>Wed, 26 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v1.3/faq/</guid><description>I am getting a 200 status when the backend returns a 201 E.g:
2017/01/19 - 10:31:27 | 200 | 1.134431ms | ::1 | POST /users Explanation By default, the gateway will always send an HTTP status 200 if the backend returns a 200 or a 201. You can inject your own HTTPStatusHandler implementation if you need a different behavior. Check this issue comment for more details.
I am getting a 500 status when the backend returns anything but 200, 201 or redirects E.</description></item><item><title>Frequently Asked Questions</title><link>https://www.krakend.io/docs/v1.3/faq/</link><pubDate>Wed, 26 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/faq/</guid><description>I am getting a 200 status when the backend returns a 201 E.g:
2017/01/19 - 10:31:27 | 200 | 1.134431ms | ::1 | POST /users Explanation By default, the gateway will always send an HTTP status 200 if the backend returns a 200 or a 201. You can inject your own HTTPStatusHandler implementation if you need a different behavior. Check this issue comment for more details.
I am getting a 500 status when the backend returns anything but 200, 201 or redirects E.</description></item><item><title>Frequently Asked Questions</title><link>https://www.krakend.io/docs/v1.4/faq/</link><pubDate>Wed, 26 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/faq/</guid><description>I am getting a 200 status when the backend returns a 201 E.g:
2017/01/19 - 10:31:27 | 200 | 1.134431ms | ::1 | POST /users Explanation By default, the gateway will always send an HTTP status 200 if the backend returns a 200 or a 201. You can inject your own HTTPStatusHandler implementation if you need a different behavior. Check this issue comment for more details.
I am getting a 500 status when the backend returns anything but 200, 201 or redirects E.</description></item></channel></rss>