<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on KrakenD - Open source API Gateway</title>
    <link>https://www.krakend.io/docs/</link>
    <description>Recent content in Docs on KrakenD - Open source API Gateway</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 26 Feb 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.krakend.io/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introduction to KrakenD</title>
      <link>https://www.krakend.io/docs/overview/introduction/</link>
      <pubDate>Tue, 25 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/overview/introduction/</guid>
      <description>KrakenD is a high-performance open source API Gateway.
Its core functionality is to create an API that acts as an aggregator of many microservices into single endpoints, doing the heavy-lifting automatically for you: aggregate, transform, filter, decode, throttle, auth and more.
KrakenD needs no programming as it offers a declarative way to create the endpoints. It is well structured and layered and open to extending its functionality using plug-and-play middleware developed by the community or in-house.</description>
    </item>
    
    <item>
      <title>Extending KrakenD, the big picture.</title>
      <link>https://www.krakend.io/docs/extending/the-big-picture/</link>
      <pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/extending/the-big-picture/</guid>
      <description>Before starting to dive into the KrakenD framework code, spend a few minutes understanding the big pieces of the system, how it works, and the philosophy behind it.
The KrakenD rules Let&amp;rsquo;s start with the rules followed to code KrakenD, as they answer to architectural design questions:
 Reactive is key Reactive is key (yes, it is very very important) Failing fast is better than succeeding slow (say it one more time!</description>
    </item>
    
    <item>
      <title>Backends Overview</title>
      <link>https://www.krakend.io/docs/backends/overview/</link>
      <pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/backends/overview/</guid>
      <description>The concept of &amp;ldquo;backend&amp;rdquo; references to the origin servers providing the necessary data to populate your endpoints.
A backend can be any server inside our outside your networks as long it is reachable by KrakenD. For instance, you can create endpoints that are fetching data from your internal servers and enrich them by adding third-party data from an external API like Github, Facebook or any other service.
The backends are declared inside every endpoint using the backend key.</description>
    </item>
    
    <item>
      <title>Service Discovery overview</title>
      <link>https://www.krakend.io/docs/service-discovery/overview/</link>
      <pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/service-discovery/overview/</guid>
      <description>Service discovery enables clients to detect and locate services on your enterprise network automatically. Instead of defining a static list of IPs or hostnames pointing to your backends, you can use a service discovery provider and let KrakenD interact with it to get the hosts dynamically.
Static resolution The static resolution is the default service discovery choice. It uses a list of hosts declared in the configuration file and KrakenD must be able to reach them directly by hostname, DNS or IP.</description>
    </item>
    
    <item>
      <title>KrakenD&#39;s configuration file(s)</title>
      <link>https://www.krakend.io/docs/configuration/overview/</link>
      <pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/configuration/overview/</guid>
      <description>All the configuration that the KrakenD server needs to start and operate is a single configuration file. This file is referred to as krakend.json through all the documentation.
The name krakend.json is just an alias, a convention, that we use everywhere. Your real configuration file can have any name, be stored anywhere, or split in many pieces.
Provided this simple configuration mechanism, the versioning and automation are very convenient. Any change in the API Gateway is always under the version control system, and the code controls the state of the gateway.</description>
    </item>
    
    <item>
      <title>How to create KrakenD endpoints</title>
      <link>https://www.krakend.io/docs/endpoints/creating-endpoints/</link>
      <pubDate>Wed, 26 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/endpoints/creating-endpoints/</guid>
      <description>KrakenD endpoints are the essential part of KrakenD as they are what your end users consume.
See Understanding the configuration file if you haven&amp;rsquo;t read it yet.
To create an endpoint you only need to add an endpoint object under the endpoints list with the resource you want to expose. If no method is declared, it&amp;rsquo;s assumed to be read-only (GET).
The endpoints section looks like this:
&amp;quot;endpoints&amp;quot;: [ { &amp;quot;endpoint&amp;quot;: &amp;quot;/v1/foo&amp;quot;, &amp;quot;method&amp;quot;: &amp;quot;GET&amp;quot;, &amp;quot;backend&amp;quot;: [ { &amp;quot;url_pattern&amp;quot;: &amp;quot;/bar&amp;quot;, &amp;quot;method&amp;quot;: &amp;quot;GET&amp;quot;, &amp;quot;host&amp;quot;: [ &amp;quot;https://api.</description>
    </item>
    
    <item>
      <title>Throttling overview</title>
      <link>https://www.krakend.io/docs/throttling/overview/</link>
      <pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/throttling/overview/</guid>
      <description>KrakenD offers several ways to protect the usage of your infrastructure that might act at very different levels.
The most significant type of throttling is the rate limit that allows you to restrict the traffic of end-users or the traffic of KrakenD against your backend services. The rate limits mainly cover the following purposes:
 Avoid stressing or flooding your backend services with massive requests (proxy rate limit) Establish a quota of usage for your exposed API (router rate limit) Create a simple QoS strategy for your API  The rate limits are complementary to the Circuit Breaker feature.</description>
    </item>
    
    <item>
      <title>High-availability cluster</title>
      <link>https://www.krakend.io/docs/cluster/cluster-overview/</link>
      <pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/cluster/cluster-overview/</guid>
      <description>A KrakenD cluster consists of multiple KrakenD instances running simultaneously and working together to provide increased reliability, higher throughput, scalability, and fail-over.
A KrakenD cluster runs with the same KrakenD open source software you use today to start a single instance. Consequently no license is needed to operate a sizeable enterprise-grade API gateway.
KrakenD cluster benefits Having a KrakenD cluster provides these immediate benefits:
 Increased throughput and capacity: Having more KrakenD nodes expands the number of requests the API can handle.</description>
    </item>
    
    <item>
      <title>Benchmarks Overview</title>
      <link>https://www.krakend.io/docs/benchmarks/overview/</link>
      <pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/benchmarks/overview/</guid>
      <description>KrakenD, the ultra performer API Gateway An API Gateway is a component that needs to deliver really fast, as it is an added layer in the infrastructure. KrakenD was built with performance in mind. In this page and inner pages, you&amp;rsquo;ll find several tests we did to measure the performance. We also invite you to do them for yourself!
TL;DR: Benchmark results ~18,000 requests/second on an ordinary laptop.
The following table summarizes different performance tests using Amazon EC2 virtual instances and an example with a laptop.</description>
    </item>
    
    <item>
      <title>Running KrakenD server. The `krakend run` command</title>
      <link>https://www.krakend.io/docs/commands/run/</link>
      <pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/commands/run/</guid>
      <description>To start KrakenD, you need to invoke the run command with the path to the configuration file. You can also specify the port (defaults to 8080)
Command to start KrakenD&amp;nbsp;   krakend&amp;nbsp;run&amp;nbsp;-c&amp;nbsp;krakend.json&amp;nbsp; #&amp;nbsp;or&amp;nbsp; krakend&amp;nbsp;run&amp;nbsp;--config&amp;nbsp;/path/to/krakend.json&amp;nbsp; #&amp;nbsp;or&amp;nbsp; krakend&amp;nbsp;run&amp;nbsp;--config&amp;nbsp;/path/to/krakend.json&amp;nbsp;-p&amp;nbsp;8080&amp;nbsp;    The krakend run command with no flags will remind you that you need the path to the configuration file:
Missing configuration file&amp;nbsp;   krakend&amp;nbsp;run&amp;nbsp; Please,&amp;nbsp;provide&amp;nbsp;the&amp;nbsp;path&amp;nbsp;to&amp;nbsp;your&amp;nbsp;config&amp;nbsp;file&amp;nbsp;    Show the help: Run command help&amp;nbsp;   krakend&amp;nbsp;run&amp;nbsp;-h&amp;nbsp; &amp;nbsp; `7MMF&#39;&amp;nbsp;`YMM&#39;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`7MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`7MM&#34;</description>
    </item>
    
    <item>
      <title>Control of bot traffic</title>
      <link>https://www.krakend.io/docs/throttling/botdetector/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/throttling/botdetector/</guid>
      <description>The bot detector module checks incoming connections to the gateway to determine if a bot made them, helping you detect and reject bots carrying out scraping, content theft, and form spam.
Bots are detected by inspecting the User-Agent and comparing its value with a set of configuration rules provided by you. The bot detector module does not set any initial rules, meaning that is up to you to decide the best rules for your use case, and choose how restrictive or permissive you are with bots.</description>
    </item>
    
    <item>
      <title>Enabling TLS for HTTPS and HTTP/2</title>
      <link>https://www.krakend.io/docs/service-settings/tls/</link>
      <pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/service-settings/tls/</guid>
      <description>There are two different strategies when using TLS over KrakenD:
 Use TLS for HTTPS and HTTP/2 in KrakenD Use a balancer with TLS termination in front of KrakenD (e.g., ELB, HAproxy)  In case you want to enable TLS in KrakenD you need to add a tls key at service level (configuration&amp;rsquo;s file root) with at least the public key and the private key. When you add TLS, KrakenD listens only using TLS, and no traffic to plain HTTP is accepted.</description>
    </item>
    
    <item>
      <title>SD with DNS SRV (e.g. Consul)</title>
      <link>https://www.krakend.io/docs/service-discovery/dns-srv/</link>
      <pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/service-discovery/dns-srv/</guid>
      <description>The DNS SRV is a market standard used by systems such as Kubernetes, Mesos, Haproxy, Nginx plus, AWS ECS, Linkerd, and more.
To integrate Consul as the Service Discovery or any other DNS SRV compatible systems you only need to set two keys:
 &amp;quot;sd&amp;quot;: &amp;quot;dns&amp;quot;: To set service discovery = DNS SRV &amp;quot;host&amp;quot;: []: The list of all the names providing the resolution  These keys need to be added in the backend section of your configuration.</description>
    </item>
    
    <item>
      <title>Writing custom plugins</title>
      <link>https://www.krakend.io/docs/extending/writing-plugins/</link>
      <pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/extending/writing-plugins/</guid>
      <description>KrakenD&amp;rsquo;s modular design allows you to extend its functionality by adding your custom code. As an engineer, it&amp;rsquo;s always tempting to start writing code but the majority of scenarios do not require writing any. Existing modules, middleware, and plugins suffice almost everyone&amp;rsquo;s needs.
It&amp;rsquo;s important to remark, that if you want to do complex business logic checks and transformations, aside from the core functionality, there is specific scripting designed for that without compiling Go code.</description>
    </item>
    
    <item>
      <title>JSON Web Tokens overview</title>
      <link>https://www.krakend.io/docs/authorization/jwt-overview/</link>
      <pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/authorization/jwt-overview/</guid>
      <description>The JSON Web Token specification is an industry standard to represent claims securely between two parties. The JWT is an encoded JSON object that contains key-value pairs of attributes that are signed by a trusted authority.
When JWT shields a specific set of endpoints, requests to the API gateway must provide a token. Verification of the token takes place in every request, including the check of the signature and optionally the assurance that its issuer, roles, and audience are sufficient to access the endpoint.</description>
    </item>
    
    <item>
      <title>Logging - Syslog, stdout and GELF</title>
      <link>https://www.krakend.io/docs/logging-metrics-tracing/logging/</link>
      <pubDate>Tue, 30 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/logging-metrics-tracing/logging/</guid>
      <description>When the service starts, if no logging configuration is set, all the log events are sent to the standard output using the basic logger capabilities of the KrakenD framework. The reporting level, in that case, is DEBUG and adds no prefix to the logs.
Extending the logging capabilities Different logging components allow you to extend the logging functionality, such as sending the events to the syslog, choosing the verbosity level or use the Graylog Extended Log Format (GELF).</description>
    </item>
    
    <item>
      <title>Rate-limiting backends</title>
      <link>https://www.krakend.io/docs/backends/rate-limit/</link>
      <pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/backends/rate-limit/</guid>
      <description>No matter what is the amount of activity the users are generating at the router level, you might want to restrict the connections KrakenD makes to your backends. Configuration is similar to the router&amp;rsquo;s one, but it&amp;rsquo;s declared directly in the backend section instead of the endpoint.
This parameter is defined at the krakend.json configuration file as follows:
... { &amp;quot;endpoint&amp;quot;: &amp;quot;/products/{cat_id}&amp;quot;, &amp;quot;backend&amp;quot;: [ { &amp;quot;host&amp;quot;: [ &amp;quot;http://some.api.com/&amp;quot; ], &amp;quot;url_pattern&amp;quot;: &amp;quot;/catalog/category/{cat_id}.</description>
    </item>
    
    <item>
      <title>Understanding the configuration file</title>
      <link>https://www.krakend.io/docs/configuration/structure/</link>
      <pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/configuration/structure/</guid>
      <description>All KrakenD behavior depends on the krakend.json file (other formats supported), so being familiar with the structure of the configuration file it&amp;rsquo;s essential.
Configuration file structure There are a large number of options you can put in this file, let&amp;rsquo;s focus now only on the structure:
{ &amp;quot;version&amp;quot;: 2, &amp;quot;endpoints&amp;quot;: [...] &amp;quot;extra_config&amp;quot;: {...} ... }   version: The KrakenD file format. Current version is 2, use 1 only for old KrakenD releases (0.</description>
    </item>
    
    <item>
      <title>Deployment best practices</title>
      <link>https://www.krakend.io/docs/deploying/best-practices/</link>
      <pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/deploying/best-practices/</guid>
      <description>Setting up a cluster of KrakenD instances is a straightforward process, but here are some not so obvious recommendations to get a good start.
Use blue/green or similar deployment strategy As it happens with Apache, Nginx, Mysql, and the vast majority of services, changing the configuration requires a restart. When deploying new changes, use a technique like blue/green deployment or similar.
This scenario can be automated and is available in all major cloud providers.</description>
    </item>
    
    <item>
      <title>Developer Tools</title>
      <link>https://www.krakend.io/docs/developer/overview/</link>
      <pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/developer/overview/</guid>
      <description>There are some resources that make your life easier when developing with KrakenD. These tools are ment to be used only in development and never in production
Hot reload the configuration A Docker image using Reflex watches the configuration directory and reloads KrakenD when the configuration changes. This is very convenient while you are developing as it allows you to test new changes without having to restart manually and making the process less tedious.</description>
    </item>
    
    <item>
      <title>Setting up a cluster</title>
      <link>https://www.krakend.io/docs/cluster/configuration/</link>
      <pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/cluster/configuration/</guid>
      <description>Hardware can fail at any time, and a Gateway is a piece critical enough to have redundancy of the service. Having a cluster of machines operating the service assures high availability.
KrakenD nodes are stateless and they don&amp;rsquo;t store data or application state to a persistent storage. Instead, any configuration data and application state exist within the configuration file. Nodes are expendable and replaceable at any time, as they do not hold anything.</description>
    </item>
    
    <item>
      <title>Commands - check</title>
      <link>https://www.krakend.io/docs/commands/check/</link>
      <pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/commands/check/</guid>
      <description>The krakend check command validates the passed configuration. Since KrakenD does not implement a strict parsing, typos in the config file could be shadowed. In order to validate your config completely, it is recommended to use the --debug flag.
Usage of KrakenD check&amp;nbsp;   ./krakend&amp;nbsp;check&amp;nbsp;-h&amp;nbsp; &amp;nbsp; `7MMF&#39;&amp;nbsp;`YMM&#39;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`7MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`7MM&#34;&#34;&#34;Yb.&amp;nbsp; MM&amp;nbsp;&amp;nbsp;&amp;nbsp;.M&#39;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`Yb.&amp;nbsp; MM&amp;nbsp;.d&#34;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`7Mb,od8&amp;nbsp;,6&#34;Yb.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;,MP&#39;.gP&#34;Ya&amp;nbsp;`7MMpMMMb.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`Mb&amp;nbsp; MMMMM.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&#39;&amp;nbsp;&#34;&#39;8)&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;;Y&amp;nbsp;&amp;nbsp;,M&#39;&amp;nbsp;&amp;nbsp;&amp;nbsp;Yb&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp; MM&amp;nbsp;&amp;nbsp;VMA&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,pm9MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM;Mm&amp;nbsp;&amp;nbsp;8M&#34;&#34;&#34;&#34;&#34;&#34;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,MP&amp;nbsp; MM&amp;nbsp;&amp;nbsp;&amp;nbsp;`MM.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;8M&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;`Mb.YM.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,dP&#39;&amp;nbsp; .JMML.&amp;nbsp;&amp;nbsp;&amp;nbsp;MMb..JMML.&amp;nbsp;&amp;nbsp;`Moo9^Yo..JMML.&amp;nbsp;YA.`Mbmmd&#39;.JMML&amp;nbsp;&amp;nbsp;JMML..JMMmmmd&amp;nbsp; _______________________________________________________________________&amp;nbsp; &amp;nbsp; Version:&amp;nbsp;1.1.1&amp;nbsp; &amp;nbsp; Validates&amp;nbsp;that&amp;nbsp;the&amp;nbsp;active&amp;nbsp;configuration&amp;nbsp;file&amp;nbsp;has&amp;nbsp;a&amp;nbsp;valid&amp;nbsp;syntax&amp;nbsp;to&amp;nbsp;run&amp;nbsp;the&amp;nbsp;service.&amp;nbsp; Change&amp;nbsp;the&amp;nbsp;configuration&amp;nbsp;file&amp;nbsp;by&amp;nbsp;using&amp;nbsp;the&amp;nbsp;--config&amp;nbsp;flag&amp;nbsp; &amp;nbsp; Usage:&amp;nbsp; krakend&amp;nbsp;check&amp;nbsp;[flags]&amp;nbsp; &amp;nbsp; Aliases:&amp;nbsp; check,&amp;nbsp;validate&amp;nbsp; &amp;nbsp; Examples:&amp;nbsp; krakend&amp;nbsp;check&amp;nbsp;-d&amp;nbsp;-c&amp;nbsp;config.json&amp;nbsp; &amp;nbsp; Flags:&amp;nbsp; -h,&amp;nbsp;--help&amp;nbsp;&amp;nbsp;&amp;nbsp;help&amp;nbsp;for&amp;nbsp;check&amp;nbsp; &amp;nbsp; Global&amp;nbsp;Flags:&amp;nbsp; -c,&amp;nbsp;--config&amp;nbsp;string&amp;nbsp;&amp;nbsp;&amp;nbsp;Path&amp;nbsp;to&amp;nbsp;the&amp;nbsp;configuration&amp;nbsp;filename&amp;nbsp; -d,&amp;nbsp;--debug&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Enable&amp;nbsp;the&amp;nbsp;debug&amp;nbsp;    Passing a path to the config file is required</description>
    </item>
    
    <item>
      <title>Comparison of KrakenD vs other products in the market (Benchmark)</title>
      <link>https://www.krakend.io/docs/benchmarks/api-gateway-benchmark/</link>
      <pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/benchmarks/api-gateway-benchmark/</guid>
      <description>We wanted to compare our own product with other similar products in the market. In order to do so we used the same environment and conditions and tested the following products:
 Kong Vulcand Tyk KrakenD  For the benchmarks, we based the tests on the benchmarking project varnish/api-gateway-benchmarks.
At the time of writing, KrakenD does not support auth features, so we just did the benchmark with test01
Hardware Model MacBook Pro (MacBookPro11,4) - August 2015 Processor: Intel Core i7 2,2 GHz  Setup For this test, we stored this configuration at krakend.</description>
    </item>
    
    <item>
      <title>KrakenD Benchmarks on AWS</title>
      <link>https://www.krakend.io/docs/benchmarks/aws/</link>
      <pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/benchmarks/aws/</guid>
      <description>The following numbers show the execution results for the KrakenD benchmarks on Amazon EC2 machines.
Benchmark Setup This set of benchmarks have been running on different AWS EC2 instances. Each individual test consists of spinning up 3 different machines, being:
 A web server: A LWAN web server using an instance c4.xlarge. This is the &amp;ldquo;fake API&amp;rdquo; where KrakenD will take the data The HTTP load generator: The machine actually running the load test.</description>
    </item>
    
    <item>
      <title>Data manipulation</title>
      <link>https://www.krakend.io/docs/backends/data-manipulation/</link>
      <pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/backends/data-manipulation/</guid>
      <description>Filtering When you offer a KrakenD endpoint you can decide to show only a subset of the fields coming from the backends&amp;rsquo; response or alter the structure of the content provided. There are a number of different reasons you might want to use this functionality, but we strongly encourage you to use it to save user&amp;rsquo;s bandwidth and increase load and render times.
There are two different strategies you can use to filter content:</description>
    </item>
    
    <item>
      <title>Response manipulation</title>
      <link>https://www.krakend.io/docs/endpoints/response-manipulation/</link>
      <pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/endpoints/response-manipulation/</guid>
      <description>KrakenD allows you to perform several manipulations of the responses out of the box, just by adding them to the configuration file. You can also add your own or 3rd parties middlewares to extend this behavior.
KrakenD manipulations are measured in nanoseconds, you can find the benchmark for every response manipulation in the benchmarks
The following manipulations are available by default:
Merging When you create KrakenD endpoints, if a specific endpoint feeds from 2 or more backend sources (APIs), they will be automatically merged in a single response to the client.</description>
    </item>
    
    <item>
      <title>Endpoint rate limiting</title>
      <link>https://www.krakend.io/docs/endpoints/rate-limit/</link>
      <pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/endpoints/rate-limit/</guid>
      <description>Limiting endpoints is responsibility of the router rate and allows you to set the number of maximum requests per second a KrakenD endpoint is going to accept. By default, there is no limitation on the number of requests an endpoint can handle.
To specify a rate limit, you need to add the configuration in the desired endpoint.
At the router level, you can set the rate limit for endpoints based on:</description>
    </item>
    
    <item>
      <title>Local Benchmarks</title>
      <link>https://www.krakend.io/docs/benchmarks/local/</link>
      <pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/benchmarks/local/</guid>
      <description>Hardware Model MacBook Pro (MacBookPro11,4) - August 2015 Processor: Intel Core i7 2,2 GHz  Setup For this test, we stored this configuration at krakend.json
{ &amp;quot;version&amp;quot;: 1, &amp;quot;endpoints&amp;quot;: [ { &amp;quot;endpoint&amp;quot;: &amp;quot;/foo&amp;quot;, &amp;quot;method&amp;quot;: &amp;quot;GET&amp;quot;, &amp;quot;backend&amp;quot;: [ { &amp;quot;url_pattern&amp;quot;: &amp;quot;/__debug/bar&amp;quot;, &amp;quot;host&amp;quot;: [ &amp;quot;http://127.0.0.1:8080&amp;quot; ] } ], &amp;quot;concurrent_calls&amp;quot;: &amp;quot;1&amp;quot;, &amp;quot;max_rate&amp;quot;: 100000 } ], &amp;quot;oauth&amp;quot;: { &amp;quot;disable&amp;quot;: true }, &amp;quot;cache_ttl&amp;quot;: &amp;quot;5m&amp;quot;, &amp;quot;timeout&amp;quot;: &amp;quot;5s&amp;quot; }  And we started the KrakenD with this cmd:</description>
    </item>
    
    <item>
      <title>Metrics middleware</title>
      <link>https://www.krakend.io/docs/logging-metrics-tracing/metrics/</link>
      <pubDate>Mon, 05 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/logging-metrics-tracing/metrics/</guid>
      <description>The metrics middleware offers a new service in a different port and exposes a /__stats/ endpoint with the collection of all the KrakenD metrics:
http://localhost:8080/__stats/  Enabling metrics In order to add metrics to your KrakenD installation add the github_com/devopsfaith/krakend-metrics namespace under extra_config in the root of your configuration file, e.g.:
{ &amp;#34;version&amp;#34;: 2, &amp;#34;extra_config&amp;#34;: { &amp;#34;github_com/devopsfaith/krakend-metrics&amp;#34;: { &amp;#34;collection_time&amp;#34;: &amp;#34;60s&amp;#34;, &amp;#34;proxy_disabled&amp;#34;: false, &amp;#34;router_disabled&amp;#34;: false, &amp;#34;backend_disabled&amp;#34;: false, &amp;#34;endpoint_disabled&amp;#34;: false, &amp;#34;listen_address&amp;#34;: &amp;#34;:8090&amp;#34; },  .</description>
    </item>
    
    <item>
      <title>JWT Validation</title>
      <link>https://www.krakend.io/docs/authorization/jwt-validation/</link>
      <pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/authorization/jwt-validation/</guid>
      <description>The JWT validation protects endpoints from public usage, forcing calls to the API gateway to provide a valid token to access its contents.
The generation of the token itself has to be driven by a third party, although the user calls can be proxied through KrakenD. If you don&amp;rsquo;t have an identity server yet you still can sign tokens through KrakenD
The internal component responsible for validating tokens is called krakend-jose.</description>
    </item>
    
    <item>
      <title>Flexible configuration</title>
      <link>https://www.krakend.io/docs/configuration/flexible-config/</link>
      <pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/configuration/flexible-config/</guid>
      <description>The Flexible Configuration component is included in the KrakenD API Gateway and allows you to split the configuration file into several pieces for a more natural organization.
When the Flexible Configuration is enabled, KrakenD assumes that your configuration file is a template that needs compilation during start-up time. With this, you have the opportunity to produce a more sophisticated configuration file that utilizes variables and brings content from external files.</description>
    </item>
    
    <item>
      <title>Service Discovery with etcd</title>
      <link>https://www.krakend.io/docs/service-discovery/etcd/</link>
      <pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/service-discovery/etcd/</guid>
      <description>The etcd Service Discovery integration allows you to perform the host resolution using your existing etcd setup.
The integration etcd is controlled by the krakend-etcd component and adds client and subscriber capabilities for etcd.
Enabling etcd To enable the integration add in the root of your configuration file the necessary settings:
{ &amp;#34;version&amp;#34;: 2, &amp;#34;extra_config&amp;#34;: { &amp;#34;github_com/devopsfaith/krakend-etcd&amp;#34;: { &amp;#34;machines&amp;#34;: [ &amp;#34;https://192.168.1.100:4001&amp;#34;, &amp;#34;https://192.168.1.101:4001&amp;#34; ], &amp;#34;dial_timeout&amp;#34;: &amp;#34;5s&amp;#34;, &amp;#34;dial_keepalive&amp;#34;: &amp;#34;30s&amp;#34;, &amp;#34;header_timeout&amp;#34;: &amp;#34;1s&amp;#34;, &amp;#34;cert&amp;#34;: &amp;#34;/path/to/cert&amp;#34;, &amp;#34;key&amp;#34;: &amp;#34;/path/to/cert-private-key&amp;#34;, &amp;#34;cacert&amp;#34;: &amp;#34;/path/to/CA-cert&amp;#34; }  }, .</description>
    </item>
    
    <item>
      <title>The Circuit Breaker</title>
      <link>https://www.krakend.io/docs/backends/circuit-breaker/</link>
      <pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/backends/circuit-breaker/</guid>
      <description>To keep KrakenD responsive and resilient, we added a Circuit Breaker middleware on several points of the processing pipe. Thanks to this component, when KrakenD demands more throughput than your actual API stack is able to deliver properly, the Circuit Breaker mechanism will detect the failures and prevent stressing your servers by not sending requests that are likely to fail. It is also useful for dealing with network and other communication problems by preventing too many requests to fail due to timeouts, etc.</description>
    </item>
    
    <item>
      <title>Installing KrakenD</title>
      <link>https://www.krakend.io/docs/overview/installing/</link>
      <pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/overview/installing/</guid>
      <description>KrakenD is a single binary file that does not require any external libraries to work. To install KrakenD choose your operative system in the downloads section or use the Docker image.
 Download KrakenD and  Generate the configuration file
Just exploring?
Use the KrakenD Playground if you want to play with KrakenD without configuring it. The Playground comes with several flavors of KrakenD and a mock API. Everything is ready to start playing, just do a docker-compose up!</description>
    </item>
    
    <item>
      <title>Tracing</title>
      <link>https://www.krakend.io/docs/logging-metrics-tracing/tracing/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/logging-metrics-tracing/tracing/</guid>
      <description>Moving from a single monolithic application to a distributed microservices architecture presents a new type of challenges. Observability and networking are key to succeed in this new scenario, and new monitoring tools are needed. These tools must provide at least options to detect problems&amp;rsquo; root causes, monitoring and details of the different distributed transactions, and performance and latency optimization.
The Opencensus exporters allow you to send traces to several of these open source and privative tools, so you can follow the activity of the Gateway and the derived requests to the backends.</description>
    </item>
    
    <item>
      <title>JWT Signing</title>
      <link>https://www.krakend.io/docs/authorization/jwt-signing/</link>
      <pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/authorization/jwt-signing/</guid>
      <description>The JWT signing component creates a wrapper for your login endpoint that signs with your secret key the selected fields of the backend payload right before returning the content to the end-user.
The primary usage for this component is in migrations from monolith to microservices, or in ecosystems where there is no Identity server yet, as it allows the immediate adoption of signed JSON Web Tokens without the need to implement a new service.</description>
    </item>
    
    <item>
      <title>Parameter forwarding</title>
      <link>https://www.krakend.io/docs/endpoints/parameter-forwarding/</link>
      <pubDate>Fri, 20 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/endpoints/parameter-forwarding/</guid>
      <description>KrakenD is an API Gateway, and when it comes to forward query strings, cookies, and headers, it does not behave like a regular proxy by forwarding parameters to the backend.
The default policy for data forwarding works as follows:
 No query string parameters are forwarded to the backend No headers are forwarded No cookies are forwarded  You can change this behavior according to your needs, and define which elements are allowed to pass.</description>
    </item>
    
    <item>
      <title>Using KrakenD</title>
      <link>https://www.krakend.io/docs/overview/usage/</link>
      <pubDate>Tue, 25 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/overview/usage/</guid>
      <description>From an operations point of view KrakenD, is very simple to use. It only requires you to pass the path the configuration file (which defines behaviors and endpoints). Additionally, you can enable the debug with the -d flag, and that&amp;rsquo;s pretty much everything.
TL;DR  Generate a configuration file with your endpoints definition. The easier way to generate it is using the designer Check the syntax of your krakend.json is good Syntax checking&amp;nbsp;   krakend&amp;nbsp;check&amp;nbsp;--config&amp;nbsp;krakend.</description>
    </item>
    
    <item>
      <title>Concurrent Requests</title>
      <link>https://www.krakend.io/docs/endpoints/concurrent-requests/</link>
      <pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/endpoints/concurrent-requests/</guid>
      <description>The concurrent requests are an excellent technique to improve the response times and decrease error rates by requesting in parallel the same information multiple times. When the first backend returns the information, the remaining threads are canceled.
It depends a lot on your configuration, but improving response times by a 75% or more with the same application you are using today is not something rare.
When using concurrent requests, the backend services must be able to handle an additional load.</description>
    </item>
    
    <item>
      <title>Service Discovery with Eureka</title>
      <link>https://www.krakend.io/docs/service-discovery/eureka/</link>
      <pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/service-discovery/eureka/</guid>
      <description>Users of the Netflix&amp;rsquo;s service Eureka have a couple of user contributed integrations available listed in our krakend-contrib repository.
The integrations are not bundled with KrakenD-CE releases but they can be added to the project and make a custom build without difficulties.
 schibsted/krakend-eureka: The Eureka client Schibsted has been running in production since 2017. joaoqalves/krakend-eureka: A Eureka client contributed by João Alves  </description>
    </item>
    
    <item>
      <title>KrakenD file supported formats</title>
      <link>https://www.krakend.io/docs/configuration/supported-formats/</link>
      <pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/configuration/supported-formats/</guid>
      <description>The expected configuration file format by default is json, but KrakenD can parse different formats if one of the following extensions is found:
 .json .toml .yaml .yml .properties .props .prop .hcl  Nevertheless, our recommendation is to choose JSON.
Validate the syntax (not the logic) with krakend check
Why choosing json? You are free to choose YAML, TOML or any of the other formats at your best convenience. But have in mind the following logic when choosing a file format other than json.</description>
    </item>
    
    <item>
      <title>The `/__debug` endpoint</title>
      <link>https://www.krakend.io/docs/endpoints/debug-endpoint/</link>
      <pubDate>Tue, 27 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/endpoints/debug-endpoint/</guid>
      <description>The /__debug endpoint is available when you start the server with the -d flag.
The endpoint can be used as a fake backend and is very useful to see the interaction between the gateway and the backends as its activity is printed in the log using the DEBUG log level .
When developing, add KrakenD itself as another backend using the /__debug/ endpoint so you can see exactly what headers and query string parameters your backends are receiving.</description>
    </item>
    
    <item>
      <title>Graylog and the GELF format</title>
      <link>https://www.krakend.io/docs/logging-metrics-tracing/graylog-gelf/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/logging-metrics-tracing/graylog-gelf/</guid>
      <description>KrakenD supports sending structured events in GELF format to your Graylog Cluster thanks to the krakend-gelf integration.
The setup of GELF is straightforward and requires only to set two parameters:
 address: The address (including the port) of your Graylog cluster (or any other service that receives GELF inputs). enable_tcp: Set to false (recommended) to use UDP. When using TCP performance might be affected.  Enabling GELF Add the krakend-gelf integration in the root level of your krakend.</description>
    </item>
    
    <item>
      <title>Revoking valid tokens with a Bloom filter</title>
      <link>https://www.krakend.io/docs/authorization/revoking-tokens/</link>
      <pubDate>Mon, 05 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/authorization/revoking-tokens/</guid>
      <description>The API Gateway authorizes users that provide valid tokens according to your criteria, but at some point, you might want to change your mind and decide to revoke JWT tokens that are still valid.
When are you going to need this? Examples of situations where you might need to revoke perfectly legit tokens: As a user, I want to log me out of all my devices. As an administrator, I want to kick out someone from the platform.</description>
    </item>
    
    <item>
      <title>Timeouts</title>
      <link>https://www.krakend.io/docs/throttling/timeouts/</link>
      <pubDate>Thu, 04 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/throttling/timeouts/</guid>
      <description>Being KrakenD an API Gateway that talks to other services, being able to control the waiting times for different aspects is crucial. KrakenD will allow you to fine-tune these settings.
The timeouts can apply to:
 The duration of the whole pipe (from user request to user response) The HTTP request related timeouts  Additionally, you can control the number of maximum IDLE connections.
Pipe timeouts Global timeout The timeout key in the krakend.</description>
    </item>
    
    <item>
      <title>Security</title>
      <link>https://www.krakend.io/docs/endpoints/security/</link>
      <pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/endpoints/security/</guid>
      <description>KrakenD has implemented several security strategies, controlled via krakend-httpsecure. To enable them you only need to add the extra_config at endpoint level or service (root) level, depending on the item.
The following example describes the options explained later in this article:
&amp;quot;extra_config&amp;quot;: { &amp;quot;github_com/devopsfaith/krakend-httpsecure&amp;quot;: { &amp;quot;allowed_hosts&amp;quot;: [ &amp;quot;host.known.com:443&amp;quot; ], &amp;quot;ssl_proxy_headers&amp;quot;: { &amp;quot;X-Forwarded-Proto&amp;quot;: &amp;quot;https&amp;quot; }, &amp;quot;ssl_redirect&amp;quot;: true, &amp;quot;ssl_host&amp;quot;: &amp;quot;ssl.host.domain&amp;quot;, &amp;quot;ssl_port&amp;quot;: &amp;quot;443&amp;quot;, &amp;quot;ssl_certificate&amp;quot;: &amp;quot;/path/to/cert&amp;quot;, &amp;quot;ssl_private_key&amp;quot;: &amp;quot;/path/to/key&amp;quot;, &amp;quot;sts_seconds&amp;quot;: 300, &amp;quot;sts_include_subdomains&amp;quot;: true, &amp;quot;frame_deny&amp;quot;: true, &amp;quot;custom_frame_options_value&amp;quot;: &amp;quot;ALLOW-FROM https://example.</description>
    </item>
    
    <item>
      <title>Supported backend encodings</title>
      <link>https://www.krakend.io/docs/backends/supported-encodings/</link>
      <pubDate>Thu, 14 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/backends/supported-encodings/</guid>
      <description>KrakenD can parse responses from mixed backends that are using several content types or encodings, such as:
 JSON XML RSS Treat as string  Additionally the special case No-op (proxy) is available but cannot be used to merge content.
Each backend declaration can set a different encoder to process the responses, and still, KrakenD can transparently work with the mixed content returning a unified encoding in the endpoint.
The following example demonstrates how an endpoint /abc is feeding on three different services and urls /a, /b, and /c and aggregates their responses:</description>
    </item>
    
    <item>
      <title>Logstash</title>
      <link>https://www.krakend.io/docs/logging-metrics-tracing/logstash/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/logging-metrics-tracing/logstash/</guid>
      <description>If you want to log using the Logstash standard via stdout, you have to add the krakend-logstash integration in the root level of your krakend.json, inside the extra_config section. The gologging needs to be enabled too.
For instance:
&amp;quot;extra_config&amp;quot;: { &amp;quot;github_com/devopsfaith/krakend-logstash&amp;quot;: { &amp;quot;enabled&amp;quot;: true } &amp;quot;github_com/devopsfaith/krakend-gologging&amp;quot;: { &amp;quot;level&amp;quot;: &amp;quot;INFO&amp;quot;, &amp;quot;prefix&amp;quot;: &amp;quot;[KRAKEND]&amp;quot;, &amp;quot;syslog&amp;quot;: false, &amp;quot;stdout&amp;quot;: true, &amp;quot;format&amp;quot;: &amp;quot;logstash&amp;quot; } }  </description>
    </item>
    
    <item>
      <title>OAuth 2.0 Client Credentials</title>
      <link>https://www.krakend.io/docs/authorization/client-credentials/</link>
      <pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/authorization/client-credentials/</guid>
      <description>Through the OAuth 2.0 Client Credentials Grant KrakenD can request to your authorization server an access token to reach protected resources.
The client credentials authorize KrakenD, as the client, to access the protected resources. Do not confuse this with authorizing an end-user (see JWT instead).
Successfully setting the client credentials for a backend means that KrakenD can get the protected content, but the endpoint offered to the end-user is going to be public unless you protect it with JWT.</description>
    </item>
    
    <item>
      <title>Caching backend responses</title>
      <link>https://www.krakend.io/docs/backends/caching/</link>
      <pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/backends/caching/</guid>
      <description>Sometimes you might want to reuse a previous response of a backend instead of asking for the same information over the network again. In this cases, it is possible to enable in-memory caching for the desired backend responses.
This caching technique applies to traffic between KrakenD and your microservices endpoints only and is not a caching system for the end-user endpoints. To enable the cache, you only need to add in the configuration file the httpcache middleware.</description>
    </item>
    
    <item>
      <title>Response content types</title>
      <link>https://www.krakend.io/docs/endpoints/content-types/</link>
      <pubDate>Thu, 14 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/endpoints/content-types/</guid>
      <description>KrakenD supports sending responses back to the client using content types other than JSON. The list of supported content types depends on the router package used.
Supported encodings The gateway can work with several content types, even allowing your clients to choose how to consume the content. The following output_encoding strategies are available to choose for every an endpoint:
 json: The endpoint always return a response in JSON format to the client.</description>
    </item>
    
    <item>
      <title>Exporting logs, metrics, and traces to several providers</title>
      <link>https://www.krakend.io/docs/logging-metrics-tracing/opencensus/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/logging-metrics-tracing/opencensus/</guid>
      <description>The Opencensus exporter is a single component that allows you to export data to multiple providers, both open source and privative.
You will be interested in Opencensus when you want to see data in one of its supported exporters. For instance, you might want to send metrics to Prometheus. That would be as easy as adding this snippet in the root level of your krakend.json file:
&amp;quot;extra_config&amp;quot;: { &amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;prometheus&amp;quot;: { &amp;quot;port&amp;quot;: 9091 &amp;quot;namespace&amp;quot;: &amp;quot;krakend&amp;quot; } } } }  Configuration The Opencensus only needs an exporter to work, although multiple exporters can be added in the same configuration.</description>
    </item>
    
    <item>
      <title>Proxying directly to the backends with `no-op`</title>
      <link>https://www.krakend.io/docs/endpoints/no-op/</link>
      <pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/endpoints/no-op/</guid>
      <description>KrakenD no-op (no-operation), is a special type of encoding that behaves as a proxy by passing the client&amp;rsquo;s request to the backend as is, and vice-versa.
Using no-op to proxy requests When setting no-op, KrakenD does not inspect the request body or manipulates it in any way. Instead, when a request to a no-op endpoint is received, KrakenD directly forwards it to the backend without doing any operation with it.</description>
    </item>
    
    <item>
      <title>Sequential Proxy</title>
      <link>https://www.krakend.io/docs/endpoints/sequential-proxy/</link>
      <pubDate>Sun, 11 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/endpoints/sequential-proxy/</guid>
      <description>The best experience consumers can have with KrakenD API is by letting the system fetch all the data from the different backends concurrently at the same time. However, there are times when you need to delay a backend call until you can inject as input the result of a previous call.
The sequential proxy allows you to chain backend requests.
Chaining the requests All you need to enable the sequential proxy is add in the endpoint definition the following configuration:</description>
    </item>
    
    <item>
      <title>Traffic shadowing or mirroring</title>
      <link>https://www.krakend.io/docs/backends/shadow-backends/</link>
      <pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/backends/shadow-backends/</guid>
      <description>There are times when you have been working in a new version of your microservice, a complete refactor, a dangerous change, or any other valuable change that needs being careful, and it&amp;rsquo;s too risky to put it live as there might be issues that impact your end users.
The traffic shadowing or traffic mirroring functionality allows you to test new backends in production by sending them copies of the traffic but ignore their responses.</description>
    </item>
    
    <item>
      <title>Maximum IDLE connections</title>
      <link>https://www.krakend.io/docs/throttling/max-idle-connections/</link>
      <pubDate>Thu, 04 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/throttling/max-idle-connections/</guid>
      <description>Having a high number of IDLE connections to every backend affects directly to the performance of the proxy layer. This is why you can control the number using the max_idle_connections setting. For instance:
{ &amp;quot;version&amp;quot;: 2, &amp;quot;max_idle_connections&amp;quot;: 150, ... }  KrakenD will close connections sitting idle in a &amp;ldquo;keep-alive&amp;rdquo; state when max_idle_connections is reached. If no value is set in the configuration file, KrakenD will use 250 by default.</description>
    </item>
    
    <item>
      <title>Exporting metrics to Prometheus</title>
      <link>https://www.krakend.io/docs/logging-metrics-tracing/prometheus/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/logging-metrics-tracing/prometheus/</guid>
      <description>Prometheus is an open-source systems monitoring and alerting toolkit.
The Opencensus exporter allows you push data to Prometheus. Enabling it only requires you to include in the root level of your configuration the Opencensus middleware with the prometheus exporter. Specify the port on which Prometheus is running, the namespace (optional), and Prometheus will start receiving the data.
&amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;prometheus&amp;quot;: { &amp;quot;port&amp;quot;: 9091, &amp;quot;namespace&amp;quot;: &amp;quot;krakend&amp;quot; } } }   port on which Prometheus is listening namespace sets the domain the metric belongs to.</description>
    </item>
    
    <item>
      <title>Array manipulation - flatmap</title>
      <link>https://www.krakend.io/docs/backends/flatmap/</link>
      <pubDate>Fri, 05 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/backends/flatmap/</guid>
      <description>The flatmap middleware allows you to manipulate arrays by flattening and expanding array structures to objects and vice versa. The process is automatically done by the flatmap component, letting you to concentrate on the type of operation you want to execute.
Flatmap configuration The flatmap component is part of the krakend proxy operation, so it needs to be included as an extra_config inside the backend configuration. The namespace is github.com/devopsfaith/krakend/proxy.</description>
    </item>
    
    <item>
      <title>Static Proxy - Adding static/stub data</title>
      <link>https://www.krakend.io/docs/endpoints/static-proxy/</link>
      <pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/endpoints/static-proxy/</guid>
      <description>The static proxy is an aid to clients dealing with incomplete and other types of degraded responses. When enabled, the static proxy injects static data in the final response when the behavior of a backend falls in the selected strategy.
A typical scenario is when some backend fails and the endpoint becomes incomplete, but you prefer to provide a stub response for that part instead. When your application cannot handle well the degraded response, the static data comes handy.</description>
    </item>
    
    <item>
      <title>Exporting metrics and events to InfluxDB</title>
      <link>https://www.krakend.io/docs/logging-metrics-tracing/influxdb/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/logging-metrics-tracing/influxdb/</guid>
      <description>InfluxDB is a time series database designed to handle high write and query loads.
The Opencensus exporter allows you export data to InfluxDB for monitoring metrics and events. Enabling it only requires you to add the influxdb exporter in the opencensus module.
The following configuration snippet sends data to your InfluxDB:
&amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;influxdb&amp;quot;: { &amp;quot;address&amp;quot;: &amp;quot;http://192.168.99.100:8086&amp;quot;, &amp;quot;db&amp;quot;: &amp;quot;krakend&amp;quot;, &amp;quot;timeout&amp;quot;: &amp;quot;1s&amp;quot; }, } }   address is the URL (including port) where your InfluxDB is installed db is the database name timeout is the maximum time you wait for Influx to respond  See also the additional settings of the Opencensus module that can be declared.</description>
    </item>
    
    <item>
      <title>Checking requests and responses with the Common Expression Language (CEL)</title>
      <link>https://www.krakend.io/docs/endpoints/common-expression-language-cel/</link>
      <pubDate>Thu, 24 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/endpoints/common-expression-language-cel/</guid>
      <description>There are times when you might want to include additional logic in the gateway to decide if a request has to be fulfilled or not.
The Common Expression Language (CEL) middleware enables Google&amp;rsquo;s CEL spec which implements common semantics for expression evaluation, and is a very simple and powerful option to have full control during requests and responses.
When the CEL component is enabled, any amount of expressions to check both requests and responses can be set.</description>
    </item>
    
    <item>
      <title>Modify requests and responses with Martian</title>
      <link>https://www.krakend.io/docs/backends/martian/</link>
      <pubDate>Thu, 24 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/backends/martian/</guid>
      <description>The krakend-martian component allows you to transform requests and responses through a simple DSL definition in the configuration file. Martian works perfectly in combination with CEL verifications.
Use Martian when you want to intercept the request of the end-user and make modifications before passing the content to the backends. Also, the other way around, transform the backends response before passing it to the user.
Martian is mighty and gives you endless possibilities to control what is going in and out the gateway.</description>
    </item>
    
    <item>
      <title>Transformations using Lua scripting</title>
      <link>https://www.krakend.io/docs/endpoints/lua/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/endpoints/lua/</guid>
      <description>Scripting with Lua is an additional choice to extend your business logic, and is compatible with the rest of options such as CEL, Martian, or other Go plugins and middlewares.
If you are more familiar with Lua than Go, this module can help you solve exceptional cases that need solution using a little bit of scripting. The introduction of Lua scripts in your Gateway does not require to recompile KrakenD, but unlike Go, Lua scripts are interpreted in real-time.</description>
    </item>
    
    <item>
      <title>Exporting traces to Zipkin</title>
      <link>https://www.krakend.io/docs/logging-metrics-tracing/zipkin/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/logging-metrics-tracing/zipkin/</guid>
      <description>Zipkin is a distributed tracing system. It helps gather timing data needed to troubleshoot latency problems in service architectures.
The Opencensus exporter allows you export data to Zipkin. Enabling it only requires you to add the zipkin exporter in the opencensus module.
The following configuration snippet sends data to your Zipkin:
&amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;zipkin&amp;quot;: { &amp;quot;collector_url&amp;quot;: &amp;quot;http://192.168.99.100:9411/api/v2/spans&amp;quot;, &amp;quot;service_name&amp;quot;: &amp;quot;krakend&amp;quot; }, } }   collector_url is the URL (including port and path) where your Zipkin is accepting the spans service_name the service name registered in Zipkin  See also the additional settings of the Opencensus module that can be declared.</description>
    </item>
    
    <item>
      <title>API Gateway integration with AMQP messaging</title>
      <link>https://www.krakend.io/docs/backends/amqp/</link>
      <pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/backends/amqp/</guid>
      <description>The AMQP component allows to send and receive messages to and from a queue through the API Gateway.
The configuration of the queue is a straightforward process. To connect the endpoints to the messaging system you only need to include the extra_config key with the namespaces github.com/devopsfaith/krakend-amqp/consume or github.com/devopsfaith/krakend-amqp/produce.
The parameters of this integration follow the AMQP specification. To understand what are the implications of a certain parameter, see the AMQP Complete Reference Guide.</description>
    </item>
    
    <item>
      <title>Exporting traces to Jaeger</title>
      <link>https://www.krakend.io/docs/logging-metrics-tracing/jaeger/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/logging-metrics-tracing/jaeger/</guid>
      <description>Jaeger is an open source, end-to-end distributed tracing system that allows you to monitor and troubleshoot transactions in complex distributed systems.
The Opencensus exporter allows you export data to Jaeger. Enabling it only requires you to add the jaeger exporter in the opencensus module.
The following configuration snippet sends data to your Jaeger:
&amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;jaeger&amp;quot;: { &amp;quot;endpoint&amp;quot;: &amp;quot;http://192.168.99.100:14268&amp;quot;, &amp;quot;serviceName&amp;quot;:&amp;quot;krakend&amp;quot; }, } }   endpoint is the URL (including port) where your Jaeger is serviceName the service name registered in Jaeger  See also the additional settings of the Opencensus module that can be declared.</description>
    </item>
    
    <item>
      <title>Using publisher/subscribe as backends</title>
      <link>https://www.krakend.io/docs/backends/pubsub/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/backends/pubsub/</guid>
      <description>Since KrakenD 1.0 you can connect an endpoint to multiple publish/subscribe backends, helping you integrate with event driven architectures. For instance, a frontend client can push events to a queue using a REST interface. Or a client could consume a REST endpoint that is plugged to the last events pushed in a backend. You can even validate messages and formats as all the KrakenD available middleware can be used. The list of supported backend technologies is:</description>
    </item>
    
    <item>
      <title>KrakenD vs. KrakenD-CE</title>
      <link>https://www.krakend.io/docs/overview/krakend-vs-krakend-ce/</link>
      <pubDate>Sat, 23 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/overview/krakend-vs-krakend-ce/</guid>
      <description>If you had a quick look at our git repositories, you might be confused at first, as we have a repository named krakend and another one named krakend-ce.
Difference between KrakenD, KrakenD-CE, and Enterprise TL;DR;
 KrakenD is a framework KrakenD-CE is our open-source API Gateway ready to use KrakenD Enterprise are our professional software and services to businesses  KrakenD framework KrakenD (repo) is an open-source project created by @devopsfaith to accelerate the creation of custom API Gateways.</description>
    </item>
    
    <item>
      <title>Adding a health endpoint</title>
      <link>https://www.krakend.io/docs/endpoints/health/</link>
      <pubDate>Mon, 07 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/endpoints/health/</guid>
      <description>If you place a balancer in front of KrakenD, such as an ELB, you can check KrakenD health using a TCP port check. If, on the other hand, you need to have an HTTP endpoint like /health or /ping in systems like Kubernetes, you can do it in different ways.
Although there is no default health check implementation, the result can be achieved using different strategies. For instance:
 Add a /health endpoint in the configuration with stub data (see example below) Enable the /__debug/ endpoint with your desired log level and use it as the health check.</description>
    </item>
    
    <item>
      <title>Exporting traces to AWS X-Ray</title>
      <link>https://www.krakend.io/docs/logging-metrics-tracing/xray/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/logging-metrics-tracing/xray/</guid>
      <description>AWS X-Ray is a service offered by Amazon that provides an end-to-end view of requests as they travel through your application, and shows a map of your application’s underlying components.
The Opencensus exporter allows you export data to AWS X-Ray. Enabling it only requires you to add the xray exporter in the opencensus module.
The following configuration snippet sends data to your X-Ray:
&amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;xray&amp;quot;: { &amp;quot;version&amp;quot;: &amp;quot;latest&amp;quot;, &amp;quot;region&amp;quot;: &amp;quot;eu-west-1&amp;quot;, &amp;quot;use_env&amp;quot;: false, &amp;quot;access_key_id&amp;quot;: &amp;quot;myaccesskey&amp;quot;, &amp;quot;secret_access_key&amp;quot;: &amp;quot;mysecretkey&amp;quot; }, } }   version: The version of the AWS X-Ray service to use.</description>
    </item>
    
    <item>
      <title>Integration with AWS Lambda functions</title>
      <link>https://www.krakend.io/docs/backends/lambda/</link>
      <pubDate>Sun, 11 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/backends/lambda/</guid>
      <description>The Lambda integration allows you to invoke Amazon Lambda functions on a KrakenD endpoint call. The content returned by the lambda function can be treated and manipulated as any other backend.
The payload that is sent to the Lambda function comes from the request and depends on the method used by the endpoint:
 Method GET: The payload contains all the parameters of the request. Non-GET methods: The payload is defined by the content of the body in the request.</description>
    </item>
    
    <item>
      <title>The KrakenD Playground</title>
      <link>https://www.krakend.io/docs/overview/playground/</link>
      <pubDate>Thu, 13 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/overview/playground/</guid>
      <description>If you are new to KrakenD, a quick way to get started is to make use of the KrakenD Playground.
The KrakenD Playground is a Docker Compose environment that puts together the necessary pieces to let you play with KrakenD in a working environment.
As KrakenD is an API gateway, we have also added to the environment an API (backend) to feed the gateway and a website to make use of the data.</description>
    </item>
    
    <item>
      <title>Exporting metrics, logs and events to Google Stackdriver</title>
      <link>https://www.krakend.io/docs/logging-metrics-tracing/stackdriver/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/logging-metrics-tracing/stackdriver/</guid>
      <description>Google Stackdriver aggregates metrics, logs, and events from infrastructure, giving developers and operators a rich set of observable signals that speed root-cause analysis and reduce mean time to resolution (MTTR).
The Opencensus exporter allows you export data to Google Stackdriver. Enabling it only requires you to add the stackdriver exporter in the opencensus module.
The following configuration snippet sends data to your X-Ray:
&amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;stackdriver&amp;quot;: { &amp;quot;project_id&amp;quot;: &amp;quot;my-krakend-project&amp;quot;, &amp;quot;metrics_prefix&amp;quot;: &amp;quot;krakend&amp;quot;, &amp;quot;default_labels&amp;quot;: { &amp;quot;env&amp;quot;: &amp;quot;production&amp;quot; } } } }   project_id: The identifier of your Google Cloud project.</description>
    </item>
    
    <item>
      <title>Returning the details of backend errors</title>
      <link>https://www.krakend.io/docs/backends/detailed-errors/</link>
      <pubDate>Wed, 02 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/backends/detailed-errors/</guid>
      <description>When you are willing to manipulate or aggregate data, KrakenD&amp;rsquo;s policy regarding errors and status codes is to hide from the client any backend details. The philosophy behind this is that clients have to be decoupled from its underlying services.
If in the other hand, your endpoint connects to a single backend with no manipulation, use the no-op encoding which returns the response to the client as is, preserving its form: body, headers, status codes and such.</description>
    </item>
    
    <item>
      <title>Exporting to the logger</title>
      <link>https://www.krakend.io/docs/logging-metrics-tracing/logger/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/logging-metrics-tracing/logger/</guid>
      <description>Opencensus can export data to the system logger as another exporter.
Enabling it only requires you to add the logger exporter in the opencensus module.
The following configuration snippet enables the logger:
&amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;logger&amp;quot;: { &amp;quot;stats&amp;quot;: true, &amp;quot;spans&amp;quot;: true } } }   stats: Whether to log the statistics or not spans: Wether to log the spans or not  See also the additional settings of the Opencensus module that can be declared.</description>
    </item>
    
    <item>
      <title>Frequently Asked Questions</title>
      <link>https://www.krakend.io/docs/faq/</link>
      <pubDate>Wed, 26 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/faq/</guid>
      <description>I am getting a 200 status when the backend returns a 201 E.g:
2017/01/19 - 10:31:27 | 200 | 1.134431ms | ::1 | POST /users  Explanation By default, the gateway will always send an HTTP status 200 if the backend returns a 200 or a 201. You can inject your own HTTPStatusHandler implementation if you need a different behavior. Check this issue comment for more details.
I am getting a 500 status when the backend returns anything but 200, 201 or redirects E.</description>
    </item>
    
    <item>
      <title>Verifying packages (PGP and SHA256)</title>
      <link>https://www.krakend.io/docs/overview/verifying-packages/</link>
      <pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/overview/verifying-packages/</guid>
      <description>How to make sure what you are downloading is legit.
PGP We will check the detached signature PGP against our package KrakenD.
$ gpg --verify krakend_1.1.1_amd64.tar.gz.asc krakend_1.1.1_amd64.tar.gz gpg: Signature made Sun Mar 10 18:17:18 2019 UTC using RSA key ID 5DE6FD698AD6FDD2 gpg: Can&#39;t check signature: public key not found  We don&amp;rsquo;t have the packager public key (AB39BEA1) in our system. You need to retrieve the public key from a key server.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.krakend.io/docs/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/readme/</guid>
      <description>KrakenD Documentation All the documentation uses Markdown syntax and the site is generated using Hugo. After your contribution this repository will be used to compile all the documentation.
If you want to use a server to browse this pages, although not necessary, you can copy the folder inside the content directory in any Hugo installation.
Contribute! Feel free to fork this repository and contribute to a better KrakenD documentation.
If you&amp;rsquo;d like to add a new language please open an issue before doing the work as we will need to add the support before it is visible.</description>
    </item>
    
  </channel>
</rss>