<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs on KrakenD - Open source API Gateway</title><link>https://www.krakend.io/docs/</link><description>Recent content in Docs on KrakenD - Open source API Gateway</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 28 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.krakend.io/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction to KrakenD Enterprise</title><link>https://www.krakend.io/docs/enterprise/overview/introduction/</link><pubDate>Sun, 06 Jun 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/overview/introduction/</guid><description>KrakenD Enterprise is a high-performance API Gateway built on top of our open-source API Gateway but adding extended Enterprise functionality. As it happens with the Community Edition, the KrakenD Enterprise engine is also fueled by the Lura Project (a framework we have hosted at The Linux Foundation with the help of the community).
KrakenD Enterprise is unique because of its stateless design and extreme simplicity:
Declarative configuration with GitOps practices.</description></item><item><title>Introduction to KrakenD</title><link>https://www.krakend.io/docs/overview/introduction/</link><pubDate>Tue, 25 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/overview/introduction/</guid><description>KrakenD is an extensible, declarative, high-performance open-source API Gateway.
Its core functionality is to create an API that acts as an aggregator of many microservices into single endpoints, doing the heavy-lifting automatically for you: aggregate, transform, filter, decode, throttle, auth, and more.
KrakenD needs no programming as it offers a declarative way to create the endpoints. It is well structured and layered, and open to extending its functionality using plug-and-play middleware developed by the community or in-house.</description></item><item><title>Introduction to KrakenD</title><link>https://www.krakend.io/docs/v1.3/overview/introduction/</link><pubDate>Tue, 25 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/overview/introduction/</guid><description>KrakenD is a high-performance open source API Gateway.
Its core functionality is to create an API that acts as an aggregator of many microservices into single endpoints, doing the heavy-lifting automatically for you: aggregate, transform, filter, decode, throttle, auth and more.
KrakenD needs no programming as it offers a declarative way to create the endpoints. It is well structured and layered and open to extending its functionality using plug-and-play middleware developed by the community or in-house.</description></item><item><title>Introduction to KrakenD</title><link>https://www.krakend.io/docs/v1.4/overview/introduction/</link><pubDate>Tue, 25 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/overview/introduction/</guid><description>KrakenD is a high-performance open source API Gateway.
Its core functionality is to create an API that acts as an aggregator of many microservices into single endpoints, doing the heavy-lifting automatically for you: aggregate, transform, filter, decode, throttle, auth and more.
KrakenD needs no programming as it offers a declarative way to create the endpoints. It is well structured and layered and open to extending its functionality using plug-and-play middleware developed by the community or in-house.</description></item><item><title>Extending KrakenD, the big picture.</title><link>https://www.krakend.io/docs/enterprise/extending/the-big-picture/</link><pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/extending/the-big-picture/</guid><description>Before starting to dive into the KrakenD code, spend a few minutes understanding the big pieces of the system, how it works, and the philosophy behind it.
The KrakenD rules Let&amp;rsquo;s start with the rules followed to code KrakenD (shared with The Lura Project), as they answer to architectural design questions:
Reactive is key Reactive is key (yes, it is very very important) Failing fast is better than succeeding slow (say it one more time!</description></item><item><title>Extending KrakenD, the big picture.</title><link>https://www.krakend.io/docs/v1.3/extending/the-big-picture/</link><pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/extending/the-big-picture/</guid><description>Before starting to dive into the KrakenD code, spend a few minutes understanding the big pieces of the system, how it works, and the philosophy behind it.
The KrakenD rules Let&amp;rsquo;s start with the rules followed to code KrakenD (shared with The Lura Project), as they answer to architectural design questions:
Reactive is key Reactive is key (yes, it is very very important) Failing fast is better than succeeding slow (say it one more time!</description></item><item><title>Extending KrakenD, the big picture.</title><link>https://www.krakend.io/docs/v1.4/extending/the-big-picture/</link><pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/extending/the-big-picture/</guid><description>Before starting to dive into the KrakenD code, spend a few minutes understanding the big pieces of the system, how it works, and the philosophy behind it.
The KrakenD rules Let&amp;rsquo;s start with the rules followed to code KrakenD (shared with The Lura Project), as they answer to architectural design questions:
Reactive is key Reactive is key (yes, it is very very important) Failing fast is better than succeeding slow (say it one more time!</description></item><item><title>Backends Overview</title><link>https://www.krakend.io/docs/backends/overview/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/backends/overview/</guid><description>The concept of backend refers to the origin servers providing the necessary data to populate your endpoints. A backend can be something like your HTTP-based API, a Lambda function, or a Kafka queue, to name a few examples.
A backend can be any server inside or outside your network, as long it is reachable by KrakenD. For instance, you can create endpoints fetching data from your internal servers and enrich them by adding third-party data from an external API like Github, Facebook, or other services.</description></item><item><title>Backends Overview</title><link>https://www.krakend.io/docs/enterprise/backends/overview/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/backends/overview/</guid><description>The concept of backend refers to the origin servers providing the necessary data to populate your endpoints. A backend can be something like your HTTP-based API, a Lambda function, or a Kafka queue, to name a few examples.
A backend can be any server inside or outside your network, as long it is reachable by KrakenD. For instance, you can create endpoints fetching data from your internal servers and enrich them by adding third-party data from an external API like Github, Facebook, or any other service, and return back everything aggregated in a single glorified response.</description></item><item><title>Backends Overview</title><link>https://www.krakend.io/docs/v1.3/backends/overview/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/backends/overview/</guid><description>The concept of backend refers to the origin servers providing the necessary data to populate your endpoints. A backend can be something like your HTTP-based API, a Lambda function, or a Kafka queue, to name a few examples.
A backend can be any server inside or outside your network, as long it is reachable by KrakenD. For instance, you can create endpoints fetching data from your internal servers and enrich them by adding third-party data from an external API like Github, Facebook, or any other service, and return back everything aggregated in a single glorified response.</description></item><item><title>Backends Overview</title><link>https://www.krakend.io/docs/v1.4/backends/overview/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/backends/overview/</guid><description>The concept of backend refers to the origin servers providing the necessary data to populate your endpoints. A backend can be something like your HTTP-based API, a Lambda function, or a Kafka queue, to name a few examples.
A backend can be any server inside or outside your network, as long it is reachable by KrakenD. For instance, you can create endpoints fetching data from your internal servers and enrich them by adding third-party data from an external API like Github, Facebook, or any other service, and return back everything aggregated in a single glorified response.</description></item><item><title>Service Discovery overview</title><link>https://www.krakend.io/docs/enterprise/service-discovery/overview/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/service-discovery/overview/</guid><description>Service discovery enables clients to detect and locate services on your enterprise network automatically. Instead of defining a static list of IPs or hostnames pointing to your backends, you can use a service discovery provider and let KrakenD interact with it to get the hosts dynamically.
Static resolution The static resolution is the default service discovery choice. It uses a list of hosts declared in the configuration file and KrakenD must be able to reach them directly by hostname, DNS or IP.</description></item><item><title>Service Discovery overview</title><link>https://www.krakend.io/docs/v1.3/service-discovery/overview/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/service-discovery/overview/</guid><description>Service discovery enables clients to detect and locate services on your enterprise network automatically. Instead of defining a static list of IPs or hostnames pointing to your backends, you can use a service discovery provider and let KrakenD interact with it to get the hosts dynamically.
Static resolution The static resolution is the default service discovery choice. It uses a list of hosts declared in the configuration file and KrakenD must be able to reach them directly by hostname, DNS or IP.</description></item><item><title>Service Discovery overview</title><link>https://www.krakend.io/docs/v1.4/service-discovery/overview/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/service-discovery/overview/</guid><description>Service discovery enables clients to detect and locate services on your enterprise network automatically. Instead of defining a static list of IPs or hostnames pointing to your backends, you can use a service discovery provider and let KrakenD interact with it to get the hosts dynamically.
Static resolution The static resolution is the default service discovery choice. It uses a list of hosts declared in the configuration file and KrakenD must be able to reach them directly by hostname, DNS or IP.</description></item><item><title>KrakenD's configuration file(s)</title><link>https://www.krakend.io/docs/configuration/overview/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/configuration/overview/</guid><description>All the configuration that the KrakenD server needs to start and operate is a single configuration file. This file is referred to as krakend.json through all the documentation.
The name krakend.json is just an alias, a convention, that we use everywhere. Your real configuration file can have any name, be stored anywhere, or split in many pieces.
Provided this simple configuration mechanism, the versioning and automation are very convenient. Any change in the API Gateway is always under the version control system, and the code controls the state of the gateway.</description></item><item><title>KrakenD's configuration file(s)</title><link>https://www.krakend.io/docs/enterprise/configuration/overview/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/configuration/overview/</guid><description>All the configuration that the KrakenD server needs to start and operate is a single configuration file. This file is referred to as krakend.json through all the documentation.
The name krakend.json is just an alias, a convention, that we use everywhere. Your real configuration file can have any name, be stored anywhere, or split in many pieces.
Provided this simple configuration mechanism, the versioning and automation are very convenient. Any change in the API Gateway is always under the version control system, and the code controls the state of the gateway.</description></item><item><title>KrakenD's configuration file(s)</title><link>https://www.krakend.io/docs/v1.3/configuration/overview/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/configuration/overview/</guid><description>All the configuration that the KrakenD server needs to start and operate is a single configuration file. This file is referred to as krakend.json through all the documentation.
The name krakend.json is just an alias, a convention, that we use everywhere. Your real configuration file can have any name, be stored anywhere, or split in many pieces.
Provided this simple configuration mechanism, the versioning and automation are very convenient. Any change in the API Gateway is always under the version control system, and the code controls the state of the gateway.</description></item><item><title>KrakenD's configuration file(s)</title><link>https://www.krakend.io/docs/v1.4/configuration/overview/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/configuration/overview/</guid><description>All the configuration that the KrakenD server needs to start and operate is a single configuration file. This file is referred to as krakend.json through all the documentation.
The name krakend.json is just an alias, a convention, that we use everywhere. Your real configuration file can have any name, be stored anywhere, or split in many pieces.
Provided this simple configuration mechanism, the versioning and automation are very convenient. Any change in the API Gateway is always under the version control system, and the code controls the state of the gateway.</description></item><item><title>Introduction to custom plugins and middlewares</title><link>https://www.krakend.io/docs/extending/introduction/</link><pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/extending/introduction/</guid><description>Plugins are soft-linked libraries, thus a separated .so file, that when running in conjunction with KrakenD can participate in the processing. When we talk about plugins we refer to Go plugins.
Middlewares are the different repositories and components that when compiled all together they form the final KrakenD binary. If you want to change its behaviour you must recompile KrakenD.
Do I need a plugin? In most of the cases, you don&amp;rsquo;t need a custom plugin.</description></item><item><title>How to create KrakenD endpoints</title><link>https://www.krakend.io/docs/endpoints/creating-endpoints/</link><pubDate>Wed, 26 Feb 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/endpoints/creating-endpoints/</guid><description>KrakenD endpoints are the essential part of KrakenD as they are what your end users consume.
See Understanding the configuration file if you haven&amp;rsquo;t read it yet.
To create an endpoint you only need to add an endpoint object under the endpoints list with the resource you want to expose. If no method is declared, it&amp;rsquo;s assumed to be read-only (GET).
The endpoints section looks like this:
{ &amp;#34;endpoints&amp;#34;: [ { &amp;#34;endpoint&amp;#34;: &amp;#34;/v1/foo&amp;#34;, &amp;#34;method&amp;#34;: &amp;#34;GET&amp;#34;, &amp;#34;backend&amp;#34;: [ { &amp;#34;url_pattern&amp;#34;: &amp;#34;/bar&amp;#34;, &amp;#34;method&amp;#34;: &amp;#34;GET&amp;#34;, &amp;#34;host&amp;#34;: [ &amp;#34;https://api.</description></item><item><title>How to create KrakenD endpoints</title><link>https://www.krakend.io/docs/enterprise/endpoints/creating-endpoints/</link><pubDate>Wed, 26 Feb 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/endpoints/creating-endpoints/</guid><description>KrakenD endpoints are the essential part of KrakenD as they are what your end users consume.
See Understanding the configuration file if you haven&amp;rsquo;t read it yet.
To create an endpoint you only need to add an endpoint object under the endpoints list with the resource you want to expose. If no method is declared, it&amp;rsquo;s assumed to be read-only (GET).
The endpoints section looks like this:
&amp;quot;endpoints&amp;quot;: [ { &amp;quot;endpoint&amp;quot;: &amp;quot;/v1/foo&amp;quot;, &amp;quot;method&amp;quot;: &amp;quot;GET&amp;quot;, &amp;quot;backend&amp;quot;: [ { &amp;quot;url_pattern&amp;quot;: &amp;quot;/bar&amp;quot;, &amp;quot;method&amp;quot;: &amp;quot;GET&amp;quot;, &amp;quot;host&amp;quot;: [ &amp;quot;https://api.</description></item><item><title>How to create KrakenD endpoints</title><link>https://www.krakend.io/docs/v1.3/endpoints/creating-endpoints/</link><pubDate>Wed, 26 Feb 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/endpoints/creating-endpoints/</guid><description>KrakenD endpoints are the essential part of KrakenD as they are what your end users consume.
See Understanding the configuration file if you haven&amp;rsquo;t read it yet.
To create an endpoint you only need to add an endpoint object under the endpoints list with the resource you want to expose. If no method is declared, it&amp;rsquo;s assumed to be read-only (GET).
The endpoints section looks like this:
&amp;quot;endpoints&amp;quot;: [ { &amp;quot;endpoint&amp;quot;: &amp;quot;/v1/foo&amp;quot;, &amp;quot;method&amp;quot;: &amp;quot;GET&amp;quot;, &amp;quot;backend&amp;quot;: [ { &amp;quot;url_pattern&amp;quot;: &amp;quot;/bar&amp;quot;, &amp;quot;method&amp;quot;: &amp;quot;GET&amp;quot;, &amp;quot;host&amp;quot;: [ &amp;quot;https://api.</description></item><item><title>How to create KrakenD endpoints</title><link>https://www.krakend.io/docs/v1.4/endpoints/creating-endpoints/</link><pubDate>Wed, 26 Feb 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/endpoints/creating-endpoints/</guid><description>KrakenD endpoints are the essential part of KrakenD as they are what your end users consume.
See Understanding the configuration file if you haven&amp;rsquo;t read it yet.
To create an endpoint you only need to add an endpoint object under the endpoints list with the resource you want to expose. If no method is declared, it&amp;rsquo;s assumed to be read-only (GET).
The endpoints section looks like this:
&amp;quot;endpoints&amp;quot;: [ { &amp;quot;endpoint&amp;quot;: &amp;quot;/v1/foo&amp;quot;, &amp;quot;method&amp;quot;: &amp;quot;GET&amp;quot;, &amp;quot;backend&amp;quot;: [ { &amp;quot;url_pattern&amp;quot;: &amp;quot;/bar&amp;quot;, &amp;quot;method&amp;quot;: &amp;quot;GET&amp;quot;, &amp;quot;host&amp;quot;: [ &amp;quot;https://api.</description></item><item><title>Throttling overview</title><link>https://www.krakend.io/docs/enterprise/throttling/overview/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/throttling/overview/</guid><description>KrakenD offers several ways to protect the usage of your infrastructure that might act at very different levels.
The most significant type of throttling is the rate limit that allows you to restrict the traffic of end-users or the traffic of KrakenD against your backend services. The rate limits mainly cover the following purposes:
Avoid stressing or flooding your backend services with massive requests (proxy rate limit) Establish a quota of usage for your exposed API (router rate limit) Create a simple QoS strategy for your API The rate limits are complementary to the Circuit Breaker feature.</description></item><item><title>Throttling overview</title><link>https://www.krakend.io/docs/v1.3/throttling/overview/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/throttling/overview/</guid><description>KrakenD offers several ways to protect the usage of your infrastructure that might act at very different levels.
The most significant type of throttling is the rate limit that allows you to restrict the traffic of end-users or the traffic of KrakenD against your backend services. The rate limits mainly cover the following purposes:
Avoid stressing or flooding your backend services with massive requests (proxy rate limit) Establish a quota of usage for your exposed API (router rate limit) Create a simple QoS strategy for your API The rate limits are complementary to the Circuit Breaker feature.</description></item><item><title>Throttling overview</title><link>https://www.krakend.io/docs/v1.4/throttling/overview/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/throttling/overview/</guid><description>KrakenD offers several ways to protect the usage of your infrastructure that might act at very different levels.
The most significant type of throttling is the rate limit that allows you to restrict the traffic of end-users or the traffic of KrakenD against your backend services. The rate limits mainly cover the following purposes:
Avoid stressing or flooding your backend services with massive requests (proxy rate limit) Establish a quota of usage for your exposed API (router rate limit) Create a simple QoS strategy for your API The rate limits are complementary to the Circuit Breaker feature.</description></item><item><title>Traffic management overview</title><link>https://www.krakend.io/docs/throttling/overview/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/throttling/overview/</guid><description>KrakenD offers several ways to protect the usage of your infrastructure that might act at very different levels.
The most significant type of traffic management feature is the rate limit that allows you to throttle the traffic of end-users or the traffic of KrakenD against your backend services. The rate limits mainly cover the following purposes:
Avoid stressing or flooding your backend services with massive requests (proxy rate limit) Establish a quota of usage for your exposed API (router rate limit) Create a simple QoS strategy for your API Traffic Management covers:</description></item><item><title>API Health Check</title><link>https://www.krakend.io/docs/service-settings/health/</link><pubDate>Mon, 07 Oct 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/service-settings/health/</guid><description>The health endpoint (or the ping endpoint) allows you to query KrakenD to find out if it is ready to accept connections or not.
When KrakenD is up and running correctly, it exposes a /__health endpoint returning a 200 HTTP status code. It works automatically and without adding any specific configuration block.
Health check response When you query the /__health endpoint, you should expect a 200 response code or no response at all.</description></item><item><title>Writing custom plugins</title><link>https://www.krakend.io/docs/extending/writing-plugins/</link><pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/extending/writing-plugins/</guid><description>All different types of plugins let you freely implement your logic without restrictions. To start using your own plugins make sure to write them implementing the right interface and compile them respecting the requirements.
Introduction to plugins Before getting your hands dirty, read the introduction to plugins for understanding the different types of plugins you can use. Plugin requirements Writing, compiling and using plugins need to comply with the following list:</description></item><item><title>Production best practices</title><link>https://www.krakend.io/docs/deploying/best-practices/</link><pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/deploying/best-practices/</guid><description>Setting up KrakenD is a straightforward process, but here are some not-so-obvious recommendations to get a good start when going live. This section has generalistic advice, despite that every KrakenD installation is is different. Let&amp;rsquo;s dip the toe into the deployment waters!
Architecture recommendations High Availability Hardware can fail at any time, and a Gateway is a piece critical enough to have redundancy of the service. Having a cluster of machines operating the service assures high availability.</description></item><item><title>High-availability cluster</title><link>https://www.krakend.io/docs/enterprise/cluster/cluster-overview/</link><pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/cluster/cluster-overview/</guid><description>A KrakenD cluster consists of multiple KrakenD instances running simultaneously and working together to provide increased reliability, higher throughput, scalability, and fail-over.
A KrakenD cluster runs with the same KrakenD open source software you use today to start a single instance. Consequently no license is needed to operate a sizeable enterprise-grade API gateway.
KrakenD cluster benefits Having a KrakenD cluster provides these immediate benefits:
Increased throughput and capacity: Having more KrakenD nodes expands the number of requests the API can handle.</description></item><item><title>High-availability cluster</title><link>https://www.krakend.io/docs/v1.3/cluster/cluster-overview/</link><pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/cluster/cluster-overview/</guid><description>A KrakenD cluster consists of multiple KrakenD instances running simultaneously and working together to provide increased reliability, higher throughput, scalability, and fail-over.
A KrakenD cluster runs with the same KrakenD open source software you use today to start a single instance. Consequently no license is needed to operate a sizeable enterprise-grade API gateway.
KrakenD cluster benefits Having a KrakenD cluster provides these immediate benefits:
Increased throughput and capacity: Having more KrakenD nodes expands the number of requests the API can handle.</description></item><item><title>High-availability cluster</title><link>https://www.krakend.io/docs/v1.4/cluster/cluster-overview/</link><pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/cluster/cluster-overview/</guid><description>A KrakenD cluster consists of multiple KrakenD instances running simultaneously and working together to provide increased reliability, higher throughput, scalability, and fail-over.
A KrakenD cluster runs with the same KrakenD open source software you use today to start a single instance. Consequently no license is needed to operate a sizeable enterprise-grade API gateway.
KrakenD cluster benefits Having a KrakenD cluster provides these immediate benefits:
Increased throughput and capacity: Having more KrakenD nodes expands the number of requests the API can handle.</description></item><item><title>High-availability cluster</title><link>https://www.krakend.io/docs/deploying/clustering/</link><pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/deploying/clustering/</guid><description>KrakenD nodes are stateless and they don&amp;rsquo;t store data or application state to a persistent storage. Instead, any configuration data and application state exist within the configuration file. Nodes are expendable and replaceable at any time, as they do not hold anything.
A KrakenD cluster consists of multiple KrakenD instances running simultaneously and working together to provide increased reliability, higher throughput, scalability, and fail-over. There is no special software that you need to run a cluster other than KrakenD.</description></item><item><title>Benchmarks Overview</title><link>https://www.krakend.io/docs/benchmarks/overview/</link><pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/benchmarks/overview/</guid><description>KrakenD, the ultra performer API Gateway An API Gateway is a component that needs to deliver really fast, as it is an added layer in the infrastructure. KrakenD was built with performance in mind. In this page and inner pages, you&amp;rsquo;ll find several tests we did to measure the performance. We also invite you to do them for yourself!
TL;DR: Benchmark results ~18,000 requests/second on an ordinary laptop.
The following table summarizes different performance tests using Amazon EC2 virtual instances and an example with a laptop.</description></item><item><title>Benchmarks Overview</title><link>https://www.krakend.io/docs/enterprise/benchmarks/overview/</link><pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/benchmarks/overview/</guid><description>KrakenD, the ultra performer API Gateway An API Gateway is a component that needs to deliver really fast, as it is an added layer in the infrastructure. KrakenD was built with performance in mind. In this page and inner pages, you&amp;rsquo;ll find several tests we did to measure the performance. We also invite you to do them for yourself!
TL;DR: Benchmark results ~18,000 requests/second on an ordinary laptop.
The following table summarizes different performance tests using Amazon EC2 virtual instances and an example with a laptop.</description></item><item><title>Benchmarks Overview</title><link>https://www.krakend.io/docs/v1.3/benchmarks/overview/</link><pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/benchmarks/overview/</guid><description>KrakenD, the ultra performer API Gateway An API Gateway is a component that needs to deliver really fast, as it is an added layer in the infrastructure. KrakenD was built with performance in mind. In this page and inner pages, you&amp;rsquo;ll find several tests we did to measure the performance. We also invite you to do them for yourself!
TL;DR: Benchmark results ~18,000 requests/second on an ordinary laptop.
The following table summarizes different performance tests using Amazon EC2 virtual instances and an example with a laptop.</description></item><item><title>Benchmarks Overview</title><link>https://www.krakend.io/docs/v1.4/benchmarks/overview/</link><pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/benchmarks/overview/</guid><description>KrakenD, the ultra performer API Gateway An API Gateway is a component that needs to deliver really fast, as it is an added layer in the infrastructure. KrakenD was built with performance in mind. In this page and inner pages, you&amp;rsquo;ll find several tests we did to measure the performance. We also invite you to do them for yourself!
TL;DR: Benchmark results ~18,000 requests/second on an ordinary laptop.
The following table summarizes different performance tests using Amazon EC2 virtual instances and an example with a laptop.</description></item><item><title>Running KrakenD server. The `krakend run` command</title><link>https://www.krakend.io/docs/enterprise/commands/run/</link><pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/commands/run/</guid><description>To start KrakenD, you need to invoke the run command with the path to the configuration file. You can also specify the port (defaults to 8080)
Command to start KrakenD&amp;nbsp; $krakend&amp;nbsp;run&amp;nbsp;-c&amp;nbsp;krakend.json&amp;nbsp; #&amp;nbsp;or&amp;nbsp; krakend&amp;nbsp;run&amp;nbsp;--config&amp;nbsp;/path/to/krakend.json&amp;nbsp; #&amp;nbsp;or&amp;nbsp; krakend&amp;nbsp;run&amp;nbsp;--config&amp;nbsp;/path/to/krakend.json&amp;nbsp;-p&amp;nbsp;8080&amp;nbsp; The krakend run command with no flags will remind you that you need the path to the configuration file:
Missing configuration file&amp;nbsp; $krakend&amp;nbsp;run&amp;nbsp; Please,&amp;nbsp;provide&amp;nbsp;the&amp;nbsp;path&amp;nbsp;to&amp;nbsp;your&amp;nbsp;config&amp;nbsp;file&amp;nbsp; Show the help: Run command help&amp;nbsp; $krakend&amp;nbsp;run&amp;nbsp;-h&amp;nbsp; &amp;nbsp; `7MMF'&amp;nbsp;`YMM'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`7MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`7MM"</description></item><item><title>Running KrakenD server. The `krakend run` command</title><link>https://www.krakend.io/docs/v1.3/commands/run/</link><pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/commands/run/</guid><description>To start KrakenD, you need to invoke the run command with the path to the configuration file. You can also specify the port (defaults to 8080)
Command to start KrakenD&amp;nbsp; $krakend&amp;nbsp;run&amp;nbsp;-c&amp;nbsp;krakend.json&amp;nbsp; #&amp;nbsp;or&amp;nbsp; krakend&amp;nbsp;run&amp;nbsp;--config&amp;nbsp;/path/to/krakend.json&amp;nbsp; #&amp;nbsp;or&amp;nbsp; krakend&amp;nbsp;run&amp;nbsp;--config&amp;nbsp;/path/to/krakend.json&amp;nbsp;-p&amp;nbsp;8080&amp;nbsp; The krakend run command with no flags will remind you that you need the path to the configuration file:
Missing configuration file&amp;nbsp; $krakend&amp;nbsp;run&amp;nbsp; Please,&amp;nbsp;provide&amp;nbsp;the&amp;nbsp;path&amp;nbsp;to&amp;nbsp;your&amp;nbsp;config&amp;nbsp;file&amp;nbsp; Show the help: Run command help&amp;nbsp; $krakend&amp;nbsp;run&amp;nbsp;-h&amp;nbsp; &amp;nbsp; `7MMF'&amp;nbsp;`YMM'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`7MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`7MM"</description></item><item><title>Running KrakenD server. The `krakend run` command</title><link>https://www.krakend.io/docs/v1.4/commands/run/</link><pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/commands/run/</guid><description>To start KrakenD, you need to invoke the run command with the path to the configuration file. You can also specify the port (defaults to 8080)
Command to start KrakenD&amp;nbsp; $krakend&amp;nbsp;run&amp;nbsp;-c&amp;nbsp;krakend.json&amp;nbsp; #&amp;nbsp;or&amp;nbsp; krakend&amp;nbsp;run&amp;nbsp;--config&amp;nbsp;/path/to/krakend.json&amp;nbsp; #&amp;nbsp;or&amp;nbsp; krakend&amp;nbsp;run&amp;nbsp;--config&amp;nbsp;/path/to/krakend.json&amp;nbsp;-p&amp;nbsp;8080&amp;nbsp; The krakend run command with no flags will remind you that you need the path to the configuration file:
Missing configuration file&amp;nbsp; $krakend&amp;nbsp;run&amp;nbsp; Please,&amp;nbsp;provide&amp;nbsp;the&amp;nbsp;path&amp;nbsp;to&amp;nbsp;your&amp;nbsp;config&amp;nbsp;file&amp;nbsp; Show the help: Run command help&amp;nbsp; $krakend&amp;nbsp;run&amp;nbsp;-h&amp;nbsp; &amp;nbsp; `7MMF'&amp;nbsp;`YMM'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`7MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`7MM"</description></item><item><title>Loading and injecting plugins</title><link>https://www.krakend.io/docs/extending/injecting-plugins/</link><pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/extending/injecting-plugins/</guid><description>Your plugin is already developed and ready to use, and now you want to use it. There are two phases:
Loading the plugin Injecting the plugin in a specific place Loading the plugin KrakenD registers plugins during startup according to its plugin configuration:
{ &amp;#34;version&amp;#34;: 3, &amp;#34;plugin&amp;#34;: { &amp;#34;pattern&amp;#34;:&amp;#34;.so&amp;#34;, &amp;#34;folder&amp;#34;: &amp;#34;/opt/krakend/plugins/&amp;#34; } } Add the plugin keyword at the root of your configuration to let KrakenD know the rules to register plugins.</description></item><item><title>Async agents</title><link>https://www.krakend.io/docs/async/agent/</link><pubDate>Fri, 21 Jan 2022 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/async/agent/</guid><description>Async agents are routines listening to queues or PubSub systems that react to new events and push data to your backends. Through async agents, you can start a lot of consumers to process your events autonomously.
As opposed to endpoints, async agents do not require users to request something to trigger an action. Instead, the agents connect to an event messaging system and fire an action when an event is delivered.</description></item><item><title>Customizing router behavior</title><link>https://www.krakend.io/docs/service-settings/router-options/</link><pubDate>Fri, 29 Oct 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/service-settings/router-options/</guid><description>The optional router configuration allows you to set global flags that change the way KrakenD processes the requests at the router layer.
Generally speaking you don&amp;rsquo;t need this. But in every case there is an exception and you might eventually need to change some value.
To change the router behavior, add the namespace router under the global extra_config. The following example shows how to return the error to the client:</description></item><item><title>HTTP handler plugins</title><link>https://www.krakend.io/docs/extending/http-server-plugins/</link><pubDate>Fri, 21 May 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/extending/http-server-plugins/</guid><description>The HTTP handler plugins (or HTTP server plugins) belong to the router layer and let you modify the requests before KrakenD starts processing them, or modify the final response back to the user. The HTTP handler plugin allows you to write your own server right in KrakenD and lets you implement anything you can imagine. This plugin type is so powerful that can be used to implement custom monetization, tracking, tenant control, special protocol conversion, and heavy modifications to put a few examples.</description></item><item><title>API Key authentication using RBAC</title><link>https://www.krakend.io/docs/enterprise/authentication/api-keys/</link><pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/authentication/api-keys/</guid><description>The API key authentication enables a Role-Based Access Control (RBAC) mechanism by reading the Authorization header of incoming requests. For all your desired endpoints, KrakenD rejects requests from users that do not provide a valid key or are trying to access a resource with insufficient permissions for the user&amp;rsquo;s role.
The authentication is granular and works per-endpoint, meaning that you can combine public endpoints and private endpoints in the same configuration.</description></item><item><title>Basic endpoint authentication using .htpasswd</title><link>https://www.krakend.io/docs/enterprise/authentication/basic-authentication/</link><pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/authentication/basic-authentication/</guid><description>The Basic Authentication plugin protects the access to selected endpoints using basic username and password credentials. The functionality works at the router level, and when the authentication fails, the backend is never hit.
How does it work Basic auth functionality is provided by a plugin, meaning that a separate binary needs to be included. To do so, make sure to provide krakend-basic-auth.so, and set the configuration as described below.
KrakenD feeds from a regular.</description></item><item><title>Control of bot traffic</title><link>https://www.krakend.io/docs/enterprise/throttling/botdetector/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/throttling/botdetector/</guid><description>The bot detector module checks incoming connections to the gateway to determine if a bot made them, helping you detect and reject bots carrying out scraping, content theft, and form spam.
Bots are detected by inspecting the User-Agent and comparing its value with a set of configuration rules provided by you. The bot detector module does not set any initial rules, meaning that is up to you to decide the best rules for your use case, and choose how restrictive or permissive you are with bots.</description></item><item><title>Control of bot traffic</title><link>https://www.krakend.io/docs/v1.3/throttling/botdetector/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/throttling/botdetector/</guid><description>The bot detector module checks incoming connections to the gateway to determine if a bot made them, helping you detect and reject bots carrying out scraping, content theft, and form spam.
Bots are detected by inspecting the User-Agent and comparing its value with a set of configuration rules provided by you. The bot detector module does not set any initial rules, meaning that is up to you to decide the best rules for your use case, and choose how restrictive or permissive you are with bots.</description></item><item><title>Control of bot traffic</title><link>https://www.krakend.io/docs/v1.4/throttling/botdetector/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/throttling/botdetector/</guid><description>The bot detector module checks incoming connections to the gateway to determine if a bot made them, helping you detect and reject bots carrying out scraping, content theft, and form spam.
Bots are detected by inspecting the User-Agent and comparing its value with a set of configuration rules provided by you. The bot detector module does not set any initial rules, meaning that is up to you to decide the best rules for your use case, and choose how restrictive or permissive you are with bots.</description></item><item><title>Telemetry</title><link>https://www.krakend.io/docs/telemetry/overview/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/telemetry/overview/</guid><description>Observability and networking are key to succeed in a scenario of distributed microservices architecture, and new monitoring tools are needed. These tools must provide at least options to detect problems' root causes, monitoring and details of the different distributed transactions, and performance and latency optimization.
Through the OpenCensus exporters you can send logs, metrics, and traces to several open source and payment tools, so you can follow the activity of the gateway and the derived requests to its connected backends.</description></item><item><title>Enabling TLS for HTTPS and HTTP/2</title><link>https://www.krakend.io/docs/enterprise/service-settings/tls/</link><pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/service-settings/tls/</guid><description>There are two different strategies when using TLS over KrakenD:
Use TLS for HTTPS and HTTP/2 in KrakenD Use a balancer with TLS termination in front of KrakenD (e.g., ELB, HAproxy) In case you want to enable TLS in KrakenD you need to add a tls key at service level (configuration&amp;rsquo;s file root) with at least the public key and the private key. When you add TLS, KrakenD listens only using TLS, and no traffic to plain HTTP is accepted.</description></item><item><title>Enabling TLS for HTTPS and HTTP/2</title><link>https://www.krakend.io/docs/v1.3/service-settings/tls/</link><pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/service-settings/tls/</guid><description>There are two different strategies when using TLS over KrakenD:
Use TLS for HTTPS and HTTP/2 in KrakenD Use a balancer with TLS termination in front of KrakenD (e.g., ELB, HAproxy) In case you want to enable TLS in KrakenD you need to add a tls key at service level (configuration&amp;rsquo;s file root) with at least the public key and the private key. When you add TLS, KrakenD listens only using TLS, and no traffic to plain HTTP is accepted.</description></item><item><title>Enabling TLS for HTTPS and HTTP/2</title><link>https://www.krakend.io/docs/v1.4/service-settings/tls/</link><pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/service-settings/tls/</guid><description>There are two different strategies when using TLS over KrakenD:
Use TLS for HTTPS and HTTP/2 in KrakenD Use a balancer with TLS termination in front of KrakenD (e.g., ELB, HAproxy) In case you want to enable TLS in KrakenD you need to add a tls key at service level (configuration&amp;rsquo;s file root) with at least the public key and the private key. When you add TLS, KrakenD listens only using TLS, and no traffic to plain HTTP is accepted.</description></item><item><title>SD with DNS SRV (e.g., Consul, k8s)</title><link>https://www.krakend.io/docs/v1.4/service-discovery/dns-srv/</link><pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/service-discovery/dns-srv/</guid><description>The DNS SRV is a market standard used by systems such as Kubernetes, Mesos, Haproxy, Nginx plus, AWS ECS, Linkerd, and more.
To integrate Consul as the Service Discovery or any other DNS SRV compatible systems you only need to set two keys:
&amp;quot;sd&amp;quot;: &amp;quot;dns&amp;quot;: To set service discovery = DNS SRV &amp;quot;host&amp;quot;: []: The list of all the names providing the resolution These keys need to be added in the backend section of your configuration.</description></item><item><title>Writing custom plugins</title><link>https://www.krakend.io/docs/enterprise/extending/writing-plugins/</link><pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/extending/writing-plugins/</guid><description>KrakenD&amp;rsquo;s modular design allows you to extend its functionality by adding your custom code. As an engineer, it&amp;rsquo;s always tempting to start writing code but the majority of scenarios do not require writing any. Existing modules, middleware, and plugins suffice almost everyone&amp;rsquo;s needs.
It&amp;rsquo;s important to remark, that if you want to do complex business logic checks and transformations, aside from the core functionality, there is specific scripting designed for that without compiling Go code.</description></item><item><title>Writing custom plugins</title><link>https://www.krakend.io/docs/v1.3/extending/writing-plugins/</link><pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/extending/writing-plugins/</guid><description>KrakenD&amp;rsquo;s modular design allows you to extend its functionality by adding your custom code. As an engineer, it&amp;rsquo;s always tempting to start writing code but the majority of scenarios do not require writing any. Existing modules, middleware, and plugins suffice almost everyone&amp;rsquo;s needs.
It&amp;rsquo;s important to remark, that if you want to do complex business logic checks and transformations, aside from the core functionality, there is specific scripting designed for that without compiling Go code.</description></item><item><title>Writing custom plugins</title><link>https://www.krakend.io/docs/v1.4/extending/writing-plugins/</link><pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/extending/writing-plugins/</guid><description>KrakenD&amp;rsquo;s modular design allows you to extend its functionality by adding your custom code. As an engineer, it&amp;rsquo;s always tempting to start writing code but the majority of scenarios do not require writing any. Existing modules, middleware, and plugins suffice almost everyone&amp;rsquo;s needs.
It&amp;rsquo;s important to remark, that if you want to do complex business logic checks and transformations, aside from the core functionality, there is specific scripting designed for that without compiling Go code.</description></item><item><title>Extended metrics and the `/__stats` endpoint</title><link>https://www.krakend.io/docs/enterprise/extended-metrics/metrics/</link><pubDate>Mon, 05 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/extended-metrics/metrics/</guid><description>The metrics middleware collects extended metrics and exposes them in the /__stats/ endpoint. The endpoint runs in a different port than the API, and contains a lot of metrics.
Through the extended metrics you can create new tools or integrate with existing ones. For instance, combining the metrics with the InfluxDB extended metrics you can have a Grafana dashboard.
Configuration In order to add metrics to your KrakenD installation add the github_com/devopsfaith/krakend-metrics namespace under extra_config in the root of your configuration file, e.</description></item><item><title>Extended metrics and the `/__stats` endpoint</title><link>https://www.krakend.io/docs/v1.3/extended-metrics/metrics/</link><pubDate>Mon, 05 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/extended-metrics/metrics/</guid><description>The metrics middleware collects extended metrics and exposes them in the /__stats/ endpoint. The endpoint runs in a different port than the API, and contains a lot of metrics.
Through the extended metrics you can create new tools or integrate with existing ones. For instance, combining the metrics with the InfluxDB extended metrics you can have a Grafana dashboard.
Configuration In order to add metrics to your KrakenD installation add the github_com/devopsfaith/krakend-metrics namespace under extra_config in the root of your configuration file, e.</description></item><item><title>Extended metrics and the `/__stats` endpoint</title><link>https://www.krakend.io/docs/v1.4/extended-metrics/metrics/</link><pubDate>Mon, 05 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/extended-metrics/metrics/</guid><description>The metrics middleware collects extended metrics and exposes them in the /__stats/ endpoint. The endpoint runs in a different port than the API, and contains a lot of metrics.
Through the extended metrics you can create new tools or integrate with existing ones. For instance, combining the metrics with the InfluxDB extended metrics you can have a Grafana dashboard.
Configuration In order to add metrics to your KrakenD installation add the github_com/devopsfaith/krakend-metrics namespace under extra_config in the root of your configuration file, e.</description></item><item><title>JSON Web Tokens overview</title><link>https://www.krakend.io/docs/authorization/jwt-overview/</link><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/authorization/jwt-overview/</guid><description>The JSON Web Token specification is an industry standard to represent claims securely between two parties. The JWT is a base64 encoded JSON object that contains key-value pairs of attributes that are signed by a trusted authority.
When JWT shields a specific set of endpoints, requests to the API gateway must provide a token. Verification of the token takes place in every request, including the check of the signature and optionally the assurance that its issuer, roles, and audience are sufficient to access the endpoint.</description></item><item><title>JSON Web Tokens overview</title><link>https://www.krakend.io/docs/enterprise/authorization/jwt-overview/</link><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/authorization/jwt-overview/</guid><description>The JSON Web Token specification is an industry standard to represent claims securely between two parties. The JWT is an encoded JSON object that contains key-value pairs of attributes that are signed by a trusted authority.
When JWT shields a specific set of endpoints, requests to the API gateway must provide a token. Verification of the token takes place in every request, including the check of the signature and optionally the assurance that its issuer, roles, and audience are sufficient to access the endpoint.</description></item><item><title>JSON Web Tokens overview</title><link>https://www.krakend.io/docs/v1.3/authorization/jwt-overview/</link><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/authorization/jwt-overview/</guid><description>The JSON Web Token specification is an industry standard to represent claims securely between two parties. The JWT is an encoded JSON object that contains key-value pairs of attributes that are signed by a trusted authority.
When JWT shields a specific set of endpoints, requests to the API gateway must provide a token. Verification of the token takes place in every request, including the check of the signature and optionally the assurance that its issuer, roles, and audience are sufficient to access the endpoint.</description></item><item><title>JSON Web Tokens overview</title><link>https://www.krakend.io/docs/v1.4/authorization/jwt-overview/</link><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/authorization/jwt-overview/</guid><description>The JSON Web Token specification is an industry standard to represent claims securely between two parties. The JWT is an encoded JSON object that contains key-value pairs of attributes that are signed by a trusted authority.
When JWT shields a specific set of endpoints, requests to the API gateway must provide a token. Verification of the token takes place in every request, including the check of the signature and optionally the assurance that its issuer, roles, and audience are sufficient to access the endpoint.</description></item><item><title>Improved Logging - Syslog, stdout</title><link>https://www.krakend.io/docs/logging/extended-logging/</link><pubDate>Tue, 30 Oct 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/logging/extended-logging/</guid><description>By default, when KrakenD starts all the log events are sent to the standard output using the basic logger capabilities of the Lura Project. The reporting level, in that case, is DEBUG and adds no prefix to the log lines.
Extending the logging capabilities Different logging components allow you to extend the logging functionality, such as sending the events to the syslog, choosing the verbosity level, or use the Graylog Extended Log Format (GELF).</description></item><item><title>Logging - Syslog, stdout and GELF</title><link>https://www.krakend.io/docs/enterprise/logging/extended-logging/</link><pubDate>Tue, 30 Oct 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/logging/extended-logging/</guid><description>By default, when KrakenD starts all the log events are sent to the standard output using the basic logger capabilities of the Lura Project. The reporting level, in that case, is DEBUG and adds no prefix to the log lines.
Extending the logging capabilities Different logging components allow you to extend the logging functionality, such as sending the events to the syslog, choosing the verbosity level, or use the Graylog Extended Log Format (GELF).</description></item><item><title>Logging - Syslog, stdout and GELF</title><link>https://www.krakend.io/docs/v1.3/logging/extended-logging/</link><pubDate>Tue, 30 Oct 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/logging/extended-logging/</guid><description>By default, when KrakenD starts all the log events are sent to the standard output using the basic logger capabilities of the Lura Project. The reporting level, in that case, is DEBUG and adds no prefix to the log lines.
Extending the logging capabilities Different logging components allow you to extend the logging functionality, such as sending the events to the syslog, choosing the verbosity level, or use the Graylog Extended Log Format (GELF).</description></item><item><title>Logging - Syslog, stdout and GELF</title><link>https://www.krakend.io/docs/v1.4/logging/extended-logging/</link><pubDate>Tue, 30 Oct 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/logging/extended-logging/</guid><description>By default, when KrakenD starts all the log events are sent to the standard output using the basic logger capabilities of the Lura Project. The reporting level, in that case, is DEBUG and adds no prefix to the log lines.
Extending the logging capabilities Different logging components allow you to extend the logging functionality, such as sending the events to the syslog, choosing the verbosity level, or use the Graylog Extended Log Format (GELF).</description></item><item><title>Rate-limiting backends</title><link>https://www.krakend.io/docs/backends/rate-limit/</link><pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/backends/rate-limit/</guid><description>No matter what is the amount of activity the users are generating at the router level, you might want to restrict the connections KrakenD makes to your backends. Configuration is similar to the router&amp;rsquo;s one, but it&amp;rsquo;s declared directly in the backend section instead of the endpoint.
This parameter is defined at the krakend.json configuration file as follows: { &amp;#34;endpoint&amp;#34;: &amp;#34;/products/{cat_id}&amp;#34;, &amp;#34;backend&amp;#34;: [ { &amp;#34;host&amp;#34;: [&amp;#34;http://some.api.com/&amp;#34;], &amp;#34;url_pattern&amp;#34;: &amp;#34;/catalog/category/{cat_id}.rss&amp;#34;, &amp;#34;encoding&amp;#34;: &amp;#34;rss&amp;#34;, &amp;#34;extra_config&amp;#34;: { &amp;#34;qos/ratelimit/proxy&amp;#34;: { &amp;#34;max_rate&amp;#34;: 0.</description></item><item><title>Rate-limiting backends</title><link>https://www.krakend.io/docs/enterprise/backends/rate-limit/</link><pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/backends/rate-limit/</guid><description>No matter what is the amount of activity the users are generating at the router level, you might want to restrict the connections KrakenD makes to your backends. Configuration is similar to the router&amp;rsquo;s one, but it&amp;rsquo;s declared directly in the backend section instead of the endpoint.
This parameter is defined at the krakend.json configuration file as follows: { &amp;#34;endpoint&amp;#34;: &amp;#34;/products/{cat_id}&amp;#34;, &amp;#34;backend&amp;#34;: [ { &amp;#34;host&amp;#34;: [&amp;#34;http://some.api.com/&amp;#34;], &amp;#34;url_pattern&amp;#34;: &amp;#34;/catalog/category/{cat_id}.rss&amp;#34;, &amp;#34;encoding&amp;#34;: &amp;#34;rss&amp;#34;, &amp;#34;extra_config&amp;#34;: { &amp;#34;github.</description></item><item><title>Rate-limiting backends</title><link>https://www.krakend.io/docs/v1.3/backends/rate-limit/</link><pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/backends/rate-limit/</guid><description>No matter what is the amount of activity the users are generating at the router level, you might want to restrict the connections KrakenD makes to your backends. Configuration is similar to the router&amp;rsquo;s one, but it&amp;rsquo;s declared directly in the backend section instead of the endpoint.
This parameter is defined at the krakend.json configuration file as follows: { &amp;#34;endpoint&amp;#34;: &amp;#34;/products/{cat_id}&amp;#34;, &amp;#34;backend&amp;#34;: [ { &amp;#34;host&amp;#34;: [&amp;#34;http://some.api.com/&amp;#34;], &amp;#34;url_pattern&amp;#34;: &amp;#34;/catalog/category/{cat_id}.rss&amp;#34;, &amp;#34;encoding&amp;#34;: &amp;#34;rss&amp;#34;, &amp;#34;extra_config&amp;#34;: { &amp;#34;github.</description></item><item><title>Rate-limiting backends</title><link>https://www.krakend.io/docs/v1.4/backends/rate-limit/</link><pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/backends/rate-limit/</guid><description>No matter what is the amount of activity the users are generating at the router level, you might want to restrict the connections KrakenD makes to your backends. Configuration is similar to the router&amp;rsquo;s one, but it&amp;rsquo;s declared directly in the backend section instead of the endpoint.
This parameter is defined at the krakend.json configuration file as follows: { &amp;#34;endpoint&amp;#34;: &amp;#34;/products/{cat_id}&amp;#34;, &amp;#34;backend&amp;#34;: [ { &amp;#34;host&amp;#34;: [&amp;#34;http://some.api.com/&amp;#34;], &amp;#34;url_pattern&amp;#34;: &amp;#34;/catalog/category/{cat_id}.rss&amp;#34;, &amp;#34;encoding&amp;#34;: &amp;#34;rss&amp;#34;, &amp;#34;extra_config&amp;#34;: { &amp;#34;github.</description></item><item><title>Understanding the configuration file</title><link>https://www.krakend.io/docs/configuration/structure/</link><pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/configuration/structure/</guid><description>All KrakenD behavior depends on its configuration file(s). Although the configuration supports formats other than JSON and it can be described using multiple files, you&amp;rsquo;ll find it referenced through all this documentation and for simplicity as the krakend.json. Being familiar with its structure it&amp;rsquo;s essential.
Configuration file structure There are a large number of options you can put in this file. Let&amp;rsquo;s focus now only on the main structure: { &amp;#34;$schema&amp;#34;: &amp;#34;https://www.</description></item><item><title>Understanding the configuration file</title><link>https://www.krakend.io/docs/enterprise/configuration/structure/</link><pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/configuration/structure/</guid><description>All KrakenD behavior depends on its configuration file. Although the configuration supports formats other than JSON and it can be described by multiple files, you&amp;rsquo;ll find it referenced through all this documentation and for simplicity as the krakend.json. Being familiar with its structure it&amp;rsquo;s essential.
Configuration file structure There are a large number of options you can put in this file. Let&amp;rsquo;s focus now only on the main structure: { &amp;#34;version&amp;#34;: 2, &amp;#34;endpoints&amp;#34;: [], &amp;#34;extra_config&amp;#34;: {} }</description></item><item><title>Understanding the configuration file</title><link>https://www.krakend.io/docs/v1.3/configuration/structure/</link><pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/configuration/structure/</guid><description>All KrakenD behavior depends on its configuration file. Although the configuration supports formats other than JSON and it can be described by multiple files, you&amp;rsquo;ll find it referenced through all this documentation and for simplicity as the krakend.json. Being familiar with its structure it&amp;rsquo;s essential.
Configuration file structure There are a large number of options you can put in this file. Let&amp;rsquo;s focus now only on the main structure: { &amp;#34;version&amp;#34;: 2, &amp;#34;endpoints&amp;#34;: [], &amp;#34;extra_config&amp;#34;: {} }</description></item><item><title>Understanding the configuration file</title><link>https://www.krakend.io/docs/v1.4/configuration/structure/</link><pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/configuration/structure/</guid><description>All KrakenD behavior depends on its configuration file(s). Although the configuration supports formats other than JSON and it can be described using multiple files, you&amp;rsquo;ll find it referenced through all this documentation and for simplicity as the krakend.json. Being familiar with its structure it&amp;rsquo;s essential.
Configuration file structure There are a large number of options you can put in this file. Let&amp;rsquo;s focus now only on the main structure: { &amp;#34;version&amp;#34;: 2, &amp;#34;endpoints&amp;#34;: [], &amp;#34;extra_config&amp;#34;: {} }</description></item><item><title>Forwarding query strings and headers</title><link>https://www.krakend.io/docs/endpoints/parameter-forwarding/</link><pubDate>Fri, 20 Jul 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/endpoints/parameter-forwarding/</guid><description>KrakenD is an API Gateway with a zero-trust policy, and when it comes to forward query strings, cookies, and headers, you need to define what is allowed.
Part of the zero-trust policy implies that KrakenD does not forward any unexpected query string, headers, or cookies. See below how to set the forwarding rules.
Configuration to enable parameter forwarding You can change the default behavior according to your needs and define which elements can pass from the client to your backends.</description></item><item><title>Deployment best practices</title><link>https://www.krakend.io/docs/enterprise/deploying/best-practices/</link><pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/deploying/best-practices/</guid><description>Setting up a cluster of KrakenD instances is a straightforward process, but here are some not so obvious recommendations to get a good start.
Use blue/green or similar deployment strategy As it happens with Apache, Nginx, Mysql, and the vast majority of services, changing the configuration requires a restart. When deploying new changes, use a technique like blue/green deployment or similar.
This scenario can be automated and is available in all major cloud providers.</description></item><item><title>Deployment best practices</title><link>https://www.krakend.io/docs/v1.3/deploying/best-practices/</link><pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/deploying/best-practices/</guid><description>Setting up a cluster of KrakenD instances is a straightforward process, but here are some not so obvious recommendations to get a good start.
Use blue/green or similar deployment strategy As it happens with Apache, Nginx, Mysql, and the vast majority of services, changing the configuration requires a restart. When deploying new changes, use a technique like blue/green deployment or similar.
This scenario can be automated and is available in all major cloud providers.</description></item><item><title>Deployment best practices</title><link>https://www.krakend.io/docs/v1.4/deploying/best-practices/</link><pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/deploying/best-practices/</guid><description>Setting up a cluster of KrakenD instances is a straightforward process, but here are some not so obvious recommendations to get a good start.
Use blue/green or similar deployment strategy As it happens with Apache, Nginx, Mysql, and the vast majority of services, changing the configuration requires a restart. When deploying new changes, use a technique like blue/green deployment or similar.
This scenario can be automated and is available in all major cloud providers.</description></item><item><title>Developer Tools</title><link>https://www.krakend.io/docs/developer/overview/</link><pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/developer/overview/</guid><description>There are some resources that make your life easier when developing with KrakenD. These tools are meant to be used only in development and never in production
Hot reload the configuration A Docker image using Reflex watches the configuration directory and reloads KrakenD when the configuration changes. This is very convenient while you are developing as it allows you to test new changes without having to restart manually and making the process less tedious.</description></item><item><title>Developer Tools</title><link>https://www.krakend.io/docs/enterprise/developer/overview/</link><pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/developer/overview/</guid><description>There are some resources that make your life easier when developing with KrakenD. These tools are meant to be used only in development and never in production
Hot reload the configuration A Docker image using Reflex watches the configuration directory and reloads KrakenD when the configuration changes. This is very convenient while you are developing as it allows you to test new changes without having to restart manually and making the process less tedious.</description></item><item><title>Developer Tools</title><link>https://www.krakend.io/docs/v1.3/developer/overview/</link><pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/developer/overview/</guid><description>There are some resources that make your life easier when developing with KrakenD. These tools are meant to be used only in development and never in production
Hot reload the configuration A Docker image using Reflex watches the configuration directory and reloads KrakenD when the configuration changes. This is very convenient while you are developing as it allows you to test new changes without having to restart manually and making the process less tedious.</description></item><item><title>Developer Tools</title><link>https://www.krakend.io/docs/v1.4/developer/overview/</link><pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/developer/overview/</guid><description>There are some resources that make your life easier when developing with KrakenD. These tools are meant to be used only in development and never in production
Hot reload the configuration A Docker image using Reflex watches the configuration directory and reloads KrakenD when the configuration changes. This is very convenient while you are developing as it allows you to test new changes without having to restart manually and making the process less tedious.</description></item><item><title>KrakenD servers requirements</title><link>https://www.krakend.io/docs/deploying/server-dimensioning/</link><pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/deploying/server-dimensioning/</guid><description>When comparing KrakenD with other solutions, a key difference is that its Total Cost of Ownership is actually lower, and you can save a lot of money in infrastructure.
On the hardware side, KrakenD is very light and consumes very low resources. For instance, the consumption pattern of the baseline (we will see this definition below) is around 100-200MB of RAM and can work on production with 0.5 vCPU. This baseline can process thousands of requests per second.</description></item><item><title>Setting up a cluster</title><link>https://www.krakend.io/docs/enterprise/cluster/configuration/</link><pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/cluster/configuration/</guid><description>Hardware can fail at any time, and a Gateway is a piece critical enough to have redundancy of the service. Having a cluster of machines operating the service assures high availability.
KrakenD nodes are stateless and they don&amp;rsquo;t store data or application state to a persistent storage. Instead, any configuration data and application state exist within the configuration file. Nodes are expendable and replaceable at any time, as they do not hold anything.</description></item><item><title>Setting up a cluster</title><link>https://www.krakend.io/docs/v1.3/cluster/configuration/</link><pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/cluster/configuration/</guid><description>Hardware can fail at any time, and a Gateway is a piece critical enough to have redundancy of the service. Having a cluster of machines operating the service assures high availability.
KrakenD nodes are stateless and they don&amp;rsquo;t store data or application state to a persistent storage. Instead, any configuration data and application state exist within the configuration file. Nodes are expendable and replaceable at any time, as they do not hold anything.</description></item><item><title>Setting up a cluster</title><link>https://www.krakend.io/docs/v1.4/cluster/configuration/</link><pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/cluster/configuration/</guid><description>Hardware can fail at any time, and a Gateway is a piece critical enough to have redundancy of the service. Having a cluster of machines operating the service assures high availability.
KrakenD nodes are stateless and they don&amp;rsquo;t store data or application state to a persistent storage. Instead, any configuration data and application state exist within the configuration file. Nodes are expendable and replaceable at any time, as they do not hold anything.</description></item><item><title>Commands - check</title><link>https://www.krakend.io/docs/enterprise/commands/check/</link><pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/commands/check/</guid><description>The krakend check command validates the passed configuration. Since KrakenD does not implement a strict parsing, typos in the config file could be shadowed. In order to validate your config completely, it is recommended to use the --debug flag.
Usage of KrakenD check&amp;nbsp; $./krakend&amp;nbsp;check&amp;nbsp;-h&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; `7MMF'&amp;nbsp;`YMM'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`7MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`7MM"""Yb.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;.M'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`Yb.&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;MM&amp;nbsp;.d"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`7Mb,od8&amp;nbsp;,6"Yb.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;,MP'.gP"Ya&amp;nbsp;`7MMpMMMb.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`Mb&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;MMMMM.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM'&amp;nbsp;"'8)&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;;Y&amp;nbsp;&amp;nbsp;,M'&amp;nbsp;&amp;nbsp;&amp;nbsp;Yb&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;VMA&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,pm9MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM;Mm&amp;nbsp;&amp;nbsp;8M""""""&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,MP&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;`MM.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;8M&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;`Mb.YM.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,dP'&amp;nbsp;&amp;nbsp; .JMML.&amp;nbsp;&amp;nbsp;&amp;nbsp;MMb..JMML.&amp;nbsp;&amp;nbsp;`Moo9^Yo..JMML.&amp;nbsp;YA.`Mbmmd'.JMML&amp;nbsp;&amp;nbsp;JMML..JMMmmmdP'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; _______________________________________________________________________&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Version:&amp;nbsp;2.0.1&amp;nbsp; &amp;nbsp; &amp;nbsp; Validates&amp;nbsp;that&amp;nbsp;the&amp;nbsp;active&amp;nbsp;configuration&amp;nbsp;file&amp;nbsp;has&amp;nbsp;a&amp;nbsp;valid&amp;nbsp;syntax&amp;nbsp;to&amp;nbsp;run&amp;nbsp;the&amp;nbsp;service.&amp;nbsp; Change&amp;nbsp;the&amp;nbsp;configuration&amp;nbsp;file&amp;nbsp;by&amp;nbsp;using&amp;nbsp;the&amp;nbsp;--config&amp;nbsp;flag&amp;nbsp; &amp;nbsp; Usage:&amp;nbsp; &amp;nbsp;&amp;nbsp;krakend&amp;nbsp;check&amp;nbsp;[flags]&amp;nbsp; &amp;nbsp; Aliases:&amp;nbsp; &amp;nbsp;&amp;nbsp;check,&amp;nbsp;validate&amp;nbsp; &amp;nbsp; Examples:&amp;nbsp; krakend&amp;nbsp;check&amp;nbsp;-d&amp;nbsp;-c&amp;nbsp;config.json&amp;nbsp; &amp;nbsp; Flags:&amp;nbsp; &amp;nbsp;&amp;nbsp;-h,&amp;nbsp;--help&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;help&amp;nbsp;for&amp;nbsp;check&amp;nbsp; &amp;nbsp;&amp;nbsp;-t,&amp;nbsp;--test-gin-routes&amp;nbsp;&amp;nbsp;&amp;nbsp;Test&amp;nbsp;the&amp;nbsp;endpoint&amp;nbsp;patterns&amp;nbsp;against&amp;nbsp;a&amp;nbsp;real&amp;nbsp;gin&amp;nbsp;router&amp;nbsp;on&amp;nbsp;selected&amp;nbsp;port&amp;nbsp; &amp;nbsp; Global&amp;nbsp;Flags:&amp;nbsp; &amp;nbsp;&amp;nbsp;-c,&amp;nbsp;--config&amp;nbsp;string&amp;nbsp;&amp;nbsp;&amp;nbsp;Path&amp;nbsp;to&amp;nbsp;the&amp;nbsp;configuration&amp;nbsp;filename&amp;nbsp; &amp;nbsp;&amp;nbsp;-d,&amp;nbsp;--debug&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Enable&amp;nbsp;the&amp;nbsp;debug&amp;nbsp; Passing a path to the config file is required</description></item><item><title>Commands - check</title><link>https://www.krakend.io/docs/v1.3/commands/check/</link><pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/commands/check/</guid><description>The krakend check command validates the passed configuration. Since KrakenD does not implement a strict parsing, typos in the config file could be shadowed. In order to validate your config completely, it is recommended to use the --debug flag.
Usage of KrakenD check&amp;nbsp; $./krakend&amp;nbsp;check&amp;nbsp;-h&amp;nbsp; &amp;nbsp; `7MMF'&amp;nbsp;`YMM'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`7MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`7MM"""Yb.&amp;nbsp; &amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;.M'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`Yb.&amp;nbsp; &amp;nbsp;&amp;nbsp;MM&amp;nbsp;.d"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`7Mb,od8&amp;nbsp;,6"Yb.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;,MP'.gP"Ya&amp;nbsp;`7MMpMMMb.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`Mb&amp;nbsp; &amp;nbsp;&amp;nbsp;MMMMM.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM'&amp;nbsp;"'8)&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;;Y&amp;nbsp;&amp;nbsp;,M'&amp;nbsp;&amp;nbsp;&amp;nbsp;Yb&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp; &amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;VMA&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,pm9MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM;Mm&amp;nbsp;&amp;nbsp;8M""""""&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,MP&amp;nbsp; &amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;`MM.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;8M&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;`Mb.YM.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,dP'&amp;nbsp; .JMML.&amp;nbsp;&amp;nbsp;&amp;nbsp;MMb..JMML.&amp;nbsp;&amp;nbsp;`Moo9^Yo..JMML.&amp;nbsp;YA.`Mbmmd'.JMML&amp;nbsp;&amp;nbsp;JMML..JMMmmmdP'&amp;nbsp; _______________________________________________________________________&amp;nbsp; &amp;nbsp; Version:&amp;nbsp;1.3&amp;nbsp; &amp;nbsp; Validates&amp;nbsp;that&amp;nbsp;the&amp;nbsp;active&amp;nbsp;configuration&amp;nbsp;file&amp;nbsp;has&amp;nbsp;a&amp;nbsp;valid&amp;nbsp;syntax&amp;nbsp;to&amp;nbsp;run&amp;nbsp;the&amp;nbsp;service.&amp;nbsp; Change&amp;nbsp;the&amp;nbsp;configuration&amp;nbsp;file&amp;nbsp;by&amp;nbsp;using&amp;nbsp;the&amp;nbsp;--config&amp;nbsp;flag&amp;nbsp; &amp;nbsp; Usage:&amp;nbsp; &amp;nbsp;&amp;nbsp;krakend&amp;nbsp;check&amp;nbsp;[flags]&amp;nbsp; &amp;nbsp; Aliases:&amp;nbsp; &amp;nbsp;&amp;nbsp;check,&amp;nbsp;validate&amp;nbsp; &amp;nbsp; Examples:&amp;nbsp; krakend&amp;nbsp;check&amp;nbsp;-d&amp;nbsp;-c&amp;nbsp;config.json&amp;nbsp; &amp;nbsp; Flags:&amp;nbsp; &amp;nbsp;&amp;nbsp;-h,&amp;nbsp;--help&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;help&amp;nbsp;for&amp;nbsp;check&amp;nbsp; &amp;nbsp;&amp;nbsp;-t,&amp;nbsp;--test-gin-routes&amp;nbsp;&amp;nbsp;&amp;nbsp;Test&amp;nbsp;the&amp;nbsp;endpoint&amp;nbsp;patterns&amp;nbsp;against&amp;nbsp;a&amp;nbsp;real&amp;nbsp;gin&amp;nbsp;router&amp;nbsp;on&amp;nbsp;selected&amp;nbsp;port&amp;nbsp; &amp;nbsp; Global&amp;nbsp;Flags:&amp;nbsp; &amp;nbsp;&amp;nbsp;-c,&amp;nbsp;--config&amp;nbsp;string&amp;nbsp;&amp;nbsp;&amp;nbsp;Path&amp;nbsp;to&amp;nbsp;the&amp;nbsp;configuration&amp;nbsp;filename&amp;nbsp; &amp;nbsp;&amp;nbsp;-d,&amp;nbsp;--debug&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Enable&amp;nbsp;the&amp;nbsp;debug&amp;nbsp; Passing a path to the config file is required</description></item><item><title>Commands - check</title><link>https://www.krakend.io/docs/v1.4/commands/check/</link><pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/commands/check/</guid><description>The krakend check command validates the passed configuration. Since KrakenD does not implement a strict parsing, typos in the config file could be shadowed. In order to validate your config completely, it is recommended to use the --debug flag.
Usage of KrakenD check&amp;nbsp; $./krakend&amp;nbsp;check&amp;nbsp;-h&amp;nbsp; &amp;nbsp; `7MMF'&amp;nbsp;`YMM'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`7MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`7MM"""Yb.&amp;nbsp; &amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;.M'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`Yb.&amp;nbsp; &amp;nbsp;&amp;nbsp;MM&amp;nbsp;.d"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`7Mb,od8&amp;nbsp;,6"Yb.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;,MP'.gP"Ya&amp;nbsp;`7MMpMMMb.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`Mb&amp;nbsp; &amp;nbsp;&amp;nbsp;MMMMM.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM'&amp;nbsp;"'8)&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;;Y&amp;nbsp;&amp;nbsp;,M'&amp;nbsp;&amp;nbsp;&amp;nbsp;Yb&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp; &amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;VMA&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,pm9MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM;Mm&amp;nbsp;&amp;nbsp;8M""""""&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,MP&amp;nbsp; &amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;`MM.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;8M&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;`Mb.YM.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,dP'&amp;nbsp; .JMML.&amp;nbsp;&amp;nbsp;&amp;nbsp;MMb..JMML.&amp;nbsp;&amp;nbsp;`Moo9^Yo..JMML.&amp;nbsp;YA.`Mbmmd'.JMML&amp;nbsp;&amp;nbsp;JMML..JMMmmmdP'&amp;nbsp; _______________________________________________________________________&amp;nbsp; &amp;nbsp; Version:&amp;nbsp;1.4.1&amp;nbsp; &amp;nbsp; Validates&amp;nbsp;that&amp;nbsp;the&amp;nbsp;active&amp;nbsp;configuration&amp;nbsp;file&amp;nbsp;has&amp;nbsp;a&amp;nbsp;valid&amp;nbsp;syntax&amp;nbsp;to&amp;nbsp;run&amp;nbsp;the&amp;nbsp;service.&amp;nbsp; Change&amp;nbsp;the&amp;nbsp;configuration&amp;nbsp;file&amp;nbsp;by&amp;nbsp;using&amp;nbsp;the&amp;nbsp;--config&amp;nbsp;flag&amp;nbsp; &amp;nbsp; Usage:&amp;nbsp; &amp;nbsp;&amp;nbsp;krakend&amp;nbsp;check&amp;nbsp;[flags]&amp;nbsp; &amp;nbsp; Aliases:&amp;nbsp; &amp;nbsp;&amp;nbsp;check,&amp;nbsp;validate&amp;nbsp; &amp;nbsp; Examples:&amp;nbsp; krakend&amp;nbsp;check&amp;nbsp;-d&amp;nbsp;-c&amp;nbsp;config.json&amp;nbsp; &amp;nbsp; Flags:&amp;nbsp; &amp;nbsp;&amp;nbsp;-h,&amp;nbsp;--help&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;help&amp;nbsp;for&amp;nbsp;check&amp;nbsp; &amp;nbsp;&amp;nbsp;-t,&amp;nbsp;--test-gin-routes&amp;nbsp;&amp;nbsp;&amp;nbsp;Test&amp;nbsp;the&amp;nbsp;endpoint&amp;nbsp;patterns&amp;nbsp;against&amp;nbsp;a&amp;nbsp;real&amp;nbsp;gin&amp;nbsp;router&amp;nbsp;on&amp;nbsp;selected&amp;nbsp;port&amp;nbsp; &amp;nbsp; Global&amp;nbsp;Flags:&amp;nbsp; &amp;nbsp;&amp;nbsp;-c,&amp;nbsp;--config&amp;nbsp;string&amp;nbsp;&amp;nbsp;&amp;nbsp;Path&amp;nbsp;to&amp;nbsp;the&amp;nbsp;configuration&amp;nbsp;filename&amp;nbsp; &amp;nbsp;&amp;nbsp;-d,&amp;nbsp;--debug&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Enable&amp;nbsp;the&amp;nbsp;debug&amp;nbsp; Passing a path to the config file is required</description></item><item><title>Comparison of KrakenD vs other products in the market (Benchmark)</title><link>https://www.krakend.io/docs/benchmarks/api-gateway-benchmark/</link><pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/benchmarks/api-gateway-benchmark/</guid><description>We wanted to compare our own product with other similar products in the market. In order to do so we used the same environment and conditions and tested the following products:
Kong Vulcand Tyk KrakenD For the benchmarks, we based the tests on the benchmarking project varnish/api-gateway-benchmarks.
At the time of writing, KrakenD does not support auth features, so we just did the benchmark with test01
Hardware hardware specs&amp;nbsp; $Model&amp;nbsp;MacBook&amp;nbsp;Pro&amp;nbsp;(MacBookPro11,4)&amp;nbsp;-&amp;nbsp;August&amp;nbsp;2015&amp;nbsp; Processor:&amp;nbsp;Intel&amp;nbsp;Core&amp;nbsp;i7&amp;nbsp;2,2&amp;nbsp;GHz&amp;nbsp; Setup For this test, we stored this configuration at krakend.</description></item><item><title>Comparison of KrakenD vs other products in the market (Benchmark)</title><link>https://www.krakend.io/docs/enterprise/benchmarks/api-gateway-benchmark/</link><pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/benchmarks/api-gateway-benchmark/</guid><description>We wanted to compare our own product with other similar products in the market. In order to do so we used the same environment and conditions and tested the following products:
Kong Vulcand Tyk KrakenD For the benchmarks, we based the tests on the benchmarking project varnish/api-gateway-benchmarks.
At the time of writing, KrakenD does not support auth features, so we just did the benchmark with test01
Hardware Model MacBook Pro (MacBookPro11,4) - August 2015 Processor: Intel Core i7 2,2 GHz Setup For this test, we stored this configuration at krakend.</description></item><item><title>Comparison of KrakenD vs other products in the market (Benchmark)</title><link>https://www.krakend.io/docs/v1.3/benchmarks/api-gateway-benchmark/</link><pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/benchmarks/api-gateway-benchmark/</guid><description>We wanted to compare our own product with other similar products in the market. In order to do so we used the same environment and conditions and tested the following products:
Kong Vulcand Tyk KrakenD For the benchmarks, we based the tests on the benchmarking project varnish/api-gateway-benchmarks.
At the time of writing, KrakenD does not support auth features, so we just did the benchmark with test01
Hardware Model MacBook Pro (MacBookPro11,4) - August 2015 Processor: Intel Core i7 2,2 GHz Setup For this test, we stored this configuration at krakend.</description></item><item><title>Comparison of KrakenD vs other products in the market (Benchmark)</title><link>https://www.krakend.io/docs/v1.4/benchmarks/api-gateway-benchmark/</link><pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/benchmarks/api-gateway-benchmark/</guid><description>We wanted to compare our own product with other similar products in the market. In order to do so we used the same environment and conditions and tested the following products:
Kong Vulcand Tyk KrakenD For the benchmarks, we based the tests on the benchmarking project varnish/api-gateway-benchmarks.
At the time of writing, KrakenD does not support auth features, so we just did the benchmark with test01
Hardware Model MacBook Pro (MacBookPro11,4) - August 2015 Processor: Intel Core i7 2,2 GHz Setup For this test, we stored this configuration at krakend.</description></item><item><title>KrakenD Benchmarks on AWS</title><link>https://www.krakend.io/docs/benchmarks/aws/</link><pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/benchmarks/aws/</guid><description>The following numbers show the execution results for the KrakenD benchmarks on Amazon EC2 machines.
Benchmark Setup This set of benchmarks have been running on different AWS EC2 instances. Each individual test consists of spinning up 3 different machines, being:
A web server: A LWAN web server using an instance c4.xlarge. This is the &amp;ldquo;fake API&amp;rdquo; where KrakenD will take the data The HTTP load generator: The machine actually running the load test.</description></item><item><title>KrakenD Benchmarks on AWS</title><link>https://www.krakend.io/docs/enterprise/benchmarks/aws/</link><pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/benchmarks/aws/</guid><description>The following numbers show the execution results for the KrakenD benchmarks on Amazon EC2 machines.
Benchmark Setup This set of benchmarks have been running on different AWS EC2 instances. Each individual test consists of spinning up 3 different machines, being:
A web server: A LWAN web server using an instance c4.xlarge. This is the &amp;ldquo;fake API&amp;rdquo; where KrakenD will take the data The HTTP load generator: The machine actually running the load test.</description></item><item><title>KrakenD Benchmarks on AWS</title><link>https://www.krakend.io/docs/v1.3/benchmarks/aws/</link><pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/benchmarks/aws/</guid><description>The following numbers show the execution results for the KrakenD benchmarks on Amazon EC2 machines.
Benchmark Setup This set of benchmarks have been running on different AWS EC2 instances. Each individual test consists of spinning up 3 different machines, being:
A web server: A LWAN web server using an instance c4.xlarge. This is the &amp;ldquo;fake API&amp;rdquo; where KrakenD will take the data The HTTP load generator: The machine actually running the load test.</description></item><item><title>KrakenD Benchmarks on AWS</title><link>https://www.krakend.io/docs/v1.4/benchmarks/aws/</link><pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/benchmarks/aws/</guid><description>The following numbers show the execution results for the KrakenD benchmarks on Amazon EC2 machines.
Benchmark Setup This set of benchmarks have been running on different AWS EC2 instances. Each individual test consists of spinning up 3 different machines, being:
A web server: A LWAN web server using an instance c4.xlarge. This is the &amp;ldquo;fake API&amp;rdquo; where KrakenD will take the data The HTTP load generator: The machine actually running the load test.</description></item><item><title>Data manipulation</title><link>https://www.krakend.io/docs/backends/data-manipulation/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/backends/data-manipulation/</guid><description>This page describes the most basic options to manipulate the content you receive from the backend before delivering it to the client.
Filtering When you offer a KrakenD endpoint, you can decide whether to return all the fields from the backend (default behavior) or specify which ones are allowed through an allow or deny list. You might want to use this functionality for many different reasons. Still, we strongly encourage you to consider using it frequently to save the user&amp;rsquo;s bandwidth, provide the client what is needed, and decrease the load and render times.</description></item><item><title>Data manipulation</title><link>https://www.krakend.io/docs/enterprise/backends/data-manipulation/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/backends/data-manipulation/</guid><description>This page describes the most basic options to manipulate the content you receive from the backend before delivering it to the client.
Filtering When you offer a KrakenD endpoint, you can decide whether to return all the fields from the backend (default behavior) or specify which ones are allowed through an allow or deny list. You might want to use this functionality for many different reasons. Still, we strongly encourage you to consider using it frequently to save the user&amp;rsquo;s bandwidth, provide the client what is needed, and decrease the load and render times.</description></item><item><title>Data manipulation</title><link>https://www.krakend.io/docs/v1.3/backends/data-manipulation/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/backends/data-manipulation/</guid><description>This page describes the most basic options to manipulate the content you receive from the backend before delivering it to the client.
Filtering When you offer a KrakenD endpoint, you can decide whether to return all the fields from the backend (default behavior) or specify which ones are allowed through an allow or deny list. You might want to use this functionality for many different reasons. Still, we strongly encourage you to consider using it frequently to save the user&amp;rsquo;s bandwidth, provide the client what is needed, and decrease the load and render times.</description></item><item><title>Data manipulation</title><link>https://www.krakend.io/docs/v1.4/backends/data-manipulation/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/backends/data-manipulation/</guid><description>This page describes the most basic options to manipulate the content you receive from the backend before delivering it to the client.
Filtering When you offer a KrakenD endpoint, you can decide whether to return all the fields from the backend (default behavior) or specify which ones are allowed through an allow or deny list. You might want to use this functionality for many different reasons. Still, we strongly encourage you to consider using it frequently to save the user&amp;rsquo;s bandwidth, provide the client what is needed, and decrease the load and render times.</description></item><item><title>SD with DNS SRV (e.g., Consul, k8s)</title><link>https://www.krakend.io/docs/enterprise/service-discovery/dns-srv/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/service-discovery/dns-srv/</guid><description>The DNS SRV is a market standard used by systems such as Kubernetes, Mesos, Haproxy, Nginx plus, AWS ECS, Linkerd, and more.
To integrate Consul as the Service Discovery or any other DNS SRV compatible systems you only need to set two keys:
&amp;quot;sd&amp;quot;: &amp;quot;dns&amp;quot;: To set service discovery = DNS SRV &amp;quot;host&amp;quot;: []: The list of all the names providing the resolution These keys need to be added in the backend section of your configuration.</description></item><item><title>SD with DNS SRV (e.g., Consul, k8s)</title><link>https://www.krakend.io/docs/v1.3/service-discovery/dns-srv/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/service-discovery/dns-srv/</guid><description>The DNS SRV is a market standard used by systems such as Kubernetes, Mesos, Haproxy, Nginx plus, AWS ECS, Linkerd, and more.
To integrate Consul as the Service Discovery or any other DNS SRV compatible systems you only need to set two keys:
&amp;quot;sd&amp;quot;: &amp;quot;dns&amp;quot;: To set service discovery = DNS SRV &amp;quot;host&amp;quot;: []: The list of all the names providing the resolution These keys need to be added in the backend section of your configuration.</description></item><item><title>Response manipulation</title><link>https://www.krakend.io/docs/endpoints/response-manipulation/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/endpoints/response-manipulation/</guid><description>KrakenD allows you to perform several manipulations of the responses out of the box, just by adding them to the configuration file. You can also add your own or 3rd parties middlewares to extend this behavior.
KrakenD manipulations are measured in nanoseconds, you can find the benchmark for every response manipulation in the benchmarks
The following manipulations are available by default:
Merging When you create KrakenD endpoints, if a specific endpoint feeds from 2 or more backend sources (APIs), they will be automatically merged in a single response to the client.</description></item><item><title>Response manipulation</title><link>https://www.krakend.io/docs/enterprise/endpoints/response-manipulation/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/endpoints/response-manipulation/</guid><description>KrakenD allows you to perform several manipulations of the responses out of the box, just by adding them to the configuration file. You can also add your own or 3rd parties middlewares to extend this behavior.
KrakenD manipulations are measured in nanoseconds, you can find the benchmark for every response manipulation in the benchmarks
The following manipulations are available by default:
Merging When you create KrakenD endpoints, if a specific endpoint feeds from 2 or more backend sources (APIs), they will be automatically merged in a single response to the client.</description></item><item><title>Response manipulation</title><link>https://www.krakend.io/docs/v1.3/endpoints/response-manipulation/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/endpoints/response-manipulation/</guid><description>KrakenD allows you to perform several manipulations of the responses out of the box, just by adding them to the configuration file. You can also add your own or 3rd parties middlewares to extend this behavior.
KrakenD manipulations are measured in nanoseconds, you can find the benchmark for every response manipulation in the benchmarks
The following manipulations are available by default:
Merging When you create KrakenD endpoints, if a specific endpoint feeds from 2 or more backend sources (APIs), they will be automatically merged in a single response to the client.</description></item><item><title>Response manipulation</title><link>https://www.krakend.io/docs/v1.4/endpoints/response-manipulation/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/endpoints/response-manipulation/</guid><description>KrakenD allows you to perform several manipulations of the responses out of the box, just by adding them to the configuration file. You can also add your own or 3rd parties middlewares to extend this behavior.
KrakenD manipulations are measured in nanoseconds, you can find the benchmark for every response manipulation in the benchmarks
The following manipulations are available by default:
Merging When you create KrakenD endpoints, if a specific endpoint feeds from 2 or more backend sources (APIs), they will be automatically merged in a single response to the client.</description></item><item><title>Service Discovery</title><link>https://www.krakend.io/docs/backends/service-discovery/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/backends/service-discovery/</guid><description>Service discovery (sd) is an attribute in the backend section that enables KrakenD to detect and locate services automatically on your enterprise network.
The chosen service discovery strategy determines how to retrieve (statically or dynamically) the final list of IPs, hostnames, or services pointing to your backends. If your host list is dynamic, you can use an external service discovery provider and let KrakenD interact with it to get the hosts.</description></item><item><title>Router Rate-limiting</title><link>https://www.krakend.io/docs/endpoints/rate-limit/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/endpoints/rate-limit/</guid><description>The router rate limit feature allows you to set a number of maximum requests per second a KrakenD endpoint will accept. There are two different strategies to set limits that you can use separately or together:
Endpoint rate-limiting: applies simultaneously to all your customers using the endpoint, sharing the same counter. User rate-limiting: applies to an individual user. Both types keep in-memory an updated counter with the number of requests processed per second in that endpoint.</description></item><item><title>Endpoint rate limiting</title><link>https://www.krakend.io/docs/enterprise/endpoints/rate-limit/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/endpoints/rate-limit/</guid><description>Limiting endpoints is the responsibility of the router rate and allows you to set the number of maximum requests per second a KrakenD endpoint will accept. By default, there is no limitation on the number of requests an endpoint can handle.
To specify a rate limit, you need to add the configuration in the desired endpoint.
At the router level, you can set the rate limit for endpoints based on:</description></item><item><title>Endpoint rate limiting</title><link>https://www.krakend.io/docs/v1.3/endpoints/rate-limit/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/endpoints/rate-limit/</guid><description>Limiting endpoints is the responsibility of the router rate and allows you to set the number of maximum requests per second a KrakenD endpoint will accept. By default, there is no limitation on the number of requests an endpoint can handle.
To specify a rate limit, you need to add the configuration in the desired endpoint.
At the router level, you can set the rate limit for endpoints based on:</description></item><item><title>Endpoint rate limiting</title><link>https://www.krakend.io/docs/v1.4/endpoints/rate-limit/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/endpoints/rate-limit/</guid><description>Limiting endpoints is the responsibility of the router rate and allows you to set the number of maximum requests per second a KrakenD endpoint will accept. By default, there is no limitation on the number of requests an endpoint can handle.
To specify a rate limit, you need to add the configuration in the desired endpoint.
At the router level, you can set the rate limit for endpoints based on:</description></item><item><title>Understanding the Token Bucket algorithm</title><link>https://www.krakend.io/docs/throttling/token-bucket/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/throttling/token-bucket/</guid><description>The Token Bucket algorithm helps you to allow or deny requests depending on the levels of traffic you are having. The algorithm is used to offer functionalities like the Spike Arrest and the several Rate Limiting options.
A quick analogy&amp;hellip; If you ever went to a travelling carnival, funfair, or amusement park, to get into the attractions, you probably exchanged money for tokens/tickets at the ticket booth. The tokens help the operator of the carousel, bumper cars, or chance games stand, to collect the payment faster and know who can jump in and who doesn&amp;rsquo;t.</description></item><item><title>Global rate limit (stateful)</title><link>https://www.krakend.io/docs/enterprise/endpoints/global-rate-limit/</link><pubDate>Tue, 03 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/endpoints/global-rate-limit/</guid><description>The global rate limit functionality enables a Redis database store to centralize all KrakenD node counters. Instead of having each KrakenD node count its hits, the counters are global and stored in the database.
Default rate limit (stateless) vs. Global rate limit (stateful) It&amp;rsquo;s essential to understand the differences between these two antagonistic approaches, so let&amp;rsquo;s put an example.
Let&amp;rsquo;s say you have four different KrakenD nodes running in a cluster, and you want to limit a specific set of users to 100 requests per second.</description></item><item><title>Local Benchmarks</title><link>https://www.krakend.io/docs/benchmarks/local/</link><pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/benchmarks/local/</guid><description>Hardware Model MacBook Pro (MacBookPro11,4) - August 2015 Processor: Intel Core i7 2,2 GHz Setup For this test, we stored this configuration at krakend.json
{ &amp;quot;version&amp;quot;: 1, &amp;quot;endpoints&amp;quot;: [ { &amp;quot;endpoint&amp;quot;: &amp;quot;/foo&amp;quot;, &amp;quot;method&amp;quot;: &amp;quot;GET&amp;quot;, &amp;quot;backend&amp;quot;: [ { &amp;quot;url_pattern&amp;quot;: &amp;quot;/__debug/bar&amp;quot;, &amp;quot;host&amp;quot;: [ &amp;quot;http://127.0.0.1:8080&amp;quot; ] } ], &amp;quot;concurrent_calls&amp;quot;: &amp;quot;1&amp;quot;, &amp;quot;max_rate&amp;quot;: 100000 } ], &amp;quot;oauth&amp;quot;: { &amp;quot;disable&amp;quot;: true }, &amp;quot;cache_ttl&amp;quot;: &amp;quot;5m&amp;quot;, &amp;quot;timeout&amp;quot;: &amp;quot;5s&amp;quot; } And we started the KrakenD with this cmd:</description></item><item><title>Local Benchmarks</title><link>https://www.krakend.io/docs/enterprise/benchmarks/local/</link><pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/benchmarks/local/</guid><description>Hardware Model MacBook Pro (MacBookPro11,4) - August 2015 Processor: Intel Core i7 2,2 GHz Setup For this test, we stored this configuration at krakend.json
{ &amp;quot;version&amp;quot;: 1, &amp;quot;endpoints&amp;quot;: [ { &amp;quot;endpoint&amp;quot;: &amp;quot;/foo&amp;quot;, &amp;quot;method&amp;quot;: &amp;quot;GET&amp;quot;, &amp;quot;backend&amp;quot;: [ { &amp;quot;url_pattern&amp;quot;: &amp;quot;/__debug/bar&amp;quot;, &amp;quot;host&amp;quot;: [ &amp;quot;http://127.0.0.1:8080&amp;quot; ] } ], &amp;quot;concurrent_calls&amp;quot;: &amp;quot;1&amp;quot;, &amp;quot;max_rate&amp;quot;: 100000 } ], &amp;quot;oauth&amp;quot;: { &amp;quot;disable&amp;quot;: true }, &amp;quot;cache_ttl&amp;quot;: &amp;quot;5m&amp;quot;, &amp;quot;timeout&amp;quot;: &amp;quot;5s&amp;quot; } And we started the KrakenD with this cmd:</description></item><item><title>Local Benchmarks</title><link>https://www.krakend.io/docs/v1.3/benchmarks/local/</link><pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/benchmarks/local/</guid><description>Hardware Model MacBook Pro (MacBookPro11,4) - August 2015 Processor: Intel Core i7 2,2 GHz Setup For this test, we stored this configuration at krakend.json
{ &amp;quot;version&amp;quot;: 1, &amp;quot;endpoints&amp;quot;: [ { &amp;quot;endpoint&amp;quot;: &amp;quot;/foo&amp;quot;, &amp;quot;method&amp;quot;: &amp;quot;GET&amp;quot;, &amp;quot;backend&amp;quot;: [ { &amp;quot;url_pattern&amp;quot;: &amp;quot;/__debug/bar&amp;quot;, &amp;quot;host&amp;quot;: [ &amp;quot;http://127.0.0.1:8080&amp;quot; ] } ], &amp;quot;concurrent_calls&amp;quot;: &amp;quot;1&amp;quot;, &amp;quot;max_rate&amp;quot;: 100000 } ], &amp;quot;oauth&amp;quot;: { &amp;quot;disable&amp;quot;: true }, &amp;quot;cache_ttl&amp;quot;: &amp;quot;5m&amp;quot;, &amp;quot;timeout&amp;quot;: &amp;quot;5s&amp;quot; } And we started the KrakenD with this cmd:</description></item><item><title>Local Benchmarks</title><link>https://www.krakend.io/docs/v1.4/benchmarks/local/</link><pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/benchmarks/local/</guid><description>Hardware Model MacBook Pro (MacBookPro11,4) - August 2015 Processor: Intel Core i7 2,2 GHz Setup For this test, we stored this configuration at krakend.json
{ &amp;quot;version&amp;quot;: 1, &amp;quot;endpoints&amp;quot;: [ { &amp;quot;endpoint&amp;quot;: &amp;quot;/foo&amp;quot;, &amp;quot;method&amp;quot;: &amp;quot;GET&amp;quot;, &amp;quot;backend&amp;quot;: [ { &amp;quot;url_pattern&amp;quot;: &amp;quot;/__debug/bar&amp;quot;, &amp;quot;host&amp;quot;: [ &amp;quot;http://127.0.0.1:8080&amp;quot; ] } ], &amp;quot;concurrent_calls&amp;quot;: &amp;quot;1&amp;quot;, &amp;quot;max_rate&amp;quot;: 100000 } ], &amp;quot;oauth&amp;quot;: { &amp;quot;disable&amp;quot;: true }, &amp;quot;cache_ttl&amp;quot;: &amp;quot;5m&amp;quot;, &amp;quot;timeout&amp;quot;: &amp;quot;5s&amp;quot; } And we started the KrakenD with this cmd:</description></item><item><title>Spike Arrest and Burst</title><link>https://www.krakend.io/docs/throttling/spike-arrest/</link><pubDate>Fri, 28 Jan 2022 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/throttling/spike-arrest/</guid><description>The Spike Arrest policy ensures a minimum time between different requests. KrakenD will enable Spike Arrest after exhausting the burst capacity of the rate-limiting features.
Bursting control The bursting control is the policy that defines what to do when you reach the throttling capacity of the system within a second.
When users consume content with rate-limiting enabled, the capacity of the rate limit defines the bursting they can have. Bursting makes users have a relatively higher number of requests for a short time.</description></item><item><title>AMQP driver for Async Agent</title><link>https://www.krakend.io/docs/async/amqp/</link><pubDate>Fri, 21 Jan 2022 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/async/amqp/</guid><description>The AMQP driver for Async agents allows you to have KrakenD consuming AMQP queues autonomously. Routines listening to AMQP queues will react by themselves to new events and push data to your backends.
This driver is different from the AMQP backend consumer. As opposed to endpoints, async agents do not require users to request something to trigger an action. Instead, the agents connect to the queue and fire an action when an event is delivered.</description></item><item><title>Automated KrakenD deployments with CI/CD</title><link>https://www.krakend.io/docs/deploying/ci-cd/</link><pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/deploying/ci-cd/</guid><description>KrakenD operates with its single binary and your associated configuration. Therefore, your build process or CI/CD pipeline only needs to ensure that the configuration file is correct. These are a few recommendations to a safes KrakenD deployment:
Make sure the configuration file is valid. When using Flexible Configuration, generate the final krakend.json using FC_OUT as the final artifact Optional - Generate an immutable docker image Optional - Run integration tests Deploy the new configuration There are several ways to automate KrakenD deployments, but you must always test your configuration before applying it in production.</description></item><item><title>Generating a Docker artifact</title><link>https://www.krakend.io/docs/deploying/docker/</link><pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/deploying/docker/</guid><description>If you use containers, the recommended approach is to write your own Dockerfile and deploy an immutable artifact (embedding the config).
In its simplified form would be: FROMdevopsfaith/krakendCOPY krakend.json /etc/krakend/krakend.json
Volume or copy? Even though you can use the official container directly and attach the configuration mounting an external volume (or ConfigMap in Kubernetes), a custom image with your configuration copied inside has benefits. It guarantees that you can do safe rollbacks and have effective testing and debugging.</description></item><item><title>HTTP Client plugins (proxy layer)</title><link>https://www.krakend.io/docs/extending/http-client-plugins/</link><pubDate>Fri, 21 May 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/extending/http-client-plugins/</guid><description>The HTTP client plugins execute in the proxy layer, this is when KrakenD tries to reach your backends for content. They allow you to intercept, transform, and manipulate the requests before they hit your backend services, and its way back. It is the perfect time to modify the request before it reaches the backend.
HTTP client plugins cannot be chained. You can use up to one plugin per backend connection.</description></item><item><title>Native InfluxDB exporter</title><link>https://www.krakend.io/docs/telemetry/influxdb-native/</link><pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/telemetry/influxdb-native/</guid><description>KrakenD can expose very detailed metrics to provide a monitoring dashboard. One of the richest monitoring solutions at the metrics level is the combination of krakend-metrics with the native krakend-influx exporter. The two components let you send detailed metrics to InfluxDB and draw them later on our preconfigured Grafana dashboard can feed from here and provide you a useful.
Notice that there are two different implementations of InfluxDB in KrakenD:</description></item><item><title>Native InfluxDB exporter</title><link>https://www.krakend.io/docs/enterprise/extended-metrics/influxdb/</link><pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/extended-metrics/influxdb/</guid><description>KrakenD can expose detailed and extended metrics via the krakend-metrics). The krakend-influx component lets you send these extended KrakenD metrics to InfluxDB.
Notice that there are two different implementations of InfluxDB in KrakenD:
Native InfluxDB exporter (this page) OpenCensus InfluxDB exporter Which InfluxDB implementation should I choose? The native implementation exports data from a collector that is tailor-made for KrakenD, and also richer in content and less abstract.</description></item><item><title>Native InfluxDB exporter</title><link>https://www.krakend.io/docs/v1.3/extended-metrics/influxdb/</link><pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/extended-metrics/influxdb/</guid><description>KrakenD can expose detailed and extended metrics via the krakend-metrics). The krakend-influx component lets you send these extended KrakenD metrics to InfluxDB.
Notice that there are two different implementations of InfluxDB in KrakenD:
Native InfluxDB exporter (this page) OpenCensus InfluxDB exporter Which InfluxDB implementation should I choose? The native implementation exports data from a collector that is tailor-made for KrakenD, and also richer in content and less abstract.</description></item><item><title>Native InfluxDB exporter</title><link>https://www.krakend.io/docs/v1.4/extended-metrics/influxdb/</link><pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/extended-metrics/influxdb/</guid><description>KrakenD can expose detailed and extended metrics via the krakend-metrics). The krakend-influx component lets you send these extended KrakenD metrics to InfluxDB.
Notice that there are two different implementations of InfluxDB in KrakenD:
Native InfluxDB exporter (this page) OpenCensus InfluxDB exporter Which InfluxDB implementation should I choose? The native implementation exports data from a collector that is tailor-made for KrakenD, and also richer in content and less abstract.</description></item><item><title>Preconfigured Grafana dashboard</title><link>https://www.krakend.io/docs/telemetry/grafana/</link><pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/telemetry/grafana/</guid><description>The preconfigured Grafana dashboard for KrakenD offers valuable information to understand the performance of your services and detect anomalies in the service.
The dashboard is extensive and offers you metrics like:
Requests from users to KrakenD Requests from KrakenD to your backends Response times Memory usage and details Endpoints and status codes Heatmaps Open connections Throughput Distributions, timers, garbage collection and a long etcetera Configure Grafana Add the following configuration to your krakend.</description></item><item><title>Enabling Cross Origin Resource Sharing (CORS)</title><link>https://www.krakend.io/docs/enterprise/service-settings/cors/</link><pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/service-settings/cors/</guid><description>When KrakenD endpoints are consumed from a browser, you might need to enable the Cross-Origin Resource Sharing (CORS) module as browsers restrict cross-origin HTTP requests initiated from scripts.
When the Cross-Origin Resource Sharing (CORS) configuration is enabled, KrakenD uses additional HTTP headers to tell browsers that they can use resources from a different origin (domain, protocol, or port). For instance, you will need this configuration if your web page is hosted at https://domain-a.</description></item><item><title>Enabling Cross Origin Resource Sharing (CORS)</title><link>https://www.krakend.io/docs/service-settings/cors/</link><pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/service-settings/cors/</guid><description>When KrakenD endpoints are consumed from a browser, you might need to enable the Cross-Origin Resource Sharing (CORS) module as browsers restrict cross-origin HTTP requests initiated from scripts.
When the Cross-Origin Resource Sharing (CORS) configuration is enabled, KrakenD uses additional HTTP headers to tell browsers that they can use resources from a different origin (domain, protocol, or port). For instance, you will need this configuration if your web page is hosted at https://www.</description></item><item><title>Enabling Cross Origin Resource Sharing (CORS)</title><link>https://www.krakend.io/docs/v1.3/service-settings/cors/</link><pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/service-settings/cors/</guid><description>When KrakenD endpoints are consumed from a browser, you might need to enable the Cross-Origin Resource Sharing (CORS) module as browsers restrict cross-origin HTTP requests initiated from scripts.
When the Cross-Origin Resource Sharing (CORS) configuration is enabled, KrakenD uses additional HTTP headers to tell browsers that they can use resources from a different origin (domain, protocol, or port). For instance, you will need this configuration if your web page is hosted at https://domain-a.</description></item><item><title>Enabling Cross Origin Resource Sharing (CORS)</title><link>https://www.krakend.io/docs/v1.4/service-settings/cors/</link><pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/service-settings/cors/</guid><description>When KrakenD endpoints are consumed from a browser, you might need to enable the Cross-Origin Resource Sharing (CORS) module as browsers restrict cross-origin HTTP requests initiated from scripts.
When the Cross-Origin Resource Sharing (CORS) configuration is enabled, KrakenD uses additional HTTP headers to tell browsers that they can use resources from a different origin (domain, protocol, or port). For instance, you will need this configuration if your web page is hosted at https://www.</description></item><item><title>Installing KrakenD Enterprise</title><link>https://www.krakend.io/docs/enterprise/overview/installing/</link><pubDate>Sun, 02 Feb 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/overview/installing/</guid><description>KrakenD Enterprise is delivered in several formats, including Docker, Linux packages (deb, rpm) and generic installation options.
Find your KrakenD License email To download any Enterprise binaries, check your inbox and find our license activation email with the certificates to access the Enterprise content. Docker If you are already familiar with Docker, the easiest way to get started is by pulling our KrakenD image from Azure or AWS.</description></item><item><title>Plugin and dependencies validator</title><link>https://www.krakend.io/docs/enterprise/extending/plugin-tools/</link><pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/extending/plugin-tools/</guid><description>The plugin validator is an online tool that allows you to find problems with your plugin dependencies. Go plugins are strict on which versions of libraries you can use, so it&amp;rsquo;s important to make sure that your dependencies are compatible with the selected KrakenD versions.
Access the online plugin validation tools The plugin validator checks your go.sum file to find problems and reports all associated problems. From which Go version is supported, to which individual libraries will conflict during runtime.</description></item><item><title>Plugin and dependencies validator</title><link>https://www.krakend.io/docs/v1.3/extending/plugin-tools/</link><pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/extending/plugin-tools/</guid><description>The plugin validator is an online tool that allows you to find problems with your plugin dependencies. Go plugins are strict on which versions of libraries you can use, so it&amp;rsquo;s important to make sure that your dependencies are compatible with the selected KrakenD versions.
Access the online plugin validation tools The plugin validator checks your go.sum file to find problems and reports all associated problems. From which Go version is supported, to which individual libraries will conflict during runtime.</description></item><item><title>Plugin and dependencies validator</title><link>https://www.krakend.io/docs/v1.4/extending/plugin-tools/</link><pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/extending/plugin-tools/</guid><description>The plugin validator is an online tool that allows you to find problems with your plugin dependencies. Go plugins are strict on which versions of libraries you can use, so it&amp;rsquo;s important to make sure that your dependencies are compatible with the selected KrakenD versions.
Access the online plugin validation tools The plugin validator checks your go.sum file to find problems and reports all associated problems. From which Go version is supported, to which individual libraries will conflict during runtime.</description></item><item><title>JSON Web Token Validation</title><link>https://www.krakend.io/docs/authorization/jwt-validation/</link><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/authorization/jwt-validation/</guid><description>Protect endpoints from public usage by validating JWT tokens generated by any industry-standard OpenID Connect (OIDC) integration.
Before digging any further, some answers to frequently asked questions:
KrakenD does not generate the tokens itself. Still, you can plug it into any SaaS or self-hosted OpenID Identity Provider (IdP) using industry standards (e.g., Auth0, Azure AD, Google Firebase, Keycloak, etc.)
KrakenD does not need to validate all calls using your IdP.</description></item><item><title>JWT Validation</title><link>https://www.krakend.io/docs/enterprise/authorization/jwt-validation/</link><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/authorization/jwt-validation/</guid><description>The component krakend-jose is responsible for the JWT validation and protects endpoints from public usage, requiring end-users to provide a valid token to access its contents.
Before digging any further, some answers to frequently asked questions:
KrakenD does not generate the tokens itself. Still, you can plug it into any SaaS or self-hosted Identity Provider (IdP) using industry standards (e.g.: Auth0, Azure AD, Google Firebase, Keycloak, etc.)
KrakenD does not need to validate all calls using your IdP.</description></item><item><title>JWT Validation</title><link>https://www.krakend.io/docs/v1.3/authorization/jwt-validation/</link><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/authorization/jwt-validation/</guid><description>The component krakend-jose is responsible for the JWT validation and protects endpoints from public usage, requiring end-users to provide a valid token to access its contents.
Before digging any further, some answers to frequently asked questions:
KrakenD does not generate the tokens itself. Still, you can plug it into any SaaS or self-hosted Identity Provider (IdP) using industry standards (e.g.: Auth0, Azure AD, Google Firebase, Keycloak, etc.)
KrakenD does not need to validate all calls using your IdP.</description></item><item><title>JWT Validation</title><link>https://www.krakend.io/docs/v1.4/authorization/jwt-validation/</link><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/authorization/jwt-validation/</guid><description>Protect endpoints from public usage by validating JWT tokens generated by any industry-standard OpenID Connect (OIDC) integration.
Before digging any further, some answers to frequently asked questions:
KrakenD does not generate the tokens itself. Still, you can plug it into any SaaS or self-hosted OpenID Identity Provider (IdP) using industry standards (e.g.: Auth0, Azure AD, Google Firebase, Keycloak, etc.)
KrakenD does not need to validate all calls using your IdP.</description></item><item><title>Flexible configuration</title><link>https://www.krakend.io/docs/configuration/flexible-config/</link><pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/configuration/flexible-config/</guid><description>The Flexible Configuration component is included in the KrakenD API Gateway and allows you to split the configuration into multiple files while using variables and templates.
The Flexible Configuration enables template processing. It compiles during start-up time. With this, you have the opportunity to produce a more sophisticated configuration file that utilizes variables and brings content from external files.
A template system gives you full flexibility to work with the configuration file.</description></item><item><title>Flexible configuration</title><link>https://www.krakend.io/docs/enterprise/configuration/flexible-config/</link><pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/configuration/flexible-config/</guid><description>The Flexible Configuration component is included in the KrakenD API Gateway and allows you to split the configuration file into several pieces for a more natural organization.
When the Flexible Configuration is enabled, KrakenD assumes that your configuration file is a template that needs compilation during start-up time. With this, you have the opportunity to produce a more sophisticated configuration file that utilizes variables and brings content from external files.</description></item><item><title>Flexible configuration</title><link>https://www.krakend.io/docs/v1.3/configuration/flexible-config/</link><pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/configuration/flexible-config/</guid><description>The Flexible Configuration component is included in the KrakenD API Gateway and allows you to split the configuration file into several pieces for a more natural organization.
When the Flexible Configuration is enabled, KrakenD assumes that your configuration file is a template that needs compilation during start-up time. With this, you have the opportunity to produce a more sophisticated configuration file that utilizes variables and brings content from external files.</description></item><item><title>Flexible configuration</title><link>https://www.krakend.io/docs/v1.4/configuration/flexible-config/</link><pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/configuration/flexible-config/</guid><description>The Flexible Configuration component is included in the KrakenD API Gateway and allows you to split the configuration into multiple files while using variables and templates.
The Flexible Configuration enables template processing. It compiles during start-up time. With this, you have the opportunity to produce a more sophisticated configuration file that utilizes variables and brings content from external files.
A template system gives you full flexibility to work with the configuration file.</description></item><item><title>IDE integration</title><link>https://www.krakend.io/docs/developer/ide-integration/</link><pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/developer/ide-integration/</guid><description>Automatic validation as you type, showing documentation while hovering an attribute, explanation of errors, and autocompletion of properties, are features that you get automatically while working with KrakenD.
For users of Visual Studio Code, Android Studio, JetBrains editors (PHPStorm, PyCharm, GoLand, WebStorm, IntelliJ IDEA&amp;hellip;), Eclipse, and other IDEs that have built-in json schema validation capabilities, there is nothing to install to have these features. Other editors can be used as well, but you will likely need to instal a JSON schema validator.</description></item><item><title>Deploying to Kubernetes</title><link>https://www.krakend.io/docs/enterprise/deploying/kubernetes/</link><pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/deploying/kubernetes/</guid><description>Deploying KrakenD in Kubernetes requires a straightforward configuration.
Create a Dockerfile that includes the configuration of the service. That should be as simple as:
FROM devopsfaith/krakend COPY krakend.json /etc/krakend/krakend.json If you use flexible-configuration you might want to add a previous generation of the krakend.json file using a multi-step Docker.
From here you need to create a NodePort and send all the traffic to KrakenD.
Deployment definition YAML The KrakenD deployment definition, in a file called deployment-definition.</description></item><item><title>Deploying to Kubernetes</title><link>https://www.krakend.io/docs/v1.3/deploying/kubernetes/</link><pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/deploying/kubernetes/</guid><description>Deploying KrakenD in Kubernetes requires a straightforward configuration.
Create a Dockerfile that includes the configuration of the service. That should be as simple as:
FROM devopsfaith/krakend COPY krakend.json /etc/krakend/krakend.json If you use flexible-configuration you might want to add a previous generation of the krakend.json file using a multi-step Docker.
From here you need to create a NodePort and send all the traffic to KrakenD.
Deployment definition YAML The KrakenD deployment definition, in a file called deployment-definition.</description></item><item><title>Deploying to Kubernetes</title><link>https://www.krakend.io/docs/v1.4/deploying/kubernetes/</link><pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/deploying/kubernetes/</guid><description>Deploying KrakenD in Kubernetes requires a straightforward configuration.
Create a Dockerfile that includes the configuration of the service. That should be as simple as:
FROM devopsfaith/krakend COPY krakend.json /etc/krakend/krakend.json If you use flexible-configuration you might want to add a previous generation of the krakend.json file using a multi-step Docker.
From here you need to create a NodePort and send all the traffic to KrakenD.
Deployment definition YAML The KrakenD deployment definition, in a file called deployment-definition.</description></item><item><title>Validating the configuration with `check`</title><link>https://www.krakend.io/docs/configuration/check/</link><pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/configuration/check/</guid><description>The krakend check command validates KrakenD configuration files written in any of its supported formats.
It&amp;rsquo;s able to perform three things:
Syntax validation - For any format (.yml, .json, .toml, etc) Linting - Besides checking that the file isn&amp;rsquo;t malformed, the linter checks your config exhaustively against KrakenD&amp;rsquo;s official schema to detect wrong types, unknown attributes, or misplaced components. Only available when you work with JSON formats. Testing - It tests a run of the service to catch problems that are not strictly related to linting but to the runtime.</description></item><item><title>Service Discovery with etcd (deprecated)</title><link>https://www.krakend.io/docs/enterprise/service-discovery/etcd/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/service-discovery/etcd/</guid><description>Deprecated Since KrakenD 1.3.0 etcd is not longer supported. The documentation is left here for reference. The etcd Service Discovery integration allows you to perform the host resolution using your existing etcd setup.
The integration etcd is controlled by the krakend-etcd component and adds client and subscriber capabilities for etcd.
Enabling etcd To enable the integration add in the root of your configuration file the necessary settings:</description></item><item><title>Service Discovery with etcd (deprecated)</title><link>https://www.krakend.io/docs/v1.3/service-discovery/etcd/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/service-discovery/etcd/</guid><description>Deprecated Since KrakenD 1.3.0 etcd is not longer supported. The documentation is left here for reference. The etcd Service Discovery integration allows you to perform the host resolution using your existing etcd setup.
The integration etcd is controlled by the krakend-etcd component and adds client and subscriber capabilities for etcd.
Enabling etcd To enable the integration add in the root of your configuration file the necessary settings:</description></item><item><title>The Circuit Breaker</title><link>https://www.krakend.io/docs/backends/circuit-breaker/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/backends/circuit-breaker/</guid><description>The Circuit Breaker is a straightforward state machine in the middle of the request and response that monitors all your backend failures. When they reach a configured threshold, the circuit breaker will prevent sending more traffic to a failing backend.
When KrakenD demands more throughput than your actual API stack can deliver properly, the Circuit Breaker mechanism will detect the failures and prevent stressing your servers by not sending requests that are likely to fail.</description></item><item><title>The Circuit Breaker</title><link>https://www.krakend.io/docs/enterprise/backends/circuit-breaker/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/backends/circuit-breaker/</guid><description>To keep KrakenD responsive and resilient, we added a Circuit Breaker middleware on several processing pipe points. Thanks to this component, when KrakenD demands more throughput than your actual API stack can deliver properly, the Circuit Breaker mechanism will detect the failures and prevent stressing your servers by not sending requests that are likely to fail. It is also useful for dealing with network and other communication problems by preventing too many requests to fail due to timeouts, etc.</description></item><item><title>The Circuit Breaker</title><link>https://www.krakend.io/docs/v1.3/backends/circuit-breaker/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/backends/circuit-breaker/</guid><description>To keep KrakenD responsive and resilient, we added a Circuit Breaker middleware on several processing pipe points. Thanks to this component, when KrakenD demands more throughput than your actual API stack can deliver properly, the Circuit Breaker mechanism will detect the failures and prevent stressing your servers by not sending requests that are likely to fail. It is also useful for dealing with network and other communication problems by preventing too many requests to fail due to timeouts, etc.</description></item><item><title>The Circuit Breaker</title><link>https://www.krakend.io/docs/v1.4/backends/circuit-breaker/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/backends/circuit-breaker/</guid><description>To keep KrakenD responsive and resilient, we added a Circuit Breaker middleware on several processing pipe points. Thanks to this component, when KrakenD demands more throughput than your actual API stack can deliver properly, the Circuit Breaker mechanism will detect the failures and prevent stressing your servers by not sending requests that are likely to fail. It is also useful for dealing with network and other communication problems by preventing too many requests to fail due to timeouts, etc.</description></item><item><title>Installing KrakenD</title><link>https://www.krakend.io/docs/overview/installing/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/overview/installing/</guid><description>KrakenD is a single binary file that does not require any external libraries to work. To install KrakenD choose your operative system in the downloads section or use the Docker image.
Download Generate a config file Installation You can install (or just run) KrakenD using different options. Just exploring? Use the KrakenD Playground if you want to play with KrakenD without configuring it. The Playground comes with several flavors of KrakenD and a mock API.</description></item><item><title>Installing KrakenD</title><link>https://www.krakend.io/docs/v1.3/overview/installing/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/overview/installing/</guid><description>KrakenD is a single binary file that does not require any external libraries to work. To install KrakenD choose your operative system in the downloads section or use the Docker image.
Download KrakenD and Generate the configuration file
Just exploring?
Use the KrakenD Playground if you want to play with KrakenD without configuring it. The Playground comes with several flavors of KrakenD and a mock API. Everything is ready to start playing, just do a docker-compose up!</description></item><item><title>Installing KrakenD</title><link>https://www.krakend.io/docs/v1.4/overview/installing/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/overview/installing/</guid><description>KrakenD is a single binary file that does not require any external libraries to work. To install KrakenD choose your operative system in the downloads section or use the Docker image.
Download KrakenD and Generate the configuration file
Just exploring?
Use the KrakenD Playground if you want to play with KrakenD without configuring it. The Playground comes with several flavors of KrakenD and a mock API. Everything is ready to start playing, just do a docker-compose up!</description></item><item><title>KrakenD Status Codes</title><link>https://www.krakend.io/docs/endpoints/status-codes/</link><pubDate>Mon, 19 Oct 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/endpoints/status-codes/</guid><description>When consuming content through KrakenD, the status code returned to the client depends on the chosen configuration. Three different approaches impact status codes:
Use KrakenD regular endpoints to get the status codes as designed by KrakenD Return the status code as provided by your backend server (see the no-op encoding) Use custom logic to set specific status codes Default status codes of KrakenD endpoints Unless the no-op encoding is set, the following status codes are the default behavior of any KrakenD endpoint.</description></item><item><title>KrakenD Status Codes</title><link>https://www.krakend.io/docs/enterprise/endpoints/status-codes/</link><pubDate>Mon, 19 Oct 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/endpoints/status-codes/</guid><description>When consuming content through KrakenD, the status code returned to the client depends on the chosen configuration. Three different approaches impact status codes:
Use KrakenD regular endpoints to get the status codes as designed by KrakenD Return the status code as provided by your backend server (see the no-op encoding) Use custom logic to set specific status codes Default status codes of KrakenD endpoints Unless the no-op encoding is set, the following status codes are the default behavior of any KrakenD endpoint.</description></item><item><title>KrakenD Status Codes</title><link>https://www.krakend.io/docs/v1.3/endpoints/status-codes/</link><pubDate>Mon, 19 Oct 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/endpoints/status-codes/</guid><description>When consuming content through KrakenD, the status code returned to the client depends on the chosen configuration. Three different approaches impact status codes:
Use KrakenD regular endpoints to get the status codes as designed by KrakenD Return the status code as provided by your backend server (see the no-op encoding) Use custom logic to set specific status codes Default status codes of KrakenD endpoints Unless the no-op encoding is set, the following status codes are the default behavior of any KrakenD endpoint.</description></item><item><title>KrakenD Status Codes</title><link>https://www.krakend.io/docs/v1.4/endpoints/status-codes/</link><pubDate>Mon, 19 Oct 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/endpoints/status-codes/</guid><description>When consuming content through KrakenD, the status code returned to the client depends on the chosen configuration. Three different approaches impact status codes:
Use KrakenD regular endpoints to get the status codes as designed by KrakenD Return the status code as provided by your backend server (see the no-op encoding) Use custom logic to set specific status codes Default status codes of KrakenD endpoints Unless the no-op encoding is set, the following status codes are the default behavior of any KrakenD endpoint.</description></item><item><title>Exporting metrics and events to InfluxDB</title><link>https://www.krakend.io/docs/telemetry/influxdb/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/telemetry/influxdb/</guid><description>InfluxDB is a time series database designed to handle high write and query loads.
The Opencensus exporter allows you export data to InfluxDB for monitoring metrics and events. Enabling it only requires you to add the influxdb exporter in the opencensus module.
The following configuration snippet sends data to your InfluxDB:
{ &amp;#34;telemetry/opencensus&amp;#34;: { &amp;#34;exporters&amp;#34;: { &amp;#34;influxdb&amp;#34;: { &amp;#34;address&amp;#34;: &amp;#34;http://192.168.99.100:8086&amp;#34;, &amp;#34;db&amp;#34;: &amp;#34;krakend&amp;#34;, &amp;#34;timeout&amp;#34;: &amp;#34;1s&amp;#34;, &amp;#34;username&amp;#34;: &amp;#34;your-influxdb-user&amp;#34;, &amp;#34;password&amp;#34;: &amp;#34;your-influxdb-password&amp;#34; }, } } } address is the URL (including port) where your InfluxDB is installed.</description></item><item><title>Automated integration tests</title><link>https://www.krakend.io/docs/deploying/integration-tests/</link><pubDate>Sat, 11 Dec 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/deploying/integration-tests/</guid><description>In addition to checking the syntax of your KrakenD configuration and make sure that the gateway can start, you can run integration tests to make sure that the gateway returns the expected content from the consumed backends. to make sure all endpoints are properly connected and that they reply with the expected content. To do that, you can use the library that KrakenD is relying on to run its integration tests, and complement the unit testing battery.</description></item><item><title>Running KrakenD</title><link>https://www.krakend.io/docs/enterprise/overview/usage/</link><pubDate>Sun, 06 Jun 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/overview/usage/</guid><description>From an operations point of view, KrakenD is very simple to use. It only requires you to pass the path to the configuration file(s) which define behaviors and endpoints.
Make sure KrakenD can find a krakend.json and a LICENSE file. You can create an initial krakend.json with the following content:
Create a minimal configuration file&amp;nbsp; $echo&amp;nbsp;'{&amp;nbsp;"version":&amp;nbsp;2&amp;nbsp;}'&amp;nbsp;&amp;nbsp;krakend.json&amp;nbsp; And then run the container (AWS example):
Running KrakenD using the Docker container&amp;nbsp; $docker&amp;nbsp;run&amp;nbsp;-p&amp;nbsp;8080:8080&amp;nbsp;-v&amp;nbsp;"</description></item><item><title>Request and response modifier plugins</title><link>https://www.krakend.io/docs/extending/plugin-modifiers/</link><pubDate>Fri, 21 May 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/extending/plugin-modifiers/</guid><description>The request and response modifier plugins are a type of KrakenD customization that allow you to code your own business logic directly on requests and responses in a simple and extensible way. These plugins complement the handler plugins, and the client executor plugins and avoid their limitations and extra overload.
The injecting of the modifiers is placed at the beginning of the proxy pipe (just after the router layer) and before the request executor (where the executor plugins are injected).</description></item><item><title>Preconfigured Grafana dashboard</title><link>https://www.krakend.io/docs/enterprise/extended-metrics/grafana/</link><pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/extended-metrics/grafana/</guid><description>The Grafana dashboard for KrakenD offers valuable information to understand the performance of your services and detect anomalies in the service.
The dashboard is extensive and offers you metrics like:
Requests from users to KrakenD Requests from KrakenD to your backends Response times Memory usage and details Endpoints and status codes Heatmaps Open connections Throughput Distributions, timers, garbage collection and a long etcetera Configure Grafana Add the following configuration to your krakend.</description></item><item><title>Preconfigured Grafana dashboard</title><link>https://www.krakend.io/docs/v1.3/extended-metrics/grafana/</link><pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/extended-metrics/grafana/</guid><description>The Grafana dashboard for KrakenD offers valuable information to understand the performance of your services and detect anomalies in the service.
The dashboard is extensive and offers you metrics like:
Requests from users to KrakenD Requests from KrakenD to your backends Response times Memory usage and details Endpoints and status codes Heatmaps Open connections Throughput Distributions, timers, garbage collection and a long etcetera Configure Grafana Add the following configuration to your krakend.</description></item><item><title>Preconfigured Grafana dashboard</title><link>https://www.krakend.io/docs/v1.4/extended-metrics/grafana/</link><pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/extended-metrics/grafana/</guid><description>The Grafana dashboard for KrakenD offers valuable information to understand the performance of your services and detect anomalies in the service.
The dashboard is extensive and offers you metrics like:
Requests from users to KrakenD Requests from KrakenD to your backends Response times Memory usage and details Endpoints and status codes Heatmaps Open connections Throughput Distributions, timers, garbage collection and a long etcetera Configure Grafana Add the following configuration to your krakend.</description></item><item><title>Control of bot traffic</title><link>https://www.krakend.io/docs/throttling/botdetector/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/throttling/botdetector/</guid><description>The bot detector module checks incoming connections to the gateway to determine if a bot made them, helping you detect and reject bots carrying out scraping, content theft, and form spam.
Bots are detected by inspecting the User-Agent and comparing its value with a set of configuration rules provided by you. The bot detector module does not set any initial rules, meaning that is up to you to decide the best rules for your use case, and choose how restrictive or permissive you are with bots.</description></item><item><title>Telemetry</title><link>https://www.krakend.io/docs/enterprise/telemetry/overview/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/telemetry/overview/</guid><description>Observability and networking are key to succeed in a scenario of distributed microservices architecture, and new monitoring tools are needed. These tools must provide at least options to detect problems' root causes, monitoring and details of the different distributed transactions, and performance and latency optimization.
Through the OpenCensus exporters you can send logs, metrics, and traces to several open source and payment tools, so you can follow the activity of the gateway and the derived requests to its connected backends.</description></item><item><title>Telemetry</title><link>https://www.krakend.io/docs/v1.3/telemetry/overview/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/telemetry/overview/</guid><description>Observability and networking are key to succeed in a scenario of distributed microservices architecture, and new monitoring tools are needed. These tools must provide at least options to detect problems' root causes, monitoring and details of the different distributed transactions, and performance and latency optimization.
Through the OpenCensus exporters you can send logs, metrics, and traces to several open source and payment tools, so you can follow the activity of the gateway and the derived requests to its connected backends.</description></item><item><title>Telemetry</title><link>https://www.krakend.io/docs/v1.4/telemetry/overview/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/telemetry/overview/</guid><description>Observability and networking are key to succeed in a scenario of distributed microservices architecture, and new monitoring tools are needed. These tools must provide at least options to detect problems' root causes, monitoring and details of the different distributed transactions, and performance and latency optimization.
Through the OpenCensus exporters you can send logs, metrics, and traces to several open source and payment tools, so you can follow the activity of the gateway and the derived requests to its connected backends.</description></item><item><title>Enabling TLS for HTTPS and HTTP/2</title><link>https://www.krakend.io/docs/service-settings/tls/</link><pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/service-settings/tls/</guid><description>There are two different strategies when using TLS over KrakenD:
Use TLS for HTTPS and HTTP/2 in KrakenD (this document) Use a balancer with TLS termination in front of KrakenD (e.g., ELB, HAproxy) In case you want to enable TLS in KrakenD you need to add a tls key at service level (configuration&amp;rsquo;s file root) with at least the public key and the private key. When you add TLS, KrakenD listens only using TLS, and no traffic to plain HTTP is accepted.</description></item><item><title>JWT Signing</title><link>https://www.krakend.io/docs/authorization/jwt-signing/</link><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/authorization/jwt-signing/</guid><description>The JWT signing component creates a wrapper for your login endpoint that signs with your secret key the selected fields of the backend payload right before returning the content to the end-user.
The primary usage for this component is in migrations from monolith to microservices, or in ecosystems where there is no Identity server yet, as it allows the immediate adoption of signed JSON Web Tokens without the need to implement a new service.</description></item><item><title>JWT Signing</title><link>https://www.krakend.io/docs/enterprise/authorization/jwt-signing/</link><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/authorization/jwt-signing/</guid><description>The JWT signing component creates a wrapper for your login endpoint that signs with your secret key the selected fields of the backend payload right before returning the content to the end-user.
The primary usage for this component is in migrations from monolith to microservices, or in ecosystems where there is no Identity server yet, as it allows the immediate adoption of signed JSON Web Tokens without the need to implement a new service.</description></item><item><title>JWT Signing</title><link>https://www.krakend.io/docs/v1.3/authorization/jwt-signing/</link><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/authorization/jwt-signing/</guid><description>The JWT signing component creates a wrapper for your login endpoint that signs with your secret key the selected fields of the backend payload right before returning the content to the end-user.
The primary usage for this component is in migrations from monolith to microservices, or in ecosystems where there is no Identity server yet, as it allows the immediate adoption of signed JSON Web Tokens without the need to implement a new service.</description></item><item><title>JWT Signing</title><link>https://www.krakend.io/docs/v1.4/authorization/jwt-signing/</link><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/authorization/jwt-signing/</guid><description>The JWT signing component creates a wrapper for your login endpoint that signs with your secret key the selected fields of the backend payload right before returning the content to the end-user.
The primary usage for this component is in migrations from monolith to microservices, or in ecosystems where there is no Identity server yet, as it allows the immediate adoption of signed JSON Web Tokens without the need to implement a new service.</description></item><item><title>Parameter forwarding</title><link>https://www.krakend.io/docs/enterprise/endpoints/parameter-forwarding/</link><pubDate>Fri, 20 Jul 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/endpoints/parameter-forwarding/</guid><description>KrakenD is an API Gateway, and when it comes to forward query strings, cookies, and headers, it does not behave like a regular proxy by forwarding parameters to the backend.
The default policy for data forwarding works as follows:
No query string parameters are forwarded to the backend No headers are forwarded No cookies are forwarded You can change this behavior according to your needs, and define which elements are allowed to pass.</description></item><item><title>Parameter forwarding</title><link>https://www.krakend.io/docs/v1.3/endpoints/parameter-forwarding/</link><pubDate>Fri, 20 Jul 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/endpoints/parameter-forwarding/</guid><description>KrakenD is an API Gateway, and when it comes to forward query strings, cookies, and headers, it does not behave like a regular proxy by forwarding parameters to the backend.
The default policy for data forwarding works as follows:
No query string parameters are forwarded to the backend No headers are forwarded No cookies are forwarded You can change this behavior according to your needs, and define which elements are allowed to pass.</description></item><item><title>Parameter forwarding</title><link>https://www.krakend.io/docs/v1.4/endpoints/parameter-forwarding/</link><pubDate>Fri, 20 Jul 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/endpoints/parameter-forwarding/</guid><description>KrakenD is an API Gateway, and when it comes to forward query strings, cookies, and headers, it does not behave like a regular proxy by forwarding parameters to the backend.
The default policy for data forwarding works as follows:
No query string parameters are forwarded to the backend No headers are forwarded No cookies are forwarded You can change this behavior according to your needs, and define which elements are allowed to pass.</description></item><item><title>Deploying to Kubernetes</title><link>https://www.krakend.io/docs/deploying/kubernetes/</link><pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/deploying/kubernetes/</guid><description>Deploying KrakenD in Kubernetes requires a straightforward configuration.
Create a Dockerfile that includes the configuration of the service. Read how to generate a Docker artifact for detailed instructions. You could also use a ConfigMap, although the recommendation is to use immutable artifacts.
From here you need to create a NodePort and send all the traffic to KrakenD.
Deployment definition YAML The KrakenD deployment definition, in a file called deployment-definition.yaml:
apiVersion:apps/v1kind:Deploymentmetadata:name:krakend-deploymentspec:selector:matchLabels:app:krakendreplicas:2template:metadata:labels:app:krakendspec:containers:- name:krakendimage:YOUR-KRAKEND-IMAGE:1.</description></item><item><title>Running KrakenD server</title><link>https://www.krakend.io/docs/overview/run/</link><pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/overview/run/</guid><description>After installing KrakenD, you can start using KrakenD by typing krakend. To see all the options of krakend, type krakend -h or krakend &amp;lt;COMMAND&amp;gt; -h. For instance, the krakend run help is:
Run command help&amp;nbsp; $krakend&amp;nbsp;run&amp;nbsp;-h&amp;nbsp; &amp;nbsp; `7MMF'&amp;nbsp;`YMM'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`7MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`7MM"""Yb.&amp;nbsp; &amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;.M'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`Yb.&amp;nbsp; &amp;nbsp;&amp;nbsp;MM&amp;nbsp;.d"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`7Mb,od8&amp;nbsp;,6"Yb.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;,MP'.gP"Ya&amp;nbsp;`7MMpMMMb.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`Mb&amp;nbsp; &amp;nbsp;&amp;nbsp;MMMMM.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM'&amp;nbsp;"'8)&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;;Y&amp;nbsp;&amp;nbsp;,M'&amp;nbsp;&amp;nbsp;&amp;nbsp;Yb&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp; &amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;VMA&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,pm9MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM;Mm&amp;nbsp;&amp;nbsp;8M""""""&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,MP&amp;nbsp; &amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;`MM.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;8M&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;`Mb.YM.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,dP'&amp;nbsp; .JMML.&amp;nbsp;&amp;nbsp;&amp;nbsp;MMb..JMML.&amp;nbsp;&amp;nbsp;`Moo9^Yo..JMML.&amp;nbsp;YA.`Mbmmd'.JMML&amp;nbsp;&amp;nbsp;JMML..JMMmmmdP'&amp;nbsp; _______________________________________________________________________&amp;nbsp; &amp;nbsp; Version:&amp;nbsp;2.0.1&amp;nbsp; &amp;nbsp; &amp;nbsp; The&amp;nbsp;API&amp;nbsp;Gateway&amp;nbsp;builder&amp;nbsp; &amp;nbsp; Usage:&amp;nbsp; &amp;nbsp;&amp;nbsp;krakend&amp;nbsp;[command]&amp;nbsp; &amp;nbsp; Available&amp;nbsp;Commands:&amp;nbsp; &amp;nbsp;&amp;nbsp;check&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Validates&amp;nbsp;that&amp;nbsp;the&amp;nbsp;configuration&amp;nbsp;file&amp;nbsp;is&amp;nbsp;valid.&amp;nbsp; &amp;nbsp;&amp;nbsp;check-plugin&amp;nbsp;&amp;nbsp;Check&amp;nbsp;the&amp;nbsp;compatibility&amp;nbsp;with&amp;nbsp;the&amp;nbsp;plugin&amp;nbsp;deps.&amp;nbsp; &amp;nbsp;&amp;nbsp;help&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Help&amp;nbsp;about&amp;nbsp;any&amp;nbsp;command&amp;nbsp; &amp;nbsp;&amp;nbsp;run&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Run&amp;nbsp;the&amp;nbsp;KrakenD&amp;nbsp;server.&amp;nbsp; &amp;nbsp; Flags:&amp;nbsp; &amp;nbsp;&amp;nbsp;-c,&amp;nbsp;--config&amp;nbsp;string&amp;nbsp;&amp;nbsp;&amp;nbsp;Path&amp;nbsp;to&amp;nbsp;the&amp;nbsp;configuration&amp;nbsp;filename&amp;nbsp; &amp;nbsp;&amp;nbsp;-d,&amp;nbsp;--debug&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Enable&amp;nbsp;the&amp;nbsp;debug&amp;nbsp; &amp;nbsp;&amp;nbsp;-h,&amp;nbsp;--help&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;help&amp;nbsp;for&amp;nbsp;krakend&amp;nbsp; &amp;nbsp; Use&amp;nbsp;"krakend&amp;nbsp;[command]&amp;nbsp;--help"&amp;nbsp;for&amp;nbsp;more&amp;nbsp;information&amp;nbsp;about&amp;nbsp;a&amp;nbsp;command.&amp;nbsp; To start the server, invoke the krakend run command.</description></item><item><title>Using KrakenD</title><link>https://www.krakend.io/docs/v1.3/overview/usage/</link><pubDate>Tue, 25 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/overview/usage/</guid><description>From an operations point of view KrakenD, is very simple to use. It only requires you to pass the path the configuration file (which defines behaviors and endpoints). Additionally, you can enable the debug with the -d flag, and that&amp;rsquo;s pretty much everything.
TL;DR Generate a configuration file with your endpoints definition. The easier way to generate it is using the designer Check the syntax of your krakend.json is good Syntax checking&amp;nbsp; $krakend&amp;nbsp;check&amp;nbsp;--config&amp;nbsp;krakend.</description></item><item><title>Using KrakenD</title><link>https://www.krakend.io/docs/v1.4/overview/usage/</link><pubDate>Tue, 25 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/overview/usage/</guid><description>From an operations point of view KrakenD, is very simple to use. It only requires you to pass the path the configuration file (which defines behaviors and endpoints). Additionally, you can enable the debug with the -d flag, and that&amp;rsquo;s pretty much everything.
TL;DR Generate a configuration file with your endpoints definition. The easier way to generate it is using the designer Check the syntax of your krakend.json is good Syntax checking&amp;nbsp; $krakend&amp;nbsp;check&amp;nbsp;--config&amp;nbsp;krakend.</description></item><item><title>Concurrent Requests</title><link>https://www.krakend.io/docs/endpoints/concurrent-requests/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/endpoints/concurrent-requests/</guid><description>The concurrent requests are an excellent technique to improve the response times and decrease error rates by requesting in parallel the same information multiple times. Yes, you make the same request to several backends instead of asking to just one. When the first backend returns the information, the remaining requests are canceled.
It depends a lot on your configuration, but improving response times by a 75% or more in comparison to direct usage without the gateway is not something rare.</description></item><item><title>Concurrent Requests</title><link>https://www.krakend.io/docs/enterprise/endpoints/concurrent-requests/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/endpoints/concurrent-requests/</guid><description>The concurrent requests are an excellent technique to improve the response times and decrease error rates by requesting in parallel the same information multiple times. When the first backend returns the information, the remaining threads are canceled.
It depends a lot on your configuration, but improving response times by a 75% or more with the same application you are using today is not something rare.
When using concurrent requests, the backend services must be able to handle an additional load.</description></item><item><title>Concurrent Requests</title><link>https://www.krakend.io/docs/v1.3/endpoints/concurrent-requests/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/endpoints/concurrent-requests/</guid><description>The concurrent requests are an excellent technique to improve the response times and decrease error rates by requesting in parallel the same information multiple times. When the first backend returns the information, the remaining threads are canceled.
It depends a lot on your configuration, but improving response times by a 75% or more with the same application you are using today is not something rare.
When using concurrent requests, the backend services must be able to handle an additional load.</description></item><item><title>Concurrent Requests</title><link>https://www.krakend.io/docs/v1.4/endpoints/concurrent-requests/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/endpoints/concurrent-requests/</guid><description>The concurrent requests are an excellent technique to improve the response times and decrease error rates by requesting in parallel the same information multiple times. When the first backend returns the information, the remaining threads are canceled.
It depends a lot on your configuration, but improving response times by a 75% or more with the same application you are using today is not something rare.
When using concurrent requests, the backend services must be able to handle an additional load.</description></item><item><title>Service Discovery with Eureka</title><link>https://www.krakend.io/docs/enterprise/service-discovery/eureka/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/service-discovery/eureka/</guid><description>Users of the Netflix&amp;rsquo;s service Eureka have a couple of user contributed integrations available listed in our krakend-contrib repository.
The integrations are not bundled with KrakenD-CE releases but they can be added to the project and make a custom build without difficulties.
schibsted/krakend-eureka: The Eureka client Schibsted has been running in production since 2017. joaoqalves/krakend-eureka: A Eureka client contributed by João Alves</description></item><item><title>Service Discovery with Eureka</title><link>https://www.krakend.io/docs/v1.3/service-discovery/eureka/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/service-discovery/eureka/</guid><description>Users of the Netflix&amp;rsquo;s service Eureka have a couple of user contributed integrations available listed in our krakend-contrib repository.
The integrations are not bundled with KrakenD-CE releases but they can be added to the project and make a custom build without difficulties.
schibsted/krakend-eureka: The Eureka client Schibsted has been running in production since 2017. joaoqalves/krakend-eureka: A Eureka client contributed by João Alves</description></item><item><title>Service Discovery with Eureka</title><link>https://www.krakend.io/docs/v1.4/service-discovery/eureka/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/service-discovery/eureka/</guid><description>Users of the Netflix&amp;rsquo;s service Eureka have a couple of user contributed integrations available listed in our krakend-contrib repository.
The integrations are not bundled with KrakenD-CE releases but they can be added to the project and make a custom build without difficulties.
schibsted/krakend-eureka: The Eureka client Schibsted has been running in production since 2017. joaoqalves/krakend-eureka: A Eureka client contributed by João Alves</description></item><item><title>KrakenD file supported formats</title><link>https://www.krakend.io/docs/configuration/supported-formats/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/configuration/supported-formats/</guid><description>The expected configuration file format by default is json, but KrakenD can parse different formats if one of the following is found:
krakend.json krakend.toml krakend.yaml krakend.yml krakend.properties krakend.props krakend.prop krakend.hcl Nevertheless, our recommendation is to choose JSON.
Validate the syntax with krakend check
Why choosing json? You are free to choose YAML, TOML or any of the other formats at your best convenience. But have in mind the following logic when choosing a file format other than json.</description></item><item><title>KrakenD file supported formats</title><link>https://www.krakend.io/docs/enterprise/configuration/supported-formats/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/configuration/supported-formats/</guid><description>The expected configuration file format by default is json, but KrakenD can parse different formats if one of the following is found:
krakend.json krakend.toml krakend.yaml krakend.yml krakend.properties krakend.props krakend.prop krakend.hcl Nevertheless, our recommendation is to choose JSON.
Validate the syntax (not the logic) with krakend check
Why choosing json? You are free to choose YAML, TOML or any of the other formats at your best convenience. But have in mind the following logic when choosing a file format other than json.</description></item><item><title>KrakenD file supported formats</title><link>https://www.krakend.io/docs/v1.3/configuration/supported-formats/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/configuration/supported-formats/</guid><description>The expected configuration file format by default is json, but KrakenD can parse different formats if one of the following is found:
krakend.json krakend.toml krakend.yaml krakend.yml krakend.properties krakend.props krakend.prop krakend.hcl Nevertheless, our recommendation is to choose JSON.
Validate the syntax (not the logic) with krakend check
Why choosing json? You are free to choose YAML, TOML or any of the other formats at your best convenience. But have in mind the following logic when choosing a file format other than json.</description></item><item><title>KrakenD file supported formats</title><link>https://www.krakend.io/docs/v1.4/configuration/supported-formats/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/configuration/supported-formats/</guid><description>The expected configuration file format by default is json, but KrakenD can parse different formats if one of the following is found:
krakend.json krakend.toml krakend.yaml krakend.yml krakend.properties krakend.props krakend.prop krakend.hcl Nevertheless, our recommendation is to choose JSON.
Validate the syntax (not the logic) with krakend check
Why choosing json? You are free to choose YAML, TOML or any of the other formats at your best convenience. But have in mind the following logic when choosing a file format other than json.</description></item><item><title>Enterprise plugins</title><link>https://www.krakend.io/docs/enterprise/overview/plugins/</link><pubDate>Sun, 31 Jan 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/overview/plugins/</guid><description>A great deal of the functionality offered by KrakenD Enterprise is presented as plugins. It&amp;rsquo;s important to understand a few concepts and particularities of plugins before you start using them.
What is a plugin? A plugin is a soft-linked library; thus, a separated binary file (.so), that when running in conjunction with KrakenD, can participate in the processing. Plugins and middlewares are close concepts, but while middlewares are part of the KrakenD binary, plugins are not.</description></item><item><title>The `/__debug/` endpoint</title><link>https://www.krakend.io/docs/endpoints/debug-endpoint/</link><pubDate>Tue, 27 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/endpoints/debug-endpoint/</guid><description>The /__debug/ endpoint is available when you start the server with the -d flag.
The endpoint can be used as a fake backend and is very useful to see the interaction between the gateway and the backends as its activity is printed in the log using the DEBUG log level. The endpoint returns this content:
{ &amp;#34;message&amp;#34;: &amp;#34;pong&amp;#34; } When developing, add KrakenD itself as another backend using the /__debug/ endpoint so you can see exactly what headers and query string parameters your backends are receiving.</description></item><item><title>The `/__debug` endpoint</title><link>https://www.krakend.io/docs/enterprise/endpoints/debug-endpoint/</link><pubDate>Tue, 27 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/endpoints/debug-endpoint/</guid><description>The /__debug endpoint is available when you start the server with the -d flag.
The endpoint can be used as a fake backend and is very useful to see the interaction between the gateway and the backends as its activity is printed in the log using the DEBUG log level .
When developing, add KrakenD itself as another backend using the /__debug/ endpoint so you can see exactly what headers and query string parameters your backends are receiving.</description></item><item><title>The `/__debug/` endpoint</title><link>https://www.krakend.io/docs/v1.3/endpoints/debug-endpoint/</link><pubDate>Tue, 27 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/endpoints/debug-endpoint/</guid><description>The /__debug/ endpoint is available when you start the server with the -d flag.
The endpoint can be used as a fake backend and is very useful to see the interaction between the gateway and the backends as its activity is printed in the log using the DEBUG log level .
When developing, add KrakenD itself as another backend using the /__debug/ endpoint so you can see exactly what headers and query string parameters your backends are receiving.</description></item><item><title>The `/__debug/` endpoint</title><link>https://www.krakend.io/docs/v1.4/endpoints/debug-endpoint/</link><pubDate>Tue, 27 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/endpoints/debug-endpoint/</guid><description>The /__debug/ endpoint is available when you start the server with the -d flag.
The endpoint can be used as a fake backend and is very useful to see the interaction between the gateway and the backends as its activity is printed in the log using the DEBUG log level .
When developing, add KrakenD itself as another backend using the /__debug/ endpoint so you can see exactly what headers and query string parameters your backends are receiving.</description></item><item><title>Overriding the configuration with environment vars</title><link>https://www.krakend.io/docs/configuration/environment-vars/</link><pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/configuration/environment-vars/</guid><description>When KrakenD runs, all the behavior is loaded from the configuration file. Through environment variables, you can override existing values in the configuration. There are two different ways of injecting environment vars.
The key to override must exist in the configuration The environment variables are meant to replace existing attributes in the configuration. Therefore, you cannot set new parameters that do not exist in the configuration. First level properties You can override its value with an environment variable for each configuration value that isn&amp;rsquo;t nested (meaning first-level properties of the configuration).</description></item><item><title>Overriding the configuration with environment vars</title><link>https://www.krakend.io/docs/enterprise/configuration/environment-vars/</link><pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/configuration/environment-vars/</guid><description>When KrakenD runs, all the behavior is loaded from the configuration file. For each configuration value that isn&amp;rsquo;t nested (meaning first-level properties of the configuration), you can override its value with an environment variable.
All configuration environment variables must have the prefix KRAKEND_ and declared in uppercase. The variable name after the prefix must match the property in the configuration value.
For instance, take the following krakend.json configuration as an example:</description></item><item><title>Overriding the configuration with environment vars</title><link>https://www.krakend.io/docs/v1.3/configuration/environment-vars/</link><pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/configuration/environment-vars/</guid><description>When KrakenD runs, all the behavior is loaded from the configuration file. For each configuration value that isn&amp;rsquo;t nested (meaning first-level properties of the configuration), you can override its value with an environment variable.
All configuration environment variables must have the prefix KRAKEND_ and declared in uppercase. The variable name after the prefix must match the property in the configuration value.
For instance, take the following krakend.json configuration as an example:</description></item><item><title>Overriding the configuration with environment vars</title><link>https://www.krakend.io/docs/v1.4/configuration/environment-vars/</link><pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/configuration/environment-vars/</guid><description>When KrakenD runs, all the behavior is loaded from the configuration file. Through environment variables you can inject a value in the configuration when the server starts. There are two different ways of injecting environment vars.
First level properties For each configuration value that isn&amp;rsquo;t nested (meaning first-level properties of the configuration), you can override its value with an environment variable.
All configuration environment variables that you want to set using environment variables, pass them with a prefix KRAKEND_.</description></item><item><title>Graylog and the GELF format</title><link>https://www.krakend.io/docs/enterprise/logging/graylog-gelf/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/logging/graylog-gelf/</guid><description>KrakenD supports sending structured events in GELF format to your Graylog Cluster thanks to the krakend-gelf integration.
The setup of GELF is straightforward and requires only to set two parameters:
address: The address (including the port) of your Graylog cluster (or any other service that receives GELF inputs). enable_tcp: Set to false (recommended) to use UDP. When using TCP performance might be affected. Enabling GELF Add the krakend-gelf integration in the root level of your krakend.</description></item><item><title>Graylog and the GELF format</title><link>https://www.krakend.io/docs/logging/graylog-gelf/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/logging/graylog-gelf/</guid><description>KrakenD supports sending structured events in GELF format to your Graylog Cluster thanks to the krakend-gelf integration.
The setup of GELF is straightforward and requires only to set two parameters:
address: The address (including the port) of your Graylog cluster (or any other service that receives GELF inputs). enable_tcp: Set to false (recommended) to use UDP. When using TCP performance might be affected. Enabling GELF Add the krakend-gelf integration in the root level of your krakend.</description></item><item><title>Graylog and the GELF format</title><link>https://www.krakend.io/docs/v1.3/logging/graylog-gelf/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/logging/graylog-gelf/</guid><description>KrakenD supports sending structured events in GELF format to your Graylog Cluster thanks to the krakend-gelf integration.
The setup of GELF is straightforward and requires only to set two parameters:
address: The address (including the port) of your Graylog cluster (or any other service that receives GELF inputs). enable_tcp: Set to false (recommended) to use UDP. When using TCP performance might be affected. Enabling GELF Add the krakend-gelf integration in the root level of your krakend.</description></item><item><title>Graylog and the GELF format</title><link>https://www.krakend.io/docs/v1.4/logging/graylog-gelf/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/logging/graylog-gelf/</guid><description>KrakenD supports sending structured events in GELF format to your Graylog Cluster thanks to the krakend-gelf integration.
The setup of GELF is straightforward and requires only to set two parameters:
address: The address (including the port) of your Graylog cluster (or any other service that receives GELF inputs). enable_tcp: Set to false (recommended) to use UDP. When using TCP performance might be affected. Enabling GELF Add the krakend-gelf integration in the root level of your krakend.</description></item><item><title>Revoking valid tokens with a Bloom filter</title><link>https://www.krakend.io/docs/authorization/revoking-tokens/</link><pubDate>Mon, 05 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/authorization/revoking-tokens/</guid><description>The API Gateway authorizes users that provide valid tokens according to your criteria, but at some point, you might want to change your mind and decide to revoke JWT tokens that are still valid.
When are you going to need this? Examples of situations where you might need to revoke perfectly legit tokens: As a user, I want to log me out of all my devices. As an administrator, I want to kick out someone from the platform.</description></item><item><title>Revoking valid tokens with a Bloom filter</title><link>https://www.krakend.io/docs/enterprise/authorization/revoking-tokens/</link><pubDate>Mon, 05 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/authorization/revoking-tokens/</guid><description>The API Gateway authorizes users that provide valid tokens according to your criteria, but at some point, you might want to change your mind and decide to revoke JWT tokens that are still valid.
When are you going to need this? Examples of situations where you might need to revoke perfectly legit tokens: As a user, I want to log me out of all my devices. As an administrator, I want to kick out someone from the platform.</description></item><item><title>Revoking valid tokens with a Bloom filter</title><link>https://www.krakend.io/docs/v1.3/authorization/revoking-tokens/</link><pubDate>Mon, 05 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/authorization/revoking-tokens/</guid><description>The API Gateway authorizes users that provide valid tokens according to your criteria, but at some point, you might want to change your mind and decide to revoke JWT tokens that are still valid.
When are you going to need this? Examples of situations where you might need to revoke perfectly legit tokens: As a user, I want to log me out of all my devices. As an administrator, I want to kick out someone from the platform.</description></item><item><title>Revoking valid tokens with a Bloom filter</title><link>https://www.krakend.io/docs/v1.4/authorization/revoking-tokens/</link><pubDate>Mon, 05 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/authorization/revoking-tokens/</guid><description>The API Gateway authorizes users that provide valid tokens according to your criteria, but at some point, you might want to change your mind and decide to revoke JWT tokens that are still valid.
When are you going to need this? Examples of situations where you might need to revoke perfectly legit tokens: As a user, I want to log me out of all my devices. As an administrator, I want to kick out someone from the platform.</description></item><item><title>Timeouts</title><link>https://www.krakend.io/docs/enterprise/throttling/timeouts/</link><pubDate>Thu, 04 Jan 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/throttling/timeouts/</guid><description>Being KrakenD an API Gateway that talks to other services, being able to control the waiting times for different aspects is crucial. KrakenD will allow you to fine-tune these settings.
The timeouts can apply to:
The duration of the whole pipe (from user request to user response) The HTTP request related timeouts Additionally, you can control the number of maximum IDLE connections.
Pipe timeouts Global timeout The timeout key in the krakend.</description></item><item><title>Timeouts</title><link>https://www.krakend.io/docs/throttling/timeouts/</link><pubDate>Thu, 04 Jan 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/throttling/timeouts/</guid><description>Being KrakenD an API Gateway that talks to other services, being able to control the waiting times for different aspects is crucial. KrakenD will allow you to fine-tune these settings.
The timeouts can apply to:
The duration of the whole pipe (from user request to user response) The HTTP request related timeouts Additionally, you can control the number of maximum IDLE connections.
Global timeout The timeout key in the krakend.</description></item><item><title>Timeouts</title><link>https://www.krakend.io/docs/v1.3/throttling/timeouts/</link><pubDate>Thu, 04 Jan 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/throttling/timeouts/</guid><description>Being KrakenD an API Gateway that talks to other services, being able to control the waiting times for different aspects is crucial. KrakenD will allow you to fine-tune these settings.
The timeouts can apply to:
The duration of the whole pipe (from user request to user response) The HTTP request related timeouts Additionally, you can control the number of maximum IDLE connections.
Pipe timeouts Global timeout The timeout key in the krakend.</description></item><item><title>Timeouts</title><link>https://www.krakend.io/docs/v1.4/throttling/timeouts/</link><pubDate>Thu, 04 Jan 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/throttling/timeouts/</guid><description>Being KrakenD an API Gateway that talks to other services, being able to control the waiting times for different aspects is crucial. KrakenD will allow you to fine-tune these settings.
The timeouts can apply to:
The duration of the whole pipe (from user request to user response) The HTTP request related timeouts Additionally, you can control the number of maximum IDLE connections.
Pipe timeouts Global timeout The timeout key in the krakend.</description></item><item><title>HTTP Security</title><link>https://www.krakend.io/docs/service-settings/security/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/service-settings/security/</guid><description>KrakenD has implemented several security strategies, controlled via krakend-httpsecure. To enable them you only need to add its namespace security/http at the extra_config in the root level of the configuration.
The following configuration describes all possible options:
{ &amp;#34;version&amp;#34;: 3, &amp;#34;extra_config&amp;#34;: { &amp;#34;security/http&amp;#34;: { &amp;#34;allowed_hosts&amp;#34;: [ &amp;#34;host.known.com:443&amp;#34; ], &amp;#34;ssl_proxy_headers&amp;#34;: { &amp;#34;X-Forwarded-Proto&amp;#34;: &amp;#34;https&amp;#34; }, &amp;#34;host_proxy_headers&amp;#34;:[ &amp;#34;X-Forwarded-Hosts&amp;#34; ], &amp;#34;ssl_redirect&amp;#34;: true, &amp;#34;ssl_host&amp;#34;: &amp;#34;ssl.host.domain&amp;#34;, &amp;#34;sts_seconds&amp;#34;: 300, &amp;#34;sts_include_subdomains&amp;#34;: true, &amp;#34;frame_deny&amp;#34;: true, &amp;#34;referrer_policy&amp;#34;: &amp;#34;same-origin&amp;#34;, &amp;#34;custom_frame_options_value&amp;#34;: &amp;#34;ALLOW-FROM https://example.</description></item><item><title>Security</title><link>https://www.krakend.io/docs/enterprise/service-settings/security/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/service-settings/security/</guid><description>KrakenD has implemented several security strategies, controlled via krakend-httpsecure. To enable them you only need to add the extra_config at service (root) level.
The following example describes the options explained later in this article:
&amp;quot;extra_config&amp;quot;: { &amp;quot;github_com/devopsfaith/krakend-httpsecure&amp;quot;: { &amp;quot;allowed_hosts&amp;quot;: [ &amp;quot;host.known.com:443&amp;quot; ], &amp;quot;ssl_proxy_headers&amp;quot;: { &amp;quot;X-Forwarded-Proto&amp;quot;: &amp;quot;https&amp;quot; }, &amp;quot;ssl_redirect&amp;quot;: true, &amp;quot;ssl_host&amp;quot;: &amp;quot;ssl.host.domain&amp;quot;, &amp;quot;ssl_port&amp;quot;: &amp;quot;443&amp;quot;, &amp;quot;ssl_certificate&amp;quot;: &amp;quot;/path/to/cert&amp;quot;, &amp;quot;ssl_private_key&amp;quot;: &amp;quot;/path/to/key&amp;quot;, &amp;quot;sts_seconds&amp;quot;: 300, &amp;quot;sts_include_subdomains&amp;quot;: true, &amp;quot;frame_deny&amp;quot;: true, &amp;quot;custom_frame_options_value&amp;quot;: &amp;quot;ALLOW-FROM https://example.com&amp;quot;, &amp;quot;hpkp_public_key&amp;quot;: &amp;quot;pin-sha256=\&amp;quot;base64==\&amp;quot;; max-age=expireTime [; includeSubDomains][; report-uri=\&amp;quot;reportURI\&amp;quot;]&amp;quot;, &amp;quot;content_type_nosniff&amp;quot;: true, &amp;quot;browser_xss_filter&amp;quot;: true, &amp;quot;content_security_policy&amp;quot;: &amp;quot;default-src 'self';&amp;quot; } See below the different options described in this configuration file.</description></item><item><title>Security</title><link>https://www.krakend.io/docs/v1.3/service-settings/security/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/service-settings/security/</guid><description>KrakenD has implemented several security strategies, controlled via krakend-httpsecure. To enable them you only need to add the extra_config at service (root) level.
The following example describes the options explained later in this article:
&amp;quot;extra_config&amp;quot;: { &amp;quot;github_com/devopsfaith/krakend-httpsecure&amp;quot;: { &amp;quot;allowed_hosts&amp;quot;: [ &amp;quot;host.known.com:443&amp;quot; ], &amp;quot;ssl_proxy_headers&amp;quot;: { &amp;quot;X-Forwarded-Proto&amp;quot;: &amp;quot;https&amp;quot; }, &amp;quot;ssl_redirect&amp;quot;: true, &amp;quot;ssl_host&amp;quot;: &amp;quot;ssl.host.domain&amp;quot;, &amp;quot;ssl_port&amp;quot;: &amp;quot;443&amp;quot;, &amp;quot;ssl_certificate&amp;quot;: &amp;quot;/path/to/cert&amp;quot;, &amp;quot;ssl_private_key&amp;quot;: &amp;quot;/path/to/key&amp;quot;, &amp;quot;sts_seconds&amp;quot;: 300, &amp;quot;sts_include_subdomains&amp;quot;: true, &amp;quot;frame_deny&amp;quot;: true, &amp;quot;custom_frame_options_value&amp;quot;: &amp;quot;ALLOW-FROM https://example.com&amp;quot;, &amp;quot;hpkp_public_key&amp;quot;: &amp;quot;pin-sha256=\&amp;quot;base64==\&amp;quot;; max-age=expireTime [; includeSubDomains][; report-uri=\&amp;quot;reportURI\&amp;quot;]&amp;quot;, &amp;quot;content_type_nosniff&amp;quot;: true, &amp;quot;browser_xss_filter&amp;quot;: true, &amp;quot;content_security_policy&amp;quot;: &amp;quot;default-src 'self';&amp;quot; } See below the different options described in this configuration file.</description></item><item><title>Security</title><link>https://www.krakend.io/docs/v1.4/service-settings/security/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/service-settings/security/</guid><description>KrakenD has implemented several security strategies, controlled via krakend-httpsecure. To enable them you only need to add the extra_config at service (root) level.
The following example describes the options explained later in this article:
&amp;quot;extra_config&amp;quot;: { &amp;quot;github_com/devopsfaith/krakend-httpsecure&amp;quot;: { &amp;quot;allowed_hosts&amp;quot;: [ &amp;quot;host.known.com:443&amp;quot; ], &amp;quot;ssl_proxy_headers&amp;quot;: { &amp;quot;X-Forwarded-Proto&amp;quot;: &amp;quot;https&amp;quot; }, &amp;quot;ssl_redirect&amp;quot;: true, &amp;quot;ssl_host&amp;quot;: &amp;quot;ssl.host.domain&amp;quot;, &amp;quot;ssl_port&amp;quot;: &amp;quot;443&amp;quot;, &amp;quot;ssl_certificate&amp;quot;: &amp;quot;/path/to/cert&amp;quot;, &amp;quot;ssl_private_key&amp;quot;: &amp;quot;/path/to/key&amp;quot;, &amp;quot;sts_seconds&amp;quot;: 300, &amp;quot;sts_include_subdomains&amp;quot;: true, &amp;quot;frame_deny&amp;quot;: true, &amp;quot;custom_frame_options_value&amp;quot;: &amp;quot;ALLOW-FROM https://example.com&amp;quot;, &amp;quot;hpkp_public_key&amp;quot;: &amp;quot;pin-sha256=\&amp;quot;base64==\&amp;quot;; max-age=expireTime [; includeSubDomains][; report-uri=\&amp;quot;reportURI\&amp;quot;]&amp;quot;, &amp;quot;content_type_nosniff&amp;quot;: true, &amp;quot;browser_xss_filter&amp;quot;: true, &amp;quot;content_security_policy&amp;quot;: &amp;quot;default-src 'self';&amp;quot; } See below the different options described in this configuration file.</description></item><item><title>Supported backend encodings</title><link>https://www.krakend.io/docs/backends/supported-encodings/</link><pubDate>Thu, 14 Apr 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/backends/supported-encodings/</guid><description>Setting the encoding is an important part of the backend definition, as it informs KrakenD how to parse the responses of your services.
Each backend can reply with a different encoding and KrakenD does not have any problem working with mixed encodings at the same time. You can use the following encoding in each backend section:
json safejson xml rss string no-op Notice that all values are in lower case.</description></item><item><title>Supported backend encodings</title><link>https://www.krakend.io/docs/enterprise/backends/supported-encodings/</link><pubDate>Thu, 14 Apr 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/backends/supported-encodings/</guid><description>Setting the encoding is an important part of the backend definition, as it informs KrakenD how to parse the responses of your services.
Each backend can reply with a different encoding and KrakenD does not have any problem working with mixed encodings at the same time. You can use the following encoding in each backend section:
json safejson xml rss string no-op Notice that all values are in lower case.</description></item><item><title>Supported backend encodings</title><link>https://www.krakend.io/docs/v1.3/backends/supported-encodings/</link><pubDate>Thu, 14 Apr 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/backends/supported-encodings/</guid><description>Setting the encoding is an important part of the backend definition, as it informs KrakenD how to parse the responses of your services.
Each backend can reply with a different encoding and KrakenD does not have any problem working with mixed encodings at the same time. You can use the following encoding in each backend section:
json safejson xml rss string no-op Notice that all values are in lower case.</description></item><item><title>Supported backend encodings</title><link>https://www.krakend.io/docs/v1.4/backends/supported-encodings/</link><pubDate>Thu, 14 Apr 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/backends/supported-encodings/</guid><description>Setting the encoding is an important part of the backend definition, as it informs KrakenD how to parse the responses of your services.
Each backend can reply with a different encoding and KrakenD does not have any problem working with mixed encodings at the same time. You can use the following encoding in each backend section:
json safejson xml rss string no-op Notice that all values are in lower case.</description></item><item><title>Validate your plugin compatibility</title><link>https://www.krakend.io/docs/extending/check-plugin/</link><pubDate>Fri, 28 Jan 2022 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/extending/check-plugin/</guid><description>The krakend check-plugin command helps you validate the compatibility of your custom plugins that will run in conjunction with KrakenD.
The command compares your plugin&amp;rsquo;s go.sum file with the libraries initially used to compile the running binary. If there are any incompatibilities between your plugin and KrakenD, it will show a detailed list.
If you integrate this command as part of your CI/CD pipeline, it will exit with a status code 0 when the libraries of your plugin are compatible with KrakenD and with a status code 1 when they are not.</description></item><item><title>Advanced HTTP Server settings</title><link>https://www.krakend.io/docs/service-settings/http-server-settings/</link><pubDate>Tue, 18 Jan 2022 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/service-settings/http-server-settings/</guid><description>KrakenD starts an HTTP server to offer the API Gateway server. You can personalize some of the settings used to start the service and also override the default settings of the underlying Go standard library.
If you want to customize any of the settings below, they must be written at the top level of the configuration.
Setting parameter Type Description port integer The TCP port where KrakenD listens to.</description></item><item><title>Generate documentation using OpenAPI</title><link>https://www.krakend.io/docs/enterprise/commands/openapi/</link><pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/commands/openapi/</guid><description>The OpenAPI or Swagger generator is a command line utility embedded in the KrakenD binary, offering the automatic generation of API documentation through a static Swagger file.
For an OpenAPI specification with detailed fields of backend responses (an information the gateway does not have), use the OpenAPI generator in the KrakenD Studio as is capable of providing in-depth detail of backend responses in the documentation through inspection of live requests.</description></item><item><title>Token validation with multiple Identity Providers</title><link>https://www.krakend.io/docs/enterprise/authentication/multiple-identity-providers/</link><pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/authentication/multiple-identity-providers/</guid><description>This plugin allows KrakenD to validate tokens issued by multiple Identity Providers.
The default behavior of KrakenD allows you to validate JWT tokens using a single Identity Provider or tenant per endpoint. There are times when tokens arriving at an endpoint originate in different providers or different tenants. This is especially true in multi-tenant scenarios, or where there is an ongoing migration, or when different systems converge into the gateway. The KrakenD krakend-jwk-aggregator allows you to alleviate this issue.</description></item><item><title>Securing B2B communication with mTLS</title><link>https://www.krakend.io/docs/authorization/mutual-authentication/</link><pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/authorization/mutual-authentication/</guid><description>Mutual TLS authentication (mTLS) is an authentication mechanism used traditionally in business-to-business (B2B) applications where clients provide a certificate that allows to connect to the KrakenD server.
The certificates must be recognized by your system&amp;rsquo;s Certification Authority (CA). KrakenD relies on the machine where is running.
Configuring mutual authentication From the configuration file perspective, Mutual TLS Authentication is no more than flag at the root level of the configuration.
When mTLS is enabled, all KrakenD endpoints require clients to provide a known client-side X.</description></item><item><title>Securing B2B communication with mTLS</title><link>https://www.krakend.io/docs/enterprise/authorization/mutual-authentication/</link><pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/authorization/mutual-authentication/</guid><description>Mutual TLS authentication (mTLS) is an authentication mechanism used traditionally in business-to-business (B2B) applications where clients provide a certificate that allows to connect to the KrakenD server.
Configuring mutual authentication From the configuration file perspective, Mutual TLS Authentication is no more than flag at the root level of the configuration.
When mTLS is enabled, all KrakenD endpoints require clients to provide a known client-side X.509 authentication certificate. KrakenD relies on the system&amp;rsquo;s CA to validate certificates.</description></item><item><title>Securing B2B communication with mTLS</title><link>https://www.krakend.io/docs/v1.3/authorization/mutual-authentication/</link><pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/authorization/mutual-authentication/</guid><description>Mutual TLS authentication (mTLS) is an authentication mechanism used traditionally in business-to-business (B2B) applications where clients provide a certificate that allows to connect to the KrakenD server.
The certificates must be recognized by your system&amp;rsquo;s Certification Authority (CA). KrakenD relies on the machine where is running.
Configuring mutual authentication From the configuration file perspective, Mutual TLS Authentication is no more than flag at the root level of the configuration.
When mTLS is enabled, all KrakenD endpoints require clients to provide a known client-side X.</description></item><item><title>Securing B2B communication with mTLS</title><link>https://www.krakend.io/docs/v1.4/authorization/mutual-authentication/</link><pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/authorization/mutual-authentication/</guid><description>Mutual TLS authentication (mTLS) is an authentication mechanism used traditionally in business-to-business (B2B) applications where clients provide a certificate that allows to connect to the KrakenD server.
The certificates must be recognized by your system&amp;rsquo;s Certification Authority (CA). KrakenD relies on the machine where is running.
Configuring mutual authentication From the configuration file perspective, Mutual TLS Authentication is no more than flag at the root level of the configuration.
When mTLS is enabled, all KrakenD endpoints require clients to provide a known client-side X.</description></item><item><title>Logstash</title><link>https://www.krakend.io/docs/enterprise/logging/logstash/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/logging/logstash/</guid><description>If you want to log using the Logstash standard via stdout, you have to add the krakend-logstash integration in the root level of your krakend.json, inside the extra_config section. The gologging needs to be enabled too.
For instance:
&amp;quot;extra_config&amp;quot;: { &amp;quot;github_com/devopsfaith/krakend-logstash&amp;quot;: { &amp;quot;enabled&amp;quot;: true } &amp;quot;github_com/devopsfaith/krakend-gologging&amp;quot;: { &amp;quot;level&amp;quot;: &amp;quot;INFO&amp;quot;, &amp;quot;prefix&amp;quot;: &amp;quot;[KRAKEND]&amp;quot;, &amp;quot;syslog&amp;quot;: false, &amp;quot;stdout&amp;quot;: true, &amp;quot;format&amp;quot;: &amp;quot;logstash&amp;quot; } }</description></item><item><title>Logstash</title><link>https://www.krakend.io/docs/logging/logstash/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/logging/logstash/</guid><description>The Logstash integration prints KrakenD logs in JSON format to ingest them and process them later. If you want to log using the Logstash standard via stdout, you need to add the telemetry/logging integration as a dependency.
Configuration The configuration you need to enable logstash is:
{ &amp;#34;version&amp;#34;: 3, &amp;#34;extra_config&amp;#34;: { &amp;#34;telemetry/logstash&amp;#34;: { &amp;#34;enabled&amp;#34;: true }, &amp;#34;telemetry/logging&amp;#34;: { &amp;#34;level&amp;#34;: &amp;#34;INFO&amp;#34;, &amp;#34;prefix&amp;#34;: &amp;#34;[KRAKEND]&amp;#34;, &amp;#34;syslog&amp;#34;: false, &amp;#34;stdout&amp;#34;: true, &amp;#34;format&amp;#34;: &amp;#34;logstash&amp;#34; } } }</description></item><item><title>Logstash</title><link>https://www.krakend.io/docs/v1.3/logging/logstash/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/logging/logstash/</guid><description>If you want to log using the Logstash standard via stdout, you have to add the krakend-logstash integration in the root level of your krakend.json, inside the extra_config section. The gologging needs to be enabled too.
For instance:
&amp;quot;extra_config&amp;quot;: { &amp;quot;github_com/devopsfaith/krakend-logstash&amp;quot;: { &amp;quot;enabled&amp;quot;: true } &amp;quot;github_com/devopsfaith/krakend-gologging&amp;quot;: { &amp;quot;level&amp;quot;: &amp;quot;INFO&amp;quot;, &amp;quot;prefix&amp;quot;: &amp;quot;[KRAKEND]&amp;quot;, &amp;quot;syslog&amp;quot;: false, &amp;quot;stdout&amp;quot;: true, &amp;quot;format&amp;quot;: &amp;quot;logstash&amp;quot; } }</description></item><item><title>Logstash</title><link>https://www.krakend.io/docs/v1.4/logging/logstash/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/logging/logstash/</guid><description>If you want to log using the Logstash standard via stdout, you have to add the krakend-logstash integration in the root level of your krakend.json, inside the extra_config section. The gologging needs to be enabled too.
For instance:
&amp;quot;extra_config&amp;quot;: { &amp;quot;github_com/devopsfaith/krakend-logstash&amp;quot;: { &amp;quot;enabled&amp;quot;: true } &amp;quot;github_com/devopsfaith/krakend-gologging&amp;quot;: { &amp;quot;level&amp;quot;: &amp;quot;INFO&amp;quot;, &amp;quot;prefix&amp;quot;: &amp;quot;[KRAKEND]&amp;quot;, &amp;quot;syslog&amp;quot;: false, &amp;quot;stdout&amp;quot;: true, &amp;quot;format&amp;quot;: &amp;quot;logstash&amp;quot; } }</description></item><item><title>OAuth 2.0 Client Credentials (2-legged flow)</title><link>https://www.krakend.io/docs/authorization/client-credentials/</link><pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/authorization/client-credentials/</guid><description>Through the OAuth 2.0 Client Credentials Grant, KrakenD can do a 2-legged OAuth2 flow, which means that the gateway requests to your authorization server an access token before reaching the backend&amp;rsquo;s protected resources. The token refreshes when needed.
The client credentials authorize KrakenD, as the client, to access the protected resources.
Successfully setting the client credentials for a backend means that KrakenD can get the protected content. Still, the endpoint offered to the end-user will be public unless you protect it with JWT or another end-user authentication mechanism.</description></item><item><title>OAuth 2.0 Client Credentials</title><link>https://www.krakend.io/docs/enterprise/authorization/client-credentials/</link><pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/authorization/client-credentials/</guid><description>Through the OAuth 2.0 Client Credentials Grant KrakenD can request to your authorization server an access token to reach protected resources.
The client credentials authorize KrakenD, as the client, to access the protected resources. Do not confuse this with authorizing an end-user (see JWT instead).
Successfully setting the client credentials for a backend means that KrakenD can get the protected content, but the endpoint offered to the end-user is going to be public unless you protect it with JWT.</description></item><item><title>OAuth 2.0 Client Credentials</title><link>https://www.krakend.io/docs/v1.3/authorization/client-credentials/</link><pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/authorization/client-credentials/</guid><description>Through the OAuth 2.0 Client Credentials Grant KrakenD can request to your authorization server an access token to reach protected resources.
The client credentials authorize KrakenD, as the client, to access the protected resources. Do not confuse this with authorizing an end-user (see JWT instead).
Successfully setting the client credentials for a backend means that KrakenD can get the protected content, but the endpoint offered to the end-user is going to be public unless you protect it with JWT.</description></item><item><title>OAuth 2.0 Client Credentials</title><link>https://www.krakend.io/docs/v1.4/authorization/client-credentials/</link><pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/authorization/client-credentials/</guid><description>Through the OAuth 2.0 Client Credentials Grant KrakenD can request to your authorization server an access token to reach protected resources.
The client credentials authorize KrakenD, as the client, to access the protected resources. Do not confuse this with authorizing an end-user (see JWT instead).
Successfully setting the client credentials for a backend means that KrakenD can get the protected content, but the endpoint offered to the end-user is going to be public unless you protect it with JWT.</description></item><item><title>Caching backend responses</title><link>https://www.krakend.io/docs/backends/caching/</link><pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/backends/caching/</guid><description>Sometimes you might want to reuse a previous response of a backend instead of asking for the same information over the network again. In this cases, it is possible to enable in-memory caching for the desired backend responses.
This caching technique applies to traffic between KrakenD and your microservices endpoints only and is not a caching system for the end-user endpoints. To enable the cache, you only need to add in the configuration file the qos/httpcache middleware.</description></item><item><title>Caching backend responses</title><link>https://www.krakend.io/docs/enterprise/backends/caching/</link><pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/backends/caching/</guid><description>Sometimes you might want to reuse a previous response of a backend instead of asking for the same information over the network again. In this cases, it is possible to enable in-memory caching for the desired backend responses.
This caching technique applies to traffic between KrakenD and your microservices endpoints only and is not a caching system for the end-user endpoints. To enable the cache, you only need to add in the configuration file the httpcache middleware.</description></item><item><title>Caching backend responses</title><link>https://www.krakend.io/docs/v1.3/backends/caching/</link><pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/backends/caching/</guid><description>Sometimes you might want to reuse a previous response of a backend instead of asking for the same information over the network again. In this cases, it is possible to enable in-memory caching for the desired backend responses.
This caching technique applies to traffic between KrakenD and your microservices endpoints only and is not a caching system for the end-user endpoints. To enable the cache, you only need to add in the configuration file the httpcache middleware.</description></item><item><title>Caching backend responses</title><link>https://www.krakend.io/docs/v1.4/backends/caching/</link><pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/backends/caching/</guid><description>Sometimes you might want to reuse a previous response of a backend instead of asking for the same information over the network again. In this cases, it is possible to enable in-memory caching for the desired backend responses.
This caching technique applies to traffic between KrakenD and your microservices endpoints only and is not a caching system for the end-user endpoints. To enable the cache, you only need to add in the configuration file the httpcache middleware.</description></item><item><title>Response content types</title><link>https://www.krakend.io/docs/endpoints/content-types/</link><pubDate>Thu, 14 Apr 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/endpoints/content-types/</guid><description>KrakenD supports sending responses back to the client using content types other than JSON. The list of supported content types depends on the router package used.
Supported encodings The gateway can work with several content types, even allowing your clients to choose how to consume the content. The following output_encoding strategies are available to choose for every an endpoint:
json: The endpoint always returns a JSON object to the client.</description></item><item><title>Response content types</title><link>https://www.krakend.io/docs/enterprise/endpoints/content-types/</link><pubDate>Thu, 14 Apr 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/endpoints/content-types/</guid><description>KrakenD supports sending responses back to the client using content types other than JSON. The list of supported content types depends on the router package used.
Supported encodings The gateway can work with several content types, even allowing your clients to choose how to consume the content. The following output_encoding strategies are available to choose for every an endpoint:
json: The endpoint always return a response in JSON format to the client.</description></item><item><title>Response content types</title><link>https://www.krakend.io/docs/v1.3/endpoints/content-types/</link><pubDate>Thu, 14 Apr 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/endpoints/content-types/</guid><description>KrakenD supports sending responses back to the client using content types other than JSON. The list of supported content types depends on the router package used.
Supported encodings The gateway can work with several content types, even allowing your clients to choose how to consume the content. The following output_encoding strategies are available to choose for every an endpoint:
json: The endpoint always return a response in JSON format to the client.</description></item><item><title>Response content types</title><link>https://www.krakend.io/docs/v1.4/endpoints/content-types/</link><pubDate>Thu, 14 Apr 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/endpoints/content-types/</guid><description>KrakenD supports sending responses back to the client using content types other than JSON. The list of supported content types depends on the router package used.
Supported encodings The gateway can work with several content types, even allowing your clients to choose how to consume the content. The following output_encoding strategies are available to choose for every an endpoint:
json: The endpoint always returns a JSON object to the client.</description></item><item><title>Advanced HTTP Transport settings</title><link>https://www.krakend.io/docs/service-settings/http-transport-settings/</link><pubDate>Tue, 18 Jan 2022 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/service-settings/http-transport-settings/</guid><description>When KrakenD communicates using http, it implements a concurrent-safe round tripper that supports HTTP, HTTPS, and HTTP proxies, and it caches connections for future re-use. This may leave many open connections when accessing many hosts. You can change the behavior of the transport layer using several settings presented below.
If you want to customize any of the settings below, they must be written at the top level of the configuration.</description></item><item><title>Generate Postman collections</title><link>https://www.krakend.io/docs/enterprise/commands/postman/</link><pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/commands/postman/</guid><description>The Postman Swagger generator is a command line utility embedded in the KrakenD binary, offering the automatic generation of Postman collections. The generation of Postman collections is also available in KrakenD Studio.
Generating the Postman collection The command needed to generate the Postman collection is krakend generate postman:
Command to start KrakenD&amp;nbsp; $krakend&amp;nbsp;generate&amp;nbsp;postman&amp;nbsp;-h&amp;nbsp; &amp;nbsp; `7MMF'&amp;nbsp;`YMM'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`7MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`7MM"""Yb.&amp;nbsp; &amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;.M'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`Yb.&amp;nbsp; &amp;nbsp;&amp;nbsp;MM&amp;nbsp;.d"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`7Mb,od8&amp;nbsp;,6"Yb.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;,MP'.gP"Ya&amp;nbsp;`7MMpMMMb.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`Mb&amp;nbsp; &amp;nbsp;&amp;nbsp;MMMMM.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM'&amp;nbsp;"'8)&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;;Y&amp;nbsp;&amp;nbsp;,M'&amp;nbsp;&amp;nbsp;&amp;nbsp;Yb&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp; &amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;VMA&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,pm9MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM;Mm&amp;nbsp;&amp;nbsp;8M""""""&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,MP&amp;nbsp; &amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;`MM.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;8M&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;`Mb.YM.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,dP'&amp;nbsp; .JMML.&amp;nbsp;&amp;nbsp;&amp;nbsp;MMb..JMML.&amp;nbsp;&amp;nbsp;`Moo9^Yo..JMML.&amp;nbsp;YA.`Mbmmd'.JMML&amp;nbsp;&amp;nbsp;JMML..JMMmmmdP'&amp;nbsp; _______________________________________________________________________&amp;nbsp; &amp;nbsp; Version:&amp;nbsp;1.3.0&amp;nbsp; &amp;nbsp; Generates&amp;nbsp;the&amp;nbsp;Postman&amp;nbsp;descriptor&amp;nbsp;for&amp;nbsp;the&amp;nbsp;gateway&amp;nbsp;based&amp;nbsp;on&amp;nbsp;the&amp;nbsp;configuration&amp;nbsp;file.&amp;nbsp; Usage:&amp;nbsp; &amp;nbsp;&amp;nbsp;krakend&amp;nbsp;generate&amp;nbsp;postman&amp;nbsp;[flags]&amp;nbsp; Examples:&amp;nbsp; krakend&amp;nbsp;generate&amp;nbsp;postman&amp;nbsp;-c&amp;nbsp;config.</description></item><item><title>Sending out logs, metrics, and traces</title><link>https://www.krakend.io/docs/enterprise/telemetry/opencensus/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/telemetry/opencensus/</guid><description>The Opencensus exporter is a single component that allows you to export data to multiple providers, both open source and privative.
You will be interested in Opencensus when you want to see data in one of its supported exporters. For instance, you might want to send metrics to Prometheus. That would be as easy as adding this snippet in the root level of your krakend.json file:
{ &amp;quot;version&amp;quot;: 2, &amp;quot;extra_config&amp;quot;: { &amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;prometheus&amp;quot;: { &amp;quot;port&amp;quot;: 9091 &amp;quot;namespace&amp;quot;: &amp;quot;krakend&amp;quot; } } } } } Configuration The Opencensus only needs an exporter to work, although multiple exporters can be added in the same configuration.</description></item><item><title>Sending out logs, metrics, and traces</title><link>https://www.krakend.io/docs/telemetry/opencensus/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/telemetry/opencensus/</guid><description>The Opencensus exporter is a single component that allows you to export data to multiple providers, both open source and privative.
You will be interested in Opencensus when you want to see data in one of its supported exporters. For instance, you might want to send metrics to Prometheus. That would be as easy as adding this snippet in the root level of your krakend.json file:
{ &amp;#34;version&amp;#34;: 3, &amp;#34;extra_config&amp;#34;: { &amp;#34;telemetry/opencensus&amp;#34;: { &amp;#34;exporters&amp;#34;: { &amp;#34;prometheus&amp;#34;: { &amp;#34;port&amp;#34;: 9091, &amp;#34;namespace&amp;#34;: &amp;#34;krakend&amp;#34; } } } } } Configuration The Opencensus needs at least an exporter to work, although multiple exporters can be added in the same configuration.</description></item><item><title>Sending out logs, metrics, and traces</title><link>https://www.krakend.io/docs/v1.3/telemetry/opencensus/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/telemetry/opencensus/</guid><description>The Opencensus exporter is a single component that allows you to export data to multiple providers, both open source and privative.
You will be interested in Opencensus when you want to see data in one of its supported exporters. For instance, you might want to send metrics to Prometheus. That would be as easy as adding this snippet in the root level of your krakend.json file:
{ &amp;quot;version&amp;quot;: 2, &amp;quot;extra_config&amp;quot;: { &amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;prometheus&amp;quot;: { &amp;quot;port&amp;quot;: 9091 &amp;quot;namespace&amp;quot;: &amp;quot;krakend&amp;quot; } } } } } Configuration The Opencensus only needs an exporter to work, although multiple exporters can be added in the same configuration.</description></item><item><title>Sending out logs, metrics, and traces</title><link>https://www.krakend.io/docs/v1.4/telemetry/opencensus/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/telemetry/opencensus/</guid><description>The Opencensus exporter is a single component that allows you to export data to multiple providers, both open source and privative.
You will be interested in Opencensus when you want to see data in one of its supported exporters. For instance, you might want to send metrics to Prometheus. That would be as easy as adding this snippet in the root level of your krakend.json file:
{ &amp;quot;version&amp;quot;: 2, &amp;quot;extra_config&amp;quot;: { &amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;prometheus&amp;quot;: { &amp;quot;port&amp;quot;: 9091 &amp;quot;namespace&amp;quot;: &amp;quot;krakend&amp;quot; } } } } } Configuration The Opencensus only needs an exporter to work, although multiple exporters can be added in the same configuration.</description></item><item><title>Proxying directly to the backends with `no-op`</title><link>https://www.krakend.io/docs/endpoints/no-op/</link><pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/endpoints/no-op/</guid><description>KrakenD no-op (no-operation), is a special type of encoding that behaves as a proxy by passing the client&amp;rsquo;s request to the backend and returning the response to the client as it is. Without any manipulation or operation.
Using no-op to proxy requests When setting no-op, KrakenD does not inspect the request body or manipulates it in any way. Instead, when a request to a no-op endpoint is received, KrakenD directly forwards it to the backend without doing any operation with it.</description></item><item><title>Proxying directly to the backends with `no-op`</title><link>https://www.krakend.io/docs/enterprise/endpoints/no-op/</link><pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/endpoints/no-op/</guid><description>KrakenD no-op (no-operation), is a special type of encoding that behaves as a proxy by passing the client&amp;rsquo;s request to the backend as is, and vice-versa.
Using no-op to proxy requests When setting no-op, KrakenD does not inspect the request body or manipulates it in any way. Instead, when a request to a no-op endpoint is received, KrakenD directly forwards it to the backend without doing any operation with it.</description></item><item><title>Proxying directly to the backends with `no-op`</title><link>https://www.krakend.io/docs/v1.3/endpoints/no-op/</link><pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/endpoints/no-op/</guid><description>KrakenD no-op (no-operation), is a special type of encoding that behaves as a proxy by passing the client&amp;rsquo;s request to the backend as is, and vice-versa.
Using no-op to proxy requests When setting no-op, KrakenD does not inspect the request body or manipulates it in any way. Instead, when a request to a no-op endpoint is received, KrakenD directly forwards it to the backend without doing any operation with it.</description></item><item><title>Proxying directly to the backends with `no-op`</title><link>https://www.krakend.io/docs/v1.4/endpoints/no-op/</link><pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/endpoints/no-op/</guid><description>KrakenD no-op (no-operation), is a special type of encoding that behaves as a proxy by passing the client&amp;rsquo;s request to the backend as is, and vice-versa.
Using no-op to proxy requests When setting no-op, KrakenD does not inspect the request body or manipulates it in any way. Instead, when a request to a no-op endpoint is received, KrakenD directly forwards it to the backend without doing any operation with it.</description></item><item><title>Sequential Proxy</title><link>https://www.krakend.io/docs/endpoints/sequential-proxy/</link><pubDate>Sun, 11 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/endpoints/sequential-proxy/</guid><description>The best experience consumers can have with KrakenD API is by letting the system fetch all the data from the different backends concurrently at the same time. However, there are times when you need to delay a backend call until you can inject as input the result of a previous call.
The sequential proxy allows you to chain backend requests.
Chaining the requests All you need to enable the sequential proxy is add in the endpoint definition the following configuration:</description></item><item><title>Sequential Proxy</title><link>https://www.krakend.io/docs/enterprise/endpoints/sequential-proxy/</link><pubDate>Sun, 11 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/endpoints/sequential-proxy/</guid><description>The best experience consumers can have with KrakenD API is by letting the system fetch all the data from the different backends concurrently at the same time. However, there are times when you need to delay a backend call until you can inject as input the result of a previous call.
The sequential proxy allows you to chain backend requests.
Chaining the requests All you need to enable the sequential proxy is add in the endpoint definition the following configuration:</description></item><item><title>Sequential Proxy</title><link>https://www.krakend.io/docs/v1.3/endpoints/sequential-proxy/</link><pubDate>Sun, 11 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/endpoints/sequential-proxy/</guid><description>The best experience consumers can have with KrakenD API is by letting the system fetch all the data from the different backends concurrently at the same time. However, there are times when you need to delay a backend call until you can inject as input the result of a previous call.
The sequential proxy allows you to chain backend requests.
Chaining the requests All you need to enable the sequential proxy is add in the endpoint definition the following configuration:</description></item><item><title>Sequential Proxy</title><link>https://www.krakend.io/docs/v1.4/endpoints/sequential-proxy/</link><pubDate>Sun, 11 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/endpoints/sequential-proxy/</guid><description>The best experience consumers can have with KrakenD API is by letting the system fetch all the data from the different backends concurrently at the same time. However, there are times when you need to delay a backend call until you can inject as input the result of a previous call.
The sequential proxy allows you to chain backend requests.
Chaining the requests All you need to enable the sequential proxy is add in the endpoint definition the following configuration:</description></item><item><title>Traffic shadowing or mirroring</title><link>https://www.krakend.io/docs/backends/shadow-backends/</link><pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/backends/shadow-backends/</guid><description>There are times when you have been working in a new version of your microservice, a complete refactor, a dangerous change, or any other valuable change that needs being careful, and it&amp;rsquo;s too risky to put it live as there might be issues that impact your end users.
The traffic shadowing or traffic mirroring functionality allows you to test new backends in production by sending them copies of the traffic but ignore their responses.</description></item><item><title>Traffic shadowing or mirroring</title><link>https://www.krakend.io/docs/enterprise/backends/shadow-backends/</link><pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/backends/shadow-backends/</guid><description>There are times when you have been working in a new version of your microservice, a complete refactor, a dangerous change, or any other valuable change that needs being careful, and it&amp;rsquo;s too risky to put it live as there might be issues that impact your end users.
The traffic shadowing or traffic mirroring functionality allows you to test new backends in production by sending them copies of the traffic but ignore their responses.</description></item><item><title>Traffic shadowing or mirroring</title><link>https://www.krakend.io/docs/v1.3/backends/shadow-backends/</link><pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/backends/shadow-backends/</guid><description>There are times when you have been working in a new version of your microservice, a complete refactor, a dangerous change, or any other valuable change that needs being careful, and it&amp;rsquo;s too risky to put it live as there might be issues that impact your end users.
The traffic shadowing or traffic mirroring functionality allows you to test new backends in production by sending them copies of the traffic but ignore their responses.</description></item><item><title>Traffic shadowing or mirroring</title><link>https://www.krakend.io/docs/v1.4/backends/shadow-backends/</link><pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/backends/shadow-backends/</guid><description>There are times when you have been working in a new version of your microservice, a complete refactor, a dangerous change, or any other valuable change that needs being careful, and it&amp;rsquo;s too risky to put it live as there might be issues that impact your end users.
The traffic shadowing or traffic mirroring functionality allows you to test new backends in production by sending them copies of the traffic but ignore their responses.</description></item><item><title>Maximum IDLE connections</title><link>https://www.krakend.io/docs/enterprise/throttling/max-idle-connections/</link><pubDate>Thu, 04 Jan 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/throttling/max-idle-connections/</guid><description>Having a high number of IDLE connections to every backend affects directly to the performance of the proxy layer. This is why you can control the number using the max_idle_connections setting. For instance:
{ &amp;quot;version&amp;quot;: 2, &amp;quot;max_idle_connections&amp;quot;: 150, ... } KrakenD will close connections sitting idle in a &amp;ldquo;keep-alive&amp;rdquo; state when max_idle_connections is reached. If no value is set in the configuration file, KrakenD will use 250 by default.</description></item><item><title>Maximum IDLE connections</title><link>https://www.krakend.io/docs/v1.3/throttling/max-idle-connections/</link><pubDate>Thu, 04 Jan 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/throttling/max-idle-connections/</guid><description>Having a high number of IDLE connections to every backend affects directly to the performance of the proxy layer. This is why you can control the number using the max_idle_connections setting. For instance:
{ &amp;quot;version&amp;quot;: 2, &amp;quot;max_idle_connections&amp;quot;: 150, ... } KrakenD will close connections sitting idle in a &amp;ldquo;keep-alive&amp;rdquo; state when max_idle_connections is reached. If no value is set in the configuration file, KrakenD will use 250 by default.</description></item><item><title>Maximum IDLE connections</title><link>https://www.krakend.io/docs/v1.4/throttling/max-idle-connections/</link><pubDate>Thu, 04 Jan 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/throttling/max-idle-connections/</guid><description>Having a high number of IDLE connections to every backend affects directly to the performance of the proxy layer. This is why you can control the number using the max_idle_connections setting. For instance:
{ &amp;quot;version&amp;quot;: 2, &amp;quot;max_idle_connections&amp;quot;: 150, ... } KrakenD will close connections sitting idle in a &amp;ldquo;keep-alive&amp;rdquo; state when max_idle_connections is reached. If no value is set in the configuration file, KrakenD will use 250 by default.</description></item><item><title>Generate graphs from your configuration</title><link>https://www.krakend.io/docs/enterprise/commands/config2dot/</link><pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/commands/config2dot/</guid><description>The krakend.json file whether it is a single file or the result of using the flexible configuration, it might be a complex file. A generated image of the configuration might help you understand better the running configuration.
The config2dot generator will generate internally an intermediate DOT dile to immediately render it to a png image.
The following image illustrates an example of a KrakenD configuration:
Generating the Postman collection The command needed to generate the Postman collection is krakend generate postman:</description></item><item><title>Exporting metrics to Prometheus</title><link>https://www.krakend.io/docs/enterprise/telemetry/prometheus/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/telemetry/prometheus/</guid><description>Prometheus is an open-source systems monitoring and alerting toolkit.
The Opencensus exporter allows you push data to Prometheus. Enabling it only requires you to include in the root level of your configuration the Opencensus middleware with the prometheus exporter. Specify the port on which Prometheus is running, the namespace (optional), and Prometheus will start receiving the data.
&amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;prometheus&amp;quot;: { &amp;quot;port&amp;quot;: 9091, &amp;quot;namespace&amp;quot;: &amp;quot;krakend&amp;quot; } } } port on which Prometheus is listening namespace sets the domain the metric belongs to.</description></item><item><title>Exporting metrics to Prometheus</title><link>https://www.krakend.io/docs/telemetry/prometheus/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/telemetry/prometheus/</guid><description>Prometheus is an open-source systems monitoring and alerting toolkit.
The Opencensus exporter allows you to expose data to Prometheus. Enabling it only requires you to include in the root level of your configuration the Opencensus middleware with the prometheus exporter. Specify the port which Prometheus should hit, the namespace (optional), and Prometheus will start receiving the data. { &amp;#34;version&amp;#34;: 3, &amp;#34;extra_config&amp;#34;: { &amp;#34;telemetry/opencensus&amp;#34;: { &amp;#34;exporters&amp;#34;: { &amp;#34;prometheus&amp;#34;: { &amp;#34;port&amp;#34;: 9091, &amp;#34;namespace&amp;#34;: &amp;#34;krakend&amp;#34;, &amp;#34;tag_host&amp;#34;: false, &amp;#34;tag_path&amp;#34;: true, &amp;#34;tag_method&amp;#34;: true, &amp;#34;tag_statuscode&amp;#34;: false } } } } }</description></item><item><title>Exporting metrics to Prometheus</title><link>https://www.krakend.io/docs/v1.3/telemetry/prometheus/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/telemetry/prometheus/</guid><description>Prometheus is an open-source systems monitoring and alerting toolkit.
The Opencensus exporter allows you push data to Prometheus. Enabling it only requires you to include in the root level of your configuration the Opencensus middleware with the prometheus exporter. Specify the port on which Prometheus is running, the namespace (optional), and Prometheus will start receiving the data.
&amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;prometheus&amp;quot;: { &amp;quot;port&amp;quot;: 9091, &amp;quot;namespace&amp;quot;: &amp;quot;krakend&amp;quot; } } } port on which Prometheus is listening namespace sets the domain the metric belongs to.</description></item><item><title>Exporting metrics to Prometheus</title><link>https://www.krakend.io/docs/v1.4/telemetry/prometheus/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/telemetry/prometheus/</guid><description>Prometheus is an open-source systems monitoring and alerting toolkit.
The Opencensus exporter allows you to expose data to Prometheus. Enabling it only requires you to include in the root level of your configuration the Opencensus middleware with the prometheus exporter. Specify the port which Prometheus should hit, the namespace (optional), and Prometheus will start receiving the data. { &amp;#34;version&amp;#34;: 2, &amp;#34;extra_config&amp;#34;: { &amp;#34;github_com/devopsfaith/krakend-opencensus&amp;#34;: { &amp;#34;exporters&amp;#34;: { &amp;#34;prometheus&amp;#34;: { &amp;#34;port&amp;#34;: 9091, &amp;#34;namespace&amp;#34;: &amp;#34;krakend&amp;#34;, &amp;#34;tag_host&amp;#34;: false, &amp;#34;tag_path&amp;#34;: true, &amp;#34;tag_method&amp;#34;: true, &amp;#34;tag_statuscode&amp;#34;: false } } } } }</description></item><item><title>Array manipulation - flatmap</title><link>https://www.krakend.io/docs/backends/flatmap/</link><pubDate>Fri, 05 Apr 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/backends/flatmap/</guid><description>The flatmap middleware allows you to manipulate collections (or arrays, or lists, you name it) from the backend response. While the basic manipulation operations allow you to work directly with objects, the collections require a different approach: the flatmap component.
When working with lists, KrakenD needs to flatten and expand array structures to objects to operate with them, and vice versa. This process is automatically done by the flatmap component, letting you concentrate only on the type of operation you want to execute.</description></item><item><title>Array manipulation - flatmap</title><link>https://www.krakend.io/docs/enterprise/backends/flatmap/</link><pubDate>Fri, 05 Apr 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/backends/flatmap/</guid><description>The flatmap middleware allows you to manipulate collections (or arrays, or lists, you name it). While the basic manipulation operations allow you to work directly with objects, the collections require a different approach: the flatmap component.
When working with lists, KrakenD needs to flatten and expand array structures to objects to operate with them, and vice versa. This process is automatically done by the flatmap component, letting you concentrate only on the type of operation you want to execute.</description></item><item><title>Array manipulation - flatmap</title><link>https://www.krakend.io/docs/v1.3/backends/flatmap/</link><pubDate>Fri, 05 Apr 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/backends/flatmap/</guid><description>The flatmap middleware allows you to manipulate collections (or arrays, or lists, you name it). While the basic manipulation operations allow you to work directly with objects, the collections require a different approach: the flatmap component.
When working with lists, KrakenD needs to flatten and expand array structures to objects to operate with them, and vice versa. This process is automatically done by the flatmap component, letting you concentrate only on the type of operation you want to execute.</description></item><item><title>Array manipulation - flatmap</title><link>https://www.krakend.io/docs/v1.4/backends/flatmap/</link><pubDate>Fri, 05 Apr 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/backends/flatmap/</guid><description>The flatmap middleware allows you to manipulate collections (or arrays, or lists, you name it). While the basic manipulation operations allow you to work directly with objects, the collections require a different approach: the flatmap component.
When working with lists, KrakenD needs to flatten and expand array structures to objects to operate with them, and vice versa. This process is automatically done by the flatmap component, letting you concentrate only on the type of operation you want to execute.</description></item><item><title>Static Proxy - Adding static/stub data</title><link>https://www.krakend.io/docs/endpoints/static-proxy/</link><pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/endpoints/static-proxy/</guid><description>The static proxy is an aid to clients dealing with incomplete and other types of degraded responses. When enabled, the static proxy injects static data in the final response when the behavior of a backend falls in the selected strategy.
A typical scenario is when some backend fails and the endpoint becomes incomplete, but you prefer to provide a stub response for that part instead. When your application cannot handle well the degraded response, the static data comes handy.</description></item><item><title>Static Proxy - Adding static/stub data</title><link>https://www.krakend.io/docs/enterprise/endpoints/static-proxy/</link><pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/endpoints/static-proxy/</guid><description>The static proxy is an aid to clients dealing with incomplete and other types of degraded responses. When enabled, the static proxy injects static data in the final response when the behavior of a backend falls in the selected strategy.
A typical scenario is when some backend fails and the endpoint becomes incomplete, but you prefer to provide a stub response for that part instead. When your application cannot handle well the degraded response, the static data comes handy.</description></item><item><title>Static Proxy - Adding static/stub data</title><link>https://www.krakend.io/docs/v1.3/endpoints/static-proxy/</link><pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/endpoints/static-proxy/</guid><description>The static proxy is an aid to clients dealing with incomplete and other types of degraded responses. When enabled, the static proxy injects static data in the final response when the behavior of a backend falls in the selected strategy.
A typical scenario is when some backend fails and the endpoint becomes incomplete, but you prefer to provide a stub response for that part instead. When your application cannot handle well the degraded response, the static data comes handy.</description></item><item><title>Static Proxy - Adding static/stub data</title><link>https://www.krakend.io/docs/v1.4/endpoints/static-proxy/</link><pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/endpoints/static-proxy/</guid><description>The static proxy is an aid to clients dealing with incomplete and other types of degraded responses. When enabled, the static proxy injects static data in the final response when the behavior of a backend falls in the selected strategy.
A typical scenario is when some backend fails and the endpoint becomes incomplete, but you prefer to provide a stub response for that part instead. When your application cannot handle well the degraded response, the static data comes handy.</description></item><item><title>Exporting metrics and events to InfluxDB</title><link>https://www.krakend.io/docs/enterprise/telemetry/influxdb/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/telemetry/influxdb/</guid><description>InfluxDB is a time series database designed to handle high write and query loads.
The Opencensus exporter allows you export data to InfluxDB for monitoring metrics and events. Enabling it only requires you to add the influxdb exporter in the opencensus module.
The following configuration snippet sends data to your InfluxDB:
&amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;influxdb&amp;quot;: { &amp;quot;address&amp;quot;: &amp;quot;http://192.168.99.100:8086&amp;quot;, &amp;quot;db&amp;quot;: &amp;quot;krakend&amp;quot;, &amp;quot;timeout&amp;quot;: &amp;quot;1s&amp;quot;, &amp;quot;username&amp;quot;: &amp;quot;your-influxdb-user&amp;quot;, &amp;quot;password&amp;quot;: &amp;quot;your-influxdb-password&amp;quot; }, } } address is the URL (including port) where your InfluxDB is installed.</description></item><item><title>Exporting metrics and events to InfluxDB</title><link>https://www.krakend.io/docs/v1.3/telemetry/influxdb/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/telemetry/influxdb/</guid><description>InfluxDB is a time series database designed to handle high write and query loads.
The Opencensus exporter allows you export data to InfluxDB for monitoring metrics and events. Enabling it only requires you to add the influxdb exporter in the opencensus module.
The following configuration snippet sends data to your InfluxDB:
&amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;influxdb&amp;quot;: { &amp;quot;address&amp;quot;: &amp;quot;http://192.168.99.100:8086&amp;quot;, &amp;quot;db&amp;quot;: &amp;quot;krakend&amp;quot;, &amp;quot;timeout&amp;quot;: &amp;quot;1s&amp;quot;, &amp;quot;username&amp;quot;: &amp;quot;your-influxdb-user&amp;quot;, &amp;quot;password&amp;quot;: &amp;quot;your-influxdb-password&amp;quot; }, } } address is the URL (including port) where your InfluxDB is installed.</description></item><item><title>Exporting metrics and events to InfluxDB</title><link>https://www.krakend.io/docs/v1.4/telemetry/influxdb/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/telemetry/influxdb/</guid><description>InfluxDB is a time series database designed to handle high write and query loads.
The Opencensus exporter allows you export data to InfluxDB for monitoring metrics and events. Enabling it only requires you to add the influxdb exporter in the opencensus module.
The following configuration snippet sends data to your InfluxDB:
&amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;influxdb&amp;quot;: { &amp;quot;address&amp;quot;: &amp;quot;http://192.168.99.100:8086&amp;quot;, &amp;quot;db&amp;quot;: &amp;quot;krakend&amp;quot;, &amp;quot;timeout&amp;quot;: &amp;quot;1s&amp;quot;, &amp;quot;username&amp;quot;: &amp;quot;your-influxdb-user&amp;quot;, &amp;quot;password&amp;quot;: &amp;quot;your-influxdb-password&amp;quot; }, } } address is the URL (including port) where your InfluxDB is installed.</description></item><item><title>Checking requests and responses with the Common Expression Language (CEL)</title><link>https://www.krakend.io/docs/enterprise/endpoints/common-expression-language-cel/</link><pubDate>Thu, 24 Jan 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/endpoints/common-expression-language-cel/</guid><description>There are times when you might want to include additional logic in the gateway to decide if a request has to be fulfilled or not.
The Common Expression Language (CEL) middleware enables Google&amp;rsquo;s CEL spec which implements common semantics for expression evaluation, and is a very simple and powerful option to have full control during requests and responses.
When the CEL component is enabled, any amount of expressions to check both requests and responses can be set.</description></item><item><title>Checking requests and responses with the Common Expression Language (CEL)</title><link>https://www.krakend.io/docs/v1.3/endpoints/common-expression-language-cel/</link><pubDate>Thu, 24 Jan 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/endpoints/common-expression-language-cel/</guid><description>There are times when you might want to include additional logic in the gateway to decide if a request has to be fulfilled or not.
The Common Expression Language (CEL) middleware enables Google&amp;rsquo;s CEL spec which implements common semantics for expression evaluation, and is a very simple and powerful option to have full control during requests and responses.
When the CEL component is enabled, any amount of expressions to check both requests and responses can be set.</description></item><item><title>Checking requests and responses with the Common Expression Language (CEL)</title><link>https://www.krakend.io/docs/v1.4/endpoints/common-expression-language-cel/</link><pubDate>Thu, 24 Jan 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/endpoints/common-expression-language-cel/</guid><description>There are times when you might want to include additional logic in the gateway to decide if a request has to be fulfilled or not.
The Common Expression Language (CEL) middleware enables Google&amp;rsquo;s CEL spec which implements common semantics for expression evaluation, and is a very simple and powerful option to have full control during requests and responses.
When the CEL component is enabled, any amount of expressions to check both requests and responses can be set.</description></item><item><title>Conditional requests and responses with CEL</title><link>https://www.krakend.io/docs/endpoints/common-expression-language-cel/</link><pubDate>Thu, 24 Jan 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/endpoints/common-expression-language-cel/</guid><description>There are times when you might want to incorporate additional logic to check if the gateway has to skip the backend call. For example, maybe the request from the user is undoubtedly wrong, and there is no point in adding more traffic to your backends.
There are other times that you might need to skip returning the response because after parsing it you realize that it is not worth showing it to the user.</description></item><item><title>Modify requests and responses with Martian</title><link>https://www.krakend.io/docs/backends/martian/</link><pubDate>Thu, 24 Jan 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/backends/martian/</guid><description>The krakend-martian component allows you to transform requests and responses through a simple DSL definition in the configuration file. Martian works perfectly in combination with CEL verifications.
Use Martian when you want to intercept the request of the end-user and make modifications before passing the content to the backends. Also, the other way around, transform the backends response before passing it to the user.
Martian is mighty and gives you endless possibilities to control what is going in and out the gateway.</description></item><item><title>Modify requests and responses with Martian</title><link>https://www.krakend.io/docs/enterprise/backends/martian/</link><pubDate>Thu, 24 Jan 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/backends/martian/</guid><description>The krakend-martian component allows you to transform requests and responses through a simple DSL definition in the configuration file. Martian works perfectly in combination with CEL verifications.
Use Martian when you want to intercept the request of the end-user and make modifications before passing the content to the backends. Also, the other way around, transform the backends response before passing it to the user.
Martian is mighty and gives you endless possibilities to control what is going in and out the gateway.</description></item><item><title>Modify requests and responses with Martian</title><link>https://www.krakend.io/docs/v1.3/backends/martian/</link><pubDate>Thu, 24 Jan 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/backends/martian/</guid><description>The krakend-martian component allows you to transform requests and responses through a simple DSL definition in the configuration file. Martian works perfectly in combination with CEL verifications.
Use Martian when you want to intercept the request of the end-user and make modifications before passing the content to the backends. Also, the other way around, transform the backends response before passing it to the user.
Martian is mighty and gives you endless possibilities to control what is going in and out the gateway.</description></item><item><title>Modify requests and responses with Martian</title><link>https://www.krakend.io/docs/v1.4/backends/martian/</link><pubDate>Thu, 24 Jan 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/backends/martian/</guid><description>The krakend-martian component allows you to transform requests and responses through a simple DSL definition in the configuration file. Martian works perfectly in combination with CEL verifications.
Use Martian when you want to intercept the request of the end-user and make modifications before passing the content to the backends. Also, the other way around, transform the backends response before passing it to the user.
Martian is mighty and gives you endless possibilities to control what is going in and out the gateway.</description></item><item><title>Exporting traces to Datadog</title><link>https://www.krakend.io/docs/enterprise/telemetry/datadog/</link><pubDate>Fri, 24 Jul 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/telemetry/datadog/</guid><description>Datadog is a monitoring and security platform for developers, IT operations teams and business in the cloud.
Datadog configuration The Opencensus exporter allows you export data to Datadog. Enabling it only requires you to add the datadog exporter in the opencensus module.
The following configuration snippet sends data to your Datadog:
&amp;quot;extra_config&amp;quot;: { &amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;datadog&amp;quot;: { &amp;quot;tags&amp;quot;: [ &amp;quot;gw&amp;quot; ], &amp;quot;global_tags&amp;quot;: { &amp;quot;env&amp;quot;: &amp;quot;prod&amp;quot; }, &amp;quot;disable_count_per_buckets&amp;quot;: true, &amp;quot;trace_address&amp;quot;: &amp;quot;localhost:8126&amp;quot;, &amp;quot;stats_address&amp;quot;: &amp;quot;localhost:8125&amp;quot;, &amp;quot;namespace&amp;quot;: &amp;quot;krakend&amp;quot;, &amp;quot;service&amp;quot;: &amp;quot;gateway&amp;quot; } } } } tags (list) specifies a set of global tags to attach to each metric global_tags (object) GlobalTags holds a set of tags (key/value) that will automatically be applied to all exported spans.</description></item><item><title>Exporting traces to Datadog</title><link>https://www.krakend.io/docs/telemetry/datadog/</link><pubDate>Fri, 24 Jul 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/telemetry/datadog/</guid><description>Datadog is a monitoring and security platform for developers, IT operations teams and business in the cloud.
Datadog configuration The Opencensus exporter allows you export data to Datadog. Enabling it only requires you to add the datadog exporter in the opencensus module.
The following configuration snippet sends data to your Datadog: { &amp;#34;extra_config&amp;#34;: { &amp;#34;telemetry/opencensus&amp;#34;: { &amp;#34;exporters&amp;#34;: { &amp;#34;datadog&amp;#34;: { &amp;#34;tags&amp;#34;: [ &amp;#34;gw&amp;#34; ], &amp;#34;global_tags&amp;#34;: { &amp;#34;env&amp;#34;: &amp;#34;prod&amp;#34; }, &amp;#34;disable_count_per_buckets&amp;#34;: true, &amp;#34;trace_address&amp;#34;: &amp;#34;localhost:8126&amp;#34;, &amp;#34;stats_address&amp;#34;: &amp;#34;localhost:8125&amp;#34;, &amp;#34;namespace&amp;#34;: &amp;#34;krakend&amp;#34;, &amp;#34;service&amp;#34;: &amp;#34;gateway&amp;#34; } } } } }</description></item><item><title>Exporting traces to Datadog</title><link>https://www.krakend.io/docs/v1.3/telemetry/datadog/</link><pubDate>Fri, 24 Jul 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/telemetry/datadog/</guid><description>Datadog is a monitoring and security platform for developers, IT operations teams and business in the cloud.
Datadog configuration The Opencensus exporter allows you export data to Datadog. Enabling it only requires you to add the datadog exporter in the opencensus module.
The following configuration snippet sends data to your Datadog:
&amp;quot;extra_config&amp;quot;: { &amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;datadog&amp;quot;: { &amp;quot;tags&amp;quot;: [ &amp;quot;gw&amp;quot; ], &amp;quot;global_tags&amp;quot;: { &amp;quot;env&amp;quot;: &amp;quot;prod&amp;quot; }, &amp;quot;disable_count_per_buckets&amp;quot;: true, &amp;quot;trace_address&amp;quot;: &amp;quot;localhost:8126&amp;quot;, &amp;quot;stats_address&amp;quot;: &amp;quot;localhost:8125&amp;quot;, &amp;quot;namespace&amp;quot;: &amp;quot;krakend&amp;quot;, &amp;quot;service&amp;quot;: &amp;quot;gateway&amp;quot; } } } } tags (list) specifies a set of global tags to attach to each metric global_tags (object) GlobalTags holds a set of tags (key/value) that will automatically be applied to all exported spans.</description></item><item><title>Exporting traces to Datadog</title><link>https://www.krakend.io/docs/v1.4/telemetry/datadog/</link><pubDate>Fri, 24 Jul 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/telemetry/datadog/</guid><description>Datadog is a monitoring and security platform for developers, IT operations teams and business in the cloud.
Datadog configuration The Opencensus exporter allows you export data to Datadog. Enabling it only requires you to add the datadog exporter in the opencensus module.
The following configuration snippet sends data to your Datadog:
&amp;quot;extra_config&amp;quot;: { &amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;datadog&amp;quot;: { &amp;quot;tags&amp;quot;: [ &amp;quot;gw&amp;quot; ], &amp;quot;global_tags&amp;quot;: { &amp;quot;env&amp;quot;: &amp;quot;prod&amp;quot; }, &amp;quot;disable_count_per_buckets&amp;quot;: true, &amp;quot;trace_address&amp;quot;: &amp;quot;localhost:8126&amp;quot;, &amp;quot;stats_address&amp;quot;: &amp;quot;localhost:8125&amp;quot;, &amp;quot;namespace&amp;quot;: &amp;quot;krakend&amp;quot;, &amp;quot;service&amp;quot;: &amp;quot;gateway&amp;quot; } } } } tags (list) specifies a set of global tags to attach to each metric global_tags (object) GlobalTags holds a set of tags (key/value) that will automatically be applied to all exported spans.</description></item><item><title>Transformations using Lua scripting</title><link>https://www.krakend.io/docs/endpoints/lua/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/endpoints/lua/</guid><description>Scripting with Lua is an additional choice to extend your business logic, and is compatible with the rest of options such as CEL, Martian, or other Go plugins and middlewares.
If you are more familiar with Lua than Go, this module can help you solve exceptional cases that need solution using a little bit of scripting. The introduction of Lua scripts in your Gateway does not require to recompile KrakenD, but unlike Go, Lua scripts are interpreted in real-time.</description></item><item><title>Transformations using Lua scripting</title><link>https://www.krakend.io/docs/enterprise/endpoints/lua/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/endpoints/lua/</guid><description>Scripting with Lua is an additional choice to extend your business logic, and is compatible with the rest of options such as CEL, Martian, or other Go plugins and middlewares.
If you are more familiar with Lua than Go, this module can help you solve exceptional cases that need solution using a little bit of scripting. The introduction of Lua scripts in your Gateway does not require to recompile KrakenD, but unlike Go, Lua scripts are interpreted in real-time.</description></item><item><title>Transformations using Lua scripting</title><link>https://www.krakend.io/docs/v1.3/endpoints/lua/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/endpoints/lua/</guid><description>Scripting with Lua is an additional choice to extend your business logic, and is compatible with the rest of options such as CEL, Martian, or other Go plugins and middlewares.
If you are more familiar with Lua than Go, this module can help you solve exceptional cases that need solution using a little bit of scripting. The introduction of Lua scripts in your Gateway does not require to recompile KrakenD, but unlike Go, Lua scripts are interpreted in real-time.</description></item><item><title>Transformations using Lua scripting</title><link>https://www.krakend.io/docs/v1.4/endpoints/lua/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/endpoints/lua/</guid><description>Scripting with Lua is an additional choice to extend your business logic, and is compatible with the rest of options such as CEL, Martian, or other Go plugins and middlewares.
If you are more familiar with Lua than Go, this module can help you solve exceptional cases that need solution using a little bit of scripting. The introduction of Lua scripts in your Gateway does not require to recompile KrakenD, but unlike Go, Lua scripts are interpreted in real-time.</description></item><item><title>Exporting traces to Zipkin</title><link>https://www.krakend.io/docs/enterprise/telemetry/zipkin/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/telemetry/zipkin/</guid><description>Zipkin is a distributed tracing system. It helps gather timing data needed to troubleshoot latency problems in service architectures.
The Opencensus exporter allows you export data to Zipkin. Enabling it only requires you to add the zipkin exporter in the opencensus module.
The following configuration snippet sends data to your Zipkin:
&amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;zipkin&amp;quot;: { &amp;quot;collector_url&amp;quot;: &amp;quot;http://192.168.99.100:9411/api/v2/spans&amp;quot;, &amp;quot;service_name&amp;quot;: &amp;quot;krakend&amp;quot; }, } } collector_url is the URL (including port and path) where your Zipkin is accepting the spans service_name the service name registered in Zipkin See also the additional settings of the Opencensus module that can be declared.</description></item><item><title>Exporting traces to Zipkin</title><link>https://www.krakend.io/docs/telemetry/zipkin/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/telemetry/zipkin/</guid><description>Zipkin is a distributed tracing system. It helps gather timing data needed to troubleshoot latency problems in service architectures.
The Opencensus exporter allows you export data to Zipkin. Enabling it only requires you to add the zipkin exporter in the opencensus module.
The following configuration snippet sends data to your Zipkin: { &amp;#34;extra_config&amp;#34;: { &amp;#34;telemetry/opencensus&amp;#34;: { &amp;#34;exporters&amp;#34;: { &amp;#34;zipkin&amp;#34;: { &amp;#34;collector_url&amp;#34;: &amp;#34;http://192.168.99.100:9411/api/v2/spans&amp;#34;, &amp;#34;service_name&amp;#34;: &amp;#34;krakend&amp;#34; } } } } }
collector_url is the URL (including port and path) where your Zipkin is accepting the spans service_name the service name registered in Zipkin See also the additional settings of the Opencensus module that can be declared.</description></item><item><title>Exporting traces to Zipkin</title><link>https://www.krakend.io/docs/v1.3/telemetry/zipkin/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/telemetry/zipkin/</guid><description>Zipkin is a distributed tracing system. It helps gather timing data needed to troubleshoot latency problems in service architectures.
The Opencensus exporter allows you export data to Zipkin. Enabling it only requires you to add the zipkin exporter in the opencensus module.
The following configuration snippet sends data to your Zipkin:
&amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;zipkin&amp;quot;: { &amp;quot;collector_url&amp;quot;: &amp;quot;http://192.168.99.100:9411/api/v2/spans&amp;quot;, &amp;quot;service_name&amp;quot;: &amp;quot;krakend&amp;quot; }, } } collector_url is the URL (including port and path) where your Zipkin is accepting the spans service_name the service name registered in Zipkin See also the additional settings of the Opencensus module that can be declared.</description></item><item><title>Exporting traces to Zipkin</title><link>https://www.krakend.io/docs/v1.4/telemetry/zipkin/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/telemetry/zipkin/</guid><description>Zipkin is a distributed tracing system. It helps gather timing data needed to troubleshoot latency problems in service architectures.
The Opencensus exporter allows you export data to Zipkin. Enabling it only requires you to add the zipkin exporter in the opencensus module.
The following configuration snippet sends data to your Zipkin:
&amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;zipkin&amp;quot;: { &amp;quot;collector_url&amp;quot;: &amp;quot;http://192.168.99.100:9411/api/v2/spans&amp;quot;, &amp;quot;service_name&amp;quot;: &amp;quot;krakend&amp;quot; }, } } collector_url is the URL (including port and path) where your Zipkin is accepting the spans service_name the service name registered in Zipkin See also the additional settings of the Opencensus module that can be declared.</description></item><item><title>API Gateway integration with AMQP messaging</title><link>https://www.krakend.io/docs/enterprise/backends/amqp/</link><pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/backends/amqp/</guid><description>The AMQP component allows to send and receive messages to and from a queue through the API Gateway.
The configuration of the queue is a straightforward process. To connect the endpoints to the messaging system you only need to include the extra_config key with the namespaces github.com/devopsfaith/krakend-amqp/consume or github.com/devopsfaith/krakend-amqp/produce.
The parameters of this integration follow the AMQP specification. To understand what are the implications of a certain parameter, see the AMQP Complete Reference Guide.</description></item><item><title>API Gateway integration with AMQP messaging</title><link>https://www.krakend.io/docs/v1.3/backends/amqp/</link><pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/backends/amqp/</guid><description>The AMQP component allows to send and receive messages to and from a queue through the API Gateway.
The configuration of the queue is a straightforward process. To connect the endpoints to the messaging system you only need to include the extra_config key with the namespaces github.com/devopsfaith/krakend-amqp/consume or github.com/devopsfaith/krakend-amqp/produce.
The parameters of this integration follow the AMQP specification. To understand what are the implications of a certain parameter, see the AMQP Complete Reference Guide.</description></item><item><title>API Gateway integration with AMQP messaging</title><link>https://www.krakend.io/docs/v1.4/backends/amqp/</link><pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/backends/amqp/</guid><description>The AMQP component allows to send and receive messages to and from a queue through the API Gateway.
The configuration of the queue is a straightforward process. To connect the endpoints to the messaging system you only need to include the extra_config key with the namespaces github.com/devopsfaith/krakend-amqp/consume or github.com/devopsfaith/krakend-amqp/produce.
The parameters of this integration follow the AMQP specification. To understand what are the implications of a certain parameter, see the AMQP Complete Reference Guide.</description></item><item><title>Gateway integration with RabbitMQ consumers</title><link>https://www.krakend.io/docs/backends/amqp-consumer/</link><pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/backends/amqp-consumer/</guid><description>The AMQP component allows to send and receive messages to and from a queue through the API Gateway.
The configuration of the queue is a straightforward process. To connect the endpoints to the messaging system you only need to include the extra_config key with the namespaces backend/amqp/consumer or backend/amqp/producer.
To create Async agents that consume messages asynchronously and without requiring a user request, see Async Agents.
The parameters of this integration follow the AMQP specification.</description></item><item><title>Gateway integration with RabbitMQ producers</title><link>https://www.krakend.io/docs/backends/amqp-producer/</link><pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/backends/amqp-producer/</guid><description>The AMQP producer component allows to send messages to a queue through the API Gateway.
The configuration of the queue is a straightforward process. To connect the endpoints to the messaging system you only need to include the extra_config key with the namespace backend/amqp/producer.
The parameters of this integration follow the AMQP specification. To understand what are the implications of a certain parameter, see the AMQP Complete Reference Guide.
KrakenD creates both the exchange and the queue for you.</description></item><item><title>Stateless rate-limiting on clusters</title><link>https://www.krakend.io/docs/throttling/cluster/</link><pubDate>Fri, 28 Jan 2022 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/throttling/cluster/</guid><description>The stateless rate-limiting is the recommended approach for almost all scenarios. As the API Gateway does not have any centralization, the limits apply individually to each running instance of KrakenD.
Global rate limit If you prefer not to use a stateless rate limit, the KrakenD Enterprise edition has a stateful Redis-backed rate limit where counters are shared amongst all nodes. Working in a cluster implies applying the limits taking into account the deployment size.</description></item><item><title>Wildcard routes</title><link>https://www.krakend.io/docs/enterprise/endpoints/wildcard/</link><pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/endpoints/wildcard/</guid><description>The krakend-wildcard plugin allows you that URLs starting with known patterns are forwarded to a common endpoint, without needing to declare all possible routes. For instance, you want to forward all traffic to /foo/* (with any nesting levels) to a specific backend.
Adding wildcard routes Let&amp;rsquo;s say you define the wildcard pattern /foo. It could match with URLs like the ones below:
/foo /foo/a?x=1 /foo/a/b/c/d /foo/* Wildcard paths are not regexp patterns, but literal matches of an URL and all its subresources.</description></item><item><title>Serving or using static content</title><link>https://www.krakend.io/docs/enterprise/endpoints/serve-static-content/</link><pubDate>Thu, 28 Jan 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/endpoints/serve-static-content/</guid><description>The krakend-static-live plugin allows you to fetch and serve static content in two different use cases. When the plugin is used as an http server handler, the static content is for your end-users, giving them CSS, JS, images, or JSON files, to name a few examples. On the other side, when the plugin is used as an http client executor, the KrakenD endpoints use static content as if it were a backend.</description></item><item><title>Exporting traces to Jaeger</title><link>https://www.krakend.io/docs/telemetry/jaeger/</link><pubDate>Fri, 11 Oct 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/telemetry/jaeger/</guid><description>Jaeger is an open source, end-to-end distributed tracing system that allows you to monitor and troubleshoot transactions in complex distributed systems.
The Opencensus exporter allows you export data to Jaeger. Enabling it only requires you to add the jaeger exporter in the opencensus module.
The following configuration snippet sends data to your Jaeger: { &amp;#34;extra_config&amp;#34;:{ &amp;#34;telemetry/opencensus&amp;#34;: { &amp;#34;exporters&amp;#34;: { &amp;#34;jaeger&amp;#34;: { &amp;#34;endpoint&amp;#34;: &amp;#34;http://192.168.99.100:14268/api/traces&amp;#34;, &amp;#34;service_name&amp;#34;:&amp;#34;krakend&amp;#34;, &amp;#34;buffer_max_count&amp;#34;: 1000 }, } } } }</description></item><item><title>Exporting traces to Jaeger</title><link>https://www.krakend.io/docs/enterprise/telemetry/jaeger/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/telemetry/jaeger/</guid><description>Jaeger is an open source, end-to-end distributed tracing system that allows you to monitor and troubleshoot transactions in complex distributed systems.
The Opencensus exporter allows you export data to Jaeger. Enabling it only requires you to add the jaeger exporter in the opencensus module.
The following configuration snippet sends data to your Jaeger:
&amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;jaeger&amp;quot;: { &amp;quot;endpoint&amp;quot;: &amp;quot;http://192.168.99.100:14268/api/traces&amp;quot;, &amp;quot;service_name&amp;quot;:&amp;quot;krakend&amp;quot; }, } } endpoint is the URL (including port) where your Jaeger is service_name the service name registered in Jaeger See also the additional settings of the Opencensus module that can be declared.</description></item><item><title>Exporting traces to Jaeger</title><link>https://www.krakend.io/docs/v1.3/telemetry/jaeger/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/telemetry/jaeger/</guid><description>Jaeger is an open source, end-to-end distributed tracing system that allows you to monitor and troubleshoot transactions in complex distributed systems.
The Opencensus exporter allows you export data to Jaeger. Enabling it only requires you to add the jaeger exporter in the opencensus module.
The following configuration snippet sends data to your Jaeger:
&amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;jaeger&amp;quot;: { &amp;quot;endpoint&amp;quot;: &amp;quot;http://192.168.99.100:14268/api/traces&amp;quot;, &amp;quot;service_name&amp;quot;:&amp;quot;krakend&amp;quot; }, } } endpoint is the URL (including port) where your Jaeger is service_name the service name registered in Jaeger See also the additional settings of the Opencensus module that can be declared.</description></item><item><title>Exporting traces to Jaeger</title><link>https://www.krakend.io/docs/v1.4/telemetry/jaeger/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/telemetry/jaeger/</guid><description>Jaeger is an open source, end-to-end distributed tracing system that allows you to monitor and troubleshoot transactions in complex distributed systems.
The Opencensus exporter allows you export data to Jaeger. Enabling it only requires you to add the jaeger exporter in the opencensus module.
The following configuration snippet sends data to your Jaeger:
&amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;jaeger&amp;quot;: { &amp;quot;endpoint&amp;quot;: &amp;quot;http://192.168.99.100:14268/api/traces&amp;quot;, &amp;quot;service_name&amp;quot;:&amp;quot;krakend&amp;quot; }, } } endpoint is the URL (including port) where your Jaeger is service_name the service name registered in Jaeger See also the additional settings of the Opencensus module that can be declared.</description></item><item><title>Using publisher/subscribe as backends</title><link>https://www.krakend.io/docs/backends/pubsub/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/backends/pubsub/</guid><description>Since KrakenD 1.0 you can connect an endpoint to multiple publish/subscribe backends, helping you integrate with event driven architectures. For instance, a frontend client can push events to a queue using a REST interface. Or a client could consume a REST endpoint that is plugged to the last events pushed in a backend. You can even validate messages and formats as all the KrakenD available middleware can be used. The list of supported backend technologies is:</description></item><item><title>Using publisher/subscribe as backends</title><link>https://www.krakend.io/docs/enterprise/backends/pubsub/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/backends/pubsub/</guid><description>Since KrakenD 1.0 you can connect an endpoint to multiple publish/subscribe backends, helping you integrate with event driven architectures. For instance, a frontend client can push events to a queue using a REST interface. Or a client could consume a REST endpoint that is plugged to the last events pushed in a backend. You can even validate messages and formats as all the KrakenD available middleware can be used. The list of supported backend technologies is:</description></item><item><title>Using publisher/subscribe as backends</title><link>https://www.krakend.io/docs/v1.3/backends/pubsub/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/backends/pubsub/</guid><description>Since KrakenD 1.0 you can connect an endpoint to multiple publish/subscribe backends, helping you integrate with event driven architectures. For instance, a frontend client can push events to a queue using a REST interface. Or a client could consume a REST endpoint that is plugged to the last events pushed in a backend. You can even validate messages and formats as all the KrakenD available middleware can be used. The list of supported backend technologies is:</description></item><item><title>Using publisher/subscribe as backends</title><link>https://www.krakend.io/docs/v1.4/backends/pubsub/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/backends/pubsub/</guid><description>Since KrakenD 1.0 you can connect an endpoint to multiple publish/subscribe backends, helping you integrate with event driven architectures. For instance, a frontend client can push events to a queue using a REST interface. Or a client could consume a REST endpoint that is plugged to the last events pushed in a backend. You can even validate messages and formats as all the KrakenD available middleware can be used. The list of supported backend technologies is:</description></item><item><title>Lura vs. KrakenD</title><link>https://www.krakend.io/docs/enterprise/overview/krakend-vs-krakend-ce/</link><pubDate>Sat, 23 Jun 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/overview/krakend-vs-krakend-ce/</guid><description>If you had a quick look at our git repositories or the documentation, you might be confused at first, as there is something called the Lura Project and also KrakenD.
TL;DR; Difference between Lura, KrakenD, and Enterprise Lura is the KrakenD&amp;rsquo;s engine. Formerly known as &amp;ldquo;KrakenD framework&amp;rdquo; until we donated it to The Linux Foundation on 2021. It is not a product itself but a set of libraries. KrakenD is our open-source API Gateway ready to use KrakenD Enterprise is our commercial version, including services to businesses Lura Project The Lura Project is our original KrakenD framework that we donated to The Linux Foundation on 2021.</description></item><item><title>Lura vs. KrakenD</title><link>https://www.krakend.io/docs/overview/lura-vs-krakend/</link><pubDate>Sat, 23 Jun 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/overview/lura-vs-krakend/</guid><description>If you had a quick look at our git repositories or the documentation, you might be confused at first, as there is something called the Lura Project and also KrakenD.
TL;DR; Difference between Lura, KrakenD, and Enterprise Lura is the KrakenD&amp;rsquo;s engine. Formerly known as &amp;ldquo;KrakenD framework&amp;rdquo; until we donated it to The Linux Foundation on 2021. It is not a product itself but a toolkit/set of libraries to build API gateways.</description></item><item><title>Lura vs. KrakenD</title><link>https://www.krakend.io/docs/v1.3/overview/krakend-vs-krakend-ce/</link><pubDate>Sat, 23 Jun 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/overview/krakend-vs-krakend-ce/</guid><description>If you had a quick look at our git repositories or the documentation, you might be confused at first, as there is something called the Lura Project and also KrakenD.
TL;DR; Difference between Lura, KrakenD, and Enterprise Lura is the KrakenD&amp;rsquo;s engine. Formerly known as &amp;ldquo;KrakenD framework&amp;rdquo; until we donated it to The Linux Foundation on 2021. It is not a product itself but a set of libraries. KrakenD is our open-source API Gateway ready to use KrakenD Enterprise is our commercial version, including services to businesses Lura Project The Lura Project is our original KrakenD framework that we donated to The Linux Foundation on 2021.</description></item><item><title>Lura vs. KrakenD</title><link>https://www.krakend.io/docs/v1.4/overview/krakend-vs-krakend-ce/</link><pubDate>Sat, 23 Jun 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/overview/krakend-vs-krakend-ce/</guid><description>If you had a quick look at our git repositories or the documentation, you might be confused at first, as there is something called the Lura Project and also KrakenD.
TL;DR; Difference between Lura, KrakenD, and Enterprise Lura is the KrakenD&amp;rsquo;s engine. Formerly known as &amp;ldquo;KrakenD framework&amp;rdquo; until we donated it to The Linux Foundation on 2021. It is not a product itself but a set of libraries. KrakenD is our open-source API Gateway ready to use KrakenD Enterprise is our commercial version, including services to businesses Lura Project The Lura Project is our original KrakenD framework that we donated to The Linux Foundation on 2021.</description></item><item><title>Protecting APIs using the Auth0 integration</title><link>https://www.krakend.io/docs/authorization/auth0/</link><pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/authorization/auth0/</guid><description>Let&amp;rsquo;s start with the elephant in the room: when you face the challenge of creating a modern API that has to be scalable, secure, performant, and resilient, it might look like a daunting task.
The good news is that combining products like Auth0 and KrakenD helps you solve this exact problem with an implementation that is straightforward.
Auth0 can authenticate users and machines, and KrakenD knows your business APIs and validate them in a very efficient and convenient way.</description></item><item><title>Protecting APIs using the Auth0 integration</title><link>https://www.krakend.io/docs/enterprise/authorization/auth0/</link><pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/authorization/auth0/</guid><description>Let&amp;rsquo;s start with the elephant in the room: when you face the challenge of creating a modern API that has to be scalable, secure, performant, and resilient, it might look like a daunting task.
The good news is that combining products like Auth0 and KrakenD helps you solve this exact problem with an implementation that is straightforward.
Auth0 can authenticate users and machines, and KrakenD knows your business APIs and validate them in a very efficient and convenient way.</description></item><item><title>Protecting APIs using the Auth0 integration</title><link>https://www.krakend.io/docs/v1.3/authorization/auth0/</link><pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/authorization/auth0/</guid><description>Let&amp;rsquo;s start with the elephant in the room: when you face the challenge of creating a modern API that has to be scalable, secure, performant, and resilient, it might look like a daunting task.
The good news is that combining products like Auth0 and KrakenD helps you solve this exact problem with an implementation that is straightforward.
Auth0 can authenticate users and machines, and KrakenD knows your business APIs and validate them in a very efficient and convenient way.</description></item><item><title>Protecting APIs using the Auth0 integration</title><link>https://www.krakend.io/docs/v1.4/authorization/auth0/</link><pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/authorization/auth0/</guid><description>Let&amp;rsquo;s start with the elephant in the room: when you face the challenge of creating a modern API that has to be scalable, secure, performant, and resilient, it might look like a daunting task.
The good news is that combining products like Auth0 and KrakenD helps you solve this exact problem with an implementation that is straightforward.
Auth0 can authenticate users and machines, and KrakenD knows your business APIs and validate them in a very efficient and convenient way.</description></item><item><title>Migrating config from KrakenD 1.x or 0.x</title><link>https://www.krakend.io/docs/configuration/migrating/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/configuration/migrating/</guid><description>The KrakenD 2.0 release is a major version that simplifies the configuration of v1.x and standardizes field names that were using different criteria to declare the attributes.
This migration allows you to:
Migrate from KrakenD 0.x to 2.x Migrate from KrakenD 1.0 to 2.x Migrate from KrakenD 1.2 to 2.x Migrate from KrakenD 1.3 to 2.x Migrate from KrakenD 1.4 to 2.x Download migration tool Migrating to KrakenD 2.</description></item><item><title>GeoIP integration</title><link>https://www.krakend.io/docs/enterprise/endpoints/geoip/</link><pubDate>Thu, 28 Jan 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/endpoints/geoip/</guid><description>The GeoIP integration allows you load Maxmind&amp;rsquo;s GeoIP2 City database (payment and free versions) and enrich all KrakenD calls to your backends with geo data.
To add GeoIP information to your backends, copy the Maxmind&amp;rsquo;s database file into the filesystem (it has to be a city DB) and specify its location in the configuration.
Configuration for GeoIP Add the following extra_config in the root to your configuration file:
{ &amp;#34;version&amp;#34;: 2, &amp;#34;plugin&amp;#34;: { &amp;#34;pattern&amp;#34;:&amp;#34;.</description></item><item><title>Exporting traces to AWS X-Ray</title><link>https://www.krakend.io/docs/enterprise/telemetry/xray/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/telemetry/xray/</guid><description>AWS X-Ray is a service offered by Amazon that provides an end-to-end view of requests as they travel through your application, and shows a map of your application’s underlying components.
The Opencensus exporter allows you export data to AWS X-Ray. Enabling it only requires you to add the xray exporter in the opencensus module.
The following configuration snippet sends data to your X-Ray:
&amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;xray&amp;quot;: { &amp;quot;version&amp;quot;: &amp;quot;latest&amp;quot;, &amp;quot;region&amp;quot;: &amp;quot;eu-west-1&amp;quot;, &amp;quot;use_env&amp;quot;: false, &amp;quot;access_key_id&amp;quot;: &amp;quot;myaccesskey&amp;quot;, &amp;quot;secret_access_key&amp;quot;: &amp;quot;mysecretkey&amp;quot; }, } } version: The version of the AWS X-Ray service to use.</description></item><item><title>Exporting traces to AWS X-Ray</title><link>https://www.krakend.io/docs/telemetry/xray/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/telemetry/xray/</guid><description>AWS X-Ray is a service offered by Amazon that provides an end-to-end view of requests as they travel through your application, and shows a map of your application’s underlying components.
The Opencensus exporter allows you export data to AWS X-Ray. Enabling it only requires you to add the xray exporter in the opencensus module.
The following configuration snippet sends data to your X-Ray:
{ &amp;#34;extra_config&amp;#34;: { &amp;#34;telemetry/opencensus&amp;#34;: { &amp;#34;exporters&amp;#34;: { &amp;#34;xray&amp;#34;: { &amp;#34;version&amp;#34;: &amp;#34;latest&amp;#34;, &amp;#34;region&amp;#34;: &amp;#34;eu-west-1&amp;#34;, &amp;#34;use_env&amp;#34;: false, &amp;#34;access_key_id&amp;#34;: &amp;#34;myaccesskey&amp;#34;, &amp;#34;secret_access_key&amp;#34;: &amp;#34;mysecretkey&amp;#34; } } } } } version: The version of the AWS X-Ray service to use.</description></item><item><title>Exporting traces to AWS X-Ray</title><link>https://www.krakend.io/docs/v1.3/telemetry/xray/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/telemetry/xray/</guid><description>AWS X-Ray is a service offered by Amazon that provides an end-to-end view of requests as they travel through your application, and shows a map of your application’s underlying components.
The Opencensus exporter allows you export data to AWS X-Ray. Enabling it only requires you to add the xray exporter in the opencensus module.
The following configuration snippet sends data to your X-Ray:
&amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;xray&amp;quot;: { &amp;quot;version&amp;quot;: &amp;quot;latest&amp;quot;, &amp;quot;region&amp;quot;: &amp;quot;eu-west-1&amp;quot;, &amp;quot;use_env&amp;quot;: false, &amp;quot;access_key_id&amp;quot;: &amp;quot;myaccesskey&amp;quot;, &amp;quot;secret_access_key&amp;quot;: &amp;quot;mysecretkey&amp;quot; }, } } version: The version of the AWS X-Ray service to use.</description></item><item><title>Exporting traces to AWS X-Ray</title><link>https://www.krakend.io/docs/v1.4/telemetry/xray/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/telemetry/xray/</guid><description>AWS X-Ray is a service offered by Amazon that provides an end-to-end view of requests as they travel through your application, and shows a map of your application’s underlying components.
The Opencensus exporter allows you export data to AWS X-Ray. Enabling it only requires you to add the xray exporter in the opencensus module.
The following configuration snippet sends data to your X-Ray:
&amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;xray&amp;quot;: { &amp;quot;version&amp;quot;: &amp;quot;latest&amp;quot;, &amp;quot;region&amp;quot;: &amp;quot;eu-west-1&amp;quot;, &amp;quot;use_env&amp;quot;: false, &amp;quot;access_key_id&amp;quot;: &amp;quot;myaccesskey&amp;quot;, &amp;quot;secret_access_key&amp;quot;: &amp;quot;mysecretkey&amp;quot; }, } } version: The version of the AWS X-Ray service to use.</description></item><item><title>Integration with AWS Lambda functions</title><link>https://www.krakend.io/docs/backends/lambda/</link><pubDate>Sun, 11 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/backends/lambda/</guid><description>The Lambda integration allows you to invoke Amazon Lambda functions on a KrakenD endpoint call. The content returned by the lambda function can be treated and manipulated as any other backend.
The payload that is sent to the Lambda function comes from the request and depends on the method used by the endpoint:
Method GET: The payload contains all the parameters of the request. Non-GET methods: The payload is defined by the content of the body in the request.</description></item><item><title>Integration with AWS Lambda functions</title><link>https://www.krakend.io/docs/enterprise/backends/lambda/</link><pubDate>Sun, 11 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/backends/lambda/</guid><description>The Lambda integration allows you to invoke Amazon Lambda functions on a KrakenD endpoint call. The content returned by the lambda function can be treated and manipulated as any other backend.
The payload that is sent to the Lambda function comes from the request and depends on the method used by the endpoint:
Method GET: The payload contains all the parameters of the request. Non-GET methods: The payload is defined by the content of the body in the request.</description></item><item><title>Integration with AWS Lambda functions</title><link>https://www.krakend.io/docs/v1.3/backends/lambda/</link><pubDate>Sun, 11 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/backends/lambda/</guid><description>The Lambda integration allows you to invoke Amazon Lambda functions on a KrakenD endpoint call. The content returned by the lambda function can be treated and manipulated as any other backend.
The payload that is sent to the Lambda function comes from the request and depends on the method used by the endpoint:
Method GET: The payload contains all the parameters of the request. Non-GET methods: The payload is defined by the content of the body in the request.</description></item><item><title>Integration with AWS Lambda functions</title><link>https://www.krakend.io/docs/v1.4/backends/lambda/</link><pubDate>Sun, 11 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/backends/lambda/</guid><description>The Lambda integration allows you to invoke Amazon Lambda functions on a KrakenD endpoint call. The content returned by the lambda function can be treated and manipulated as any other backend.
The payload that is sent to the Lambda function comes from the request and depends on the method used by the endpoint:
Method GET: The payload contains all the parameters of the request. Non-GET methods: The payload is defined by the content of the body in the request.</description></item><item><title>The KrakenD Playground</title><link>https://www.krakend.io/docs/enterprise/overview/playground/</link><pubDate>Thu, 13 Sep 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/overview/playground/</guid><description>If you are new to KrakenD, a quick way to get started is to make use of the KrakenD Playground.
The KrakenD Playground is a Docker Compose environment that puts together the necessary pieces to let you play with KrakenD in a working environment.
As KrakenD is an API gateway, we have also added to the environment an API (backend) to feed the gateway and a website to make use of the data.</description></item><item><title>The KrakenD Playground</title><link>https://www.krakend.io/docs/overview/playground/</link><pubDate>Thu, 13 Sep 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/overview/playground/</guid><description>If you are new to KrakenD, a quick way to get started is to make use of the KrakenD Playground.
The KrakenD Playground is a Docker Compose environment that puts together the necessary pieces to let you play with KrakenD in a working environment.
As KrakenD is an API gateway, we have also added to the environment an API (backend) to feed the gateway and a website to make use of the data.</description></item><item><title>The KrakenD Playground</title><link>https://www.krakend.io/docs/v1.3/overview/playground/</link><pubDate>Thu, 13 Sep 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/overview/playground/</guid><description>If you are new to KrakenD, a quick way to get started is to make use of the KrakenD Playground.
The KrakenD Playground is a Docker Compose environment that puts together the necessary pieces to let you play with KrakenD in a working environment.
As KrakenD is an API gateway, we have also added to the environment an API (backend) to feed the gateway and a website to make use of the data.</description></item><item><title>The KrakenD Playground</title><link>https://www.krakend.io/docs/v1.4/overview/playground/</link><pubDate>Thu, 13 Sep 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/overview/playground/</guid><description>If you are new to KrakenD, a quick way to get started is to make use of the KrakenD Playground.
The KrakenD Playground is a Docker Compose environment that puts together the necessary pieces to let you play with KrakenD in a working environment.
As KrakenD is an API gateway, we have also added to the environment an API (backend) to feed the gateway and a website to make use of the data.</description></item><item><title>Protecting APIs using Keycloak</title><link>https://www.krakend.io/docs/authorization/keycloak/</link><pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/authorization/keycloak/</guid><description>The Keycloak integration allows one of the many possible OpenID Connect different security options available in KrakenD.
Keycloak is an Open Source Identity and Access Management project, sponsored by RedHat. The KrakenD configuration for Keycloak relies internally on the JWT validation component.
Keycloak integration JSON web tokens (JWT) are an open standard (RFC 7519) that define a way for securely transmitting information between parties. JWT tokens are compact, secure (digitally signed), and have become an industry-standard used at internet scale.</description></item><item><title>Protecting APIs using Keycloak</title><link>https://www.krakend.io/docs/v1.4/authorization/keycloak/</link><pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/authorization/keycloak/</guid><description>The Keycloak integration allows one of the many possible OpenID Connect different security options available in KrakenD.
Keycloak is an Open Source Identity and Access Management project, sponsored by RedHat. The KrakenD configuration for Keycloak relies internally on the JWT validation component.
Keycloak integration JSON web tokens (JWT) are an open standard (RFC 7519) that define a way for securely transmitting information between parties. JWT tokens are compact, secure (digitally signed), and have become an industry-standard used at internet scale.</description></item><item><title>Client redirects</title><link>https://www.krakend.io/docs/enterprise/backends/client-redirect/</link><pubDate>Thu, 28 Jan 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/backends/client-redirect/</guid><description>When a backend returns a redirect, the default behaviour of KrakenD is to follow the redirection and serve the final content to the user. When this behaviour needs to be prevented and let the end-client follow the redirect itself, then you need to enable the krakend-redirect plugin.
Client redirect configuration You can stop KrakenD from following redirections like 301 with the following configuration in your backend section:
{ &amp;#34;endpoint&amp;#34;: &amp;#34;/redirect&amp;#34;, &amp;#34;output_encoding&amp;#34;: &amp;#34;no-op&amp;#34;, &amp;#34;backend&amp;#34;: [ { &amp;#34;url_pattern&amp;#34;: &amp;#34;/__debug&amp;#34;, &amp;#34;encoding&amp;#34;: &amp;#34;no-op&amp;#34;, &amp;#34;extra_config&amp;#34;: { &amp;#34;github.</description></item><item><title>URL Rewrite</title><link>https://www.krakend.io/docs/enterprise/endpoints/url-rewrite/</link><pubDate>Thu, 28 Jan 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/endpoints/url-rewrite/</guid><description>The url-rewrite plugin allows you to define a set of URLs or regular expressions that are handled by an endpoint of your choice. In other words, this plugin allows you to declare additional URLs other than the ones defined under the endpoints configuration, used as aliases of existing endpoints.
Extendind router capabilities This plugin allows you to overcome some of the routing capabilities of KrakenD, such as declaring endpoints that would be conflicting or unaccepted by the KrakenD core.</description></item><item><title>Exporting metrics, logs and events to Google Stackdriver</title><link>https://www.krakend.io/docs/enterprise/telemetry/stackdriver/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/telemetry/stackdriver/</guid><description>Google Stackdriver aggregates metrics, logs, and events from infrastructure, giving developers and operators a rich set of observable signals that speed root-cause analysis and reduce mean time to resolution (MTTR).
The Opencensus exporter allows you export data to Google Stackdriver. Enabling it only requires you to add the stackdriver exporter in the opencensus module.
The following configuration snippet sends the data:
&amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;stackdriver&amp;quot;: { &amp;quot;project_id&amp;quot;: &amp;quot;my-krakend-project&amp;quot;, &amp;quot;metrics_prefix&amp;quot;: &amp;quot;krakend&amp;quot;, &amp;quot;default_labels&amp;quot;: { &amp;quot;env&amp;quot;: &amp;quot;production&amp;quot; } } } } project_id: The identifier of your Google Cloud project.</description></item><item><title>Exporting metrics, logs and events to Google Stackdriver</title><link>https://www.krakend.io/docs/telemetry/stackdriver/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/telemetry/stackdriver/</guid><description>Google Stackdriver aggregates metrics, logs, and events from infrastructure, giving developers and operators a rich set of observable signals that speed root-cause analysis and reduce mean time to resolution (MTTR).
The Opencensus exporter allows you export data to Google Stackdriver. Enabling it only requires you to add the stackdriver exporter in the opencensus module.
The following configuration snippet sends the data:
{ &amp;#34;extra_config&amp;#34;: { &amp;#34;telemetry/opencensus&amp;#34;: { &amp;#34;exporters&amp;#34;: { &amp;#34;stackdriver&amp;#34;: { &amp;#34;project_id&amp;#34;: &amp;#34;my-krakend-project&amp;#34;, &amp;#34;metrics_prefix&amp;#34;: &amp;#34;krakend&amp;#34;, &amp;#34;default_labels&amp;#34;: { &amp;#34;env&amp;#34;: &amp;#34;production&amp;#34; } } } } } } project_id: The identifier of your Google Cloud project.</description></item><item><title>Exporting metrics, logs and events to Google Stackdriver</title><link>https://www.krakend.io/docs/v1.3/telemetry/stackdriver/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/telemetry/stackdriver/</guid><description>Google Stackdriver aggregates metrics, logs, and events from infrastructure, giving developers and operators a rich set of observable signals that speed root-cause analysis and reduce mean time to resolution (MTTR).
The Opencensus exporter allows you export data to Google Stackdriver. Enabling it only requires you to add the stackdriver exporter in the opencensus module.
The following configuration snippet sends the data:
&amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;stackdriver&amp;quot;: { &amp;quot;project_id&amp;quot;: &amp;quot;my-krakend-project&amp;quot;, &amp;quot;metrics_prefix&amp;quot;: &amp;quot;krakend&amp;quot;, &amp;quot;default_labels&amp;quot;: { &amp;quot;env&amp;quot;: &amp;quot;production&amp;quot; } } } } project_id: The identifier of your Google Cloud project.</description></item><item><title>Exporting metrics, logs and events to Google Stackdriver</title><link>https://www.krakend.io/docs/v1.4/telemetry/stackdriver/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/telemetry/stackdriver/</guid><description>Google Stackdriver aggregates metrics, logs, and events from infrastructure, giving developers and operators a rich set of observable signals that speed root-cause analysis and reduce mean time to resolution (MTTR).
The Opencensus exporter allows you export data to Google Stackdriver. Enabling it only requires you to add the stackdriver exporter in the opencensus module.
The following configuration snippet sends the data:
&amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;stackdriver&amp;quot;: { &amp;quot;project_id&amp;quot;: &amp;quot;my-krakend-project&amp;quot;, &amp;quot;metrics_prefix&amp;quot;: &amp;quot;krakend&amp;quot;, &amp;quot;default_labels&amp;quot;: { &amp;quot;env&amp;quot;: &amp;quot;production&amp;quot; } } } } project_id: The identifier of your Google Cloud project.</description></item><item><title>Exporting metrics, logs and events to Azure Monitor</title><link>https://www.krakend.io/docs/enterprise/telemetry/azure/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/telemetry/azure/</guid><description>Azure Monitor collect, analyzes, and acts on telemetry data from your Azure and on-premises environments. Azure Monitor helps you maximize performance and availability of your applications and proactively identify problems in seconds.
The Opencensus exporter allows you export data to Azure Monitor. Enabling it only requires you to add the ocagent exporter in the opencensus module, see how to configure the OpenCensus Agent.</description></item><item><title>Exporting metrics, logs and events to Azure Monitor</title><link>https://www.krakend.io/docs/telemetry/azure/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/telemetry/azure/</guid><description>Azure Monitor collect, analyzes, and acts on telemetry data from your Azure and on-premises environments. Azure Monitor helps you maximize performance and availability of your applications and proactively identify problems in seconds.
The Opencensus exporter allows you export data to Azure Monitor. Enabling it only requires you to add the ocagent exporter in the opencensus module, see how to configure the OpenCensus Agent.</description></item><item><title>Exporting metrics, logs and events to Azure Monitor</title><link>https://www.krakend.io/docs/v1.3/telemetry/azure/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/telemetry/azure/</guid><description>Azure Monitor collect, analyzes, and acts on telemetry data from your Azure and on-premises environments. Azure Monitor helps you maximize performance and availability of your applications and proactively identify problems in seconds.
The Opencensus exporter allows you export data to Azure Monitor. Enabling it only requires you to add the ocagent exporter in the opencensus module, see how to configure the OpenCensus Agent.</description></item><item><title>Exporting metrics, logs and events to Azure Monitor</title><link>https://www.krakend.io/docs/v1.4/telemetry/azure/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/telemetry/azure/</guid><description>Azure Monitor collect, analyzes, and acts on telemetry data from your Azure and on-premises environments. Azure Monitor helps you maximize performance and availability of your applications and proactively identify problems in seconds.
The Opencensus exporter allows you export data to Azure Monitor. Enabling it only requires you to add the ocagent exporter in the opencensus module, see how to configure the OpenCensus Agent.</description></item><item><title>Validating the body with the JSON Schema integration</title><link>https://www.krakend.io/docs/endpoints/json-schema/</link><pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/endpoints/json-schema/</guid><description>KrakenD endpoints receiving a JSON object in its body can apply automatic validations using the JSON Schema vocabulary before the content passes to the backends. The json schema component allows you to define validation rules on the body, type definition, or even validate the fields' values.
When the validation fails, KrakenD returns to the user a status code 400 (Bad Request), and only if it succeeds, the backend receives the request.</description></item><item><title>Validating the body with the JSON Schema integration</title><link>https://www.krakend.io/docs/enterprise/endpoints/json-schema/</link><pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/endpoints/json-schema/</guid><description>KrakenD endpoints receiving a JSON object in its body can apply automatic validations using the JSON Schema vocabulary before the content passes to the backends. The json schema component allows you to define validation rules on the body, type definition, or even validate the fields' values.
When the validation fails, KrakenD returns to the user a status code 400 (Bad Request), and only if it succeeds, the backend receives the request.</description></item><item><title>Validating the body with the JSON Schema integration</title><link>https://www.krakend.io/docs/v1.3/endpoints/json-schema/</link><pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/endpoints/json-schema/</guid><description>KrakenD endpoints receiving a JSON object in its body can apply automatic validations using the JSON Schema vocabulary before the content passes to the backends. The json schema component allows you to define validation rules on the body, type definition, or even validate the fields' values.
When the validation fails, KrakenD returns to the user a status code 400 (Bad Request), and only if it succeeds, the backend receives the request.</description></item><item><title>Validating the body with the JSON Schema integration</title><link>https://www.krakend.io/docs/v1.4/endpoints/json-schema/</link><pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/endpoints/json-schema/</guid><description>KrakenD endpoints receiving a JSON object in its body can apply automatic validations using the JSON Schema vocabulary before the content passes to the backends. The json schema component allows you to define validation rules on the body, type definition, or even validate the fields' values.
When the validation fails, KrakenD returns to the user a status code 400 (Bad Request), and only if it succeeds, the backend receives the request.</description></item><item><title>Returning the details of backend errors</title><link>https://www.krakend.io/docs/backends/detailed-errors/</link><pubDate>Wed, 02 Oct 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/backends/detailed-errors/</guid><description>When you are willing to manipulate or aggregate data, KrakenD&amp;rsquo;s policy regarding errors and status codes is to hide from the client any backend details. The philosophy behind this is that clients have to be decoupled from its underlying services.
If in the other hand, your endpoint connects to a single backend with no manipulation, use the no-op encoding which returns the response to the client as is, preserving its form: body, headers, status codes and such.</description></item><item><title>Returning the details of backend errors</title><link>https://www.krakend.io/docs/enterprise/backends/detailed-errors/</link><pubDate>Wed, 02 Oct 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/backends/detailed-errors/</guid><description>When you are willing to manipulate or aggregate data, KrakenD&amp;rsquo;s policy regarding errors and status codes is to hide from the client any backend details. The philosophy behind this is that clients have to be decoupled from its underlying services.
If in the other hand, your endpoint connects to a single backend with no manipulation, use the no-op encoding which returns the response to the client as is, preserving its form: body, headers, status codes and such.</description></item><item><title>Returning the details of backend errors</title><link>https://www.krakend.io/docs/v1.3/backends/detailed-errors/</link><pubDate>Wed, 02 Oct 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/backends/detailed-errors/</guid><description>When you are willing to manipulate or aggregate data, KrakenD&amp;rsquo;s policy regarding errors and status codes is to hide from the client any backend details. The philosophy behind this is that clients have to be decoupled from its underlying services.
If in the other hand, your endpoint connects to a single backend with no manipulation, use the no-op encoding which returns the response to the client as is, preserving its form: body, headers, status codes and such.</description></item><item><title>Returning the details of backend errors</title><link>https://www.krakend.io/docs/v1.4/backends/detailed-errors/</link><pubDate>Wed, 02 Oct 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/backends/detailed-errors/</guid><description>When you are willing to manipulate or aggregate data, KrakenD&amp;rsquo;s policy regarding errors and status codes is to hide from the client any backend details. The philosophy behind this is that clients have to be decoupled from its underlying services.
If in the other hand, your endpoint connects to a single backend with no manipulation, use the no-op encoding which returns the response to the client as is, preserving its form: body, headers, status codes and such.</description></item><item><title>OpenAPI/Swagger Generation</title><link>https://www.krakend.io/docs/enterprise/endpoints/openapi/</link><pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/endpoints/openapi/</guid><description>The OpenAPI or Swagger generator is a component provided by the KrakenD Studio, offering the automatic generation of API documentation through a static Swagger file. Even KrakenD is the gateway and lacks all the knowledge of your API backends, KrakenD Studio is capable of providing in-depth detail of backend responses in the documentation documentation:inspection of live requests.
Generating the OpenAPI spec When you run the KrakenD configuration through KrakenD Studio you can enable the Swagger generation from the UI, or by adding the configuration snippet in your krakend.</description></item><item><title>Exporting metrics, logs, and events to the OpenCensus Agent</title><link>https://www.krakend.io/docs/enterprise/telemetry/ocagent/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/telemetry/ocagent/</guid><description>The ocagent exporter sends OpenCensus Stats and Traces to the OpenCensus Agent, instead of pushing data to backends’ exporters.
For instance, you can enable ocagent to upload data to the OpenCensus Agent, and from there, the agent is simply scraped by a Prometheus.
You can integrate the OpenCensus Agent with Azure Monitor, Jaeger, or Prometheus to name a few examples.
Enabling it only requires you to add the ocagent exporter in the opencensus module.</description></item><item><title>Exporting metrics, logs, and events to the OpenCensus Agent</title><link>https://www.krakend.io/docs/telemetry/ocagent/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/telemetry/ocagent/</guid><description>The ocagent exporter sends OpenCensus Stats and Traces to the OpenCensus Agent, instead of pushing data to backends’ exporters.
For instance, you can enable ocagent to upload data to the OpenCensus Agent, and from there, the agent is simply scraped by a Prometheus.
You can integrate the OpenCensus Agent with Azure Monitor, Jaeger, or Prometheus to name a few examples.
Enabling it only requires you to add the ocagent exporter in the opencensus module.</description></item><item><title>Exporting metrics, logs, and events to the OpenCensus Agent</title><link>https://www.krakend.io/docs/v1.3/telemetry/ocagent/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/telemetry/ocagent/</guid><description>The ocagent exporter sends OpenCensus Stats and Traces to the OpenCensus Agent, instead of pushing data to backends’ exporters.
For instance, you can enable ocagent to upload data to the OpenCensus Agent, and from there, the agent is simply scraped by a Prometheus.
You can integrate the OpenCensus Agent with Azure Monitor, Jaeger, or Prometheus to name a few examples.
Enabling it only requires you to add the ocagent exporter in the opencensus module.</description></item><item><title>Exporting metrics, logs, and events to the OpenCensus Agent</title><link>https://www.krakend.io/docs/v1.4/telemetry/ocagent/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/telemetry/ocagent/</guid><description>The ocagent exporter sends OpenCensus Stats and Traces to the OpenCensus Agent, instead of pushing data to backends’ exporters.
For instance, you can enable ocagent to upload data to the OpenCensus Agent, and from there, the agent is simply scraped by a Prometheus.
You can integrate the OpenCensus Agent with Azure Monitor, Jaeger, or Prometheus to name a few examples.
Enabling it only requires you to add the ocagent exporter in the opencensus module.</description></item><item><title>Handling WebSockets connections</title><link>https://www.krakend.io/docs/enterprise/websockets/</link><pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/websockets/</guid><description>KrakenD Enterprise supports communications using the WebSocket Protocol (RFC-6455) to enable two-way communication between a client to a backend host through the API gateway. This technology aims to provide a mechanism for browser-based applications that need two-way communication with servers that do not rely on opening multiple HTTP connections.
KrakenD has the capability of multiplexing. Each individual end-client (e.g., Desktop, Mobile device) establishes a connection with the gateway directly, and KrakenD opens a single channel with the backend host to handle all its connected clients.</description></item><item><title>GraphQL gateway</title><link>https://www.krakend.io/docs/backends/graphql/</link><pubDate>Wed, 03 Nov 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/backends/graphql/</guid><description>The GraphQL integration allows you to work in two different modes:
Apply gateway functionality in the middle of a GraphQL client and its GraphQL servers (just proxy) Convert REST endpoints to GraphQL calls (adapter/transformer). KrakenD offers a simple yet powerful way of consuming GraphQL content from your distributed graphs. The main benefits of using KrakenD as a GraphQL Gateway are:
Simple GraphQL Federation: chop your monolithic GraphQL server into different services and aggregate them in the gateway.</description></item><item><title>API Dashboard with Instana</title><link>https://www.krakend.io/docs/enterprise/telemetry/instana/</link><pubDate>Fri, 24 Jul 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/telemetry/instana/</guid><description>Instana is a fully automated Application Performance Management (APM) solution designed specifically for the challenges of managing microservice and cloud-native applications.
With Instana you:
Gain instant visibility with zero effort Quickly make sense of chaotic modern environments Identify and solve performance issues in seconds Instana configuration The Instana exporter allows you export data to Instana. Enabling it only requires you to add the instana namespace with a few seetings as follows:</description></item><item><title>Virtual Hosts</title><link>https://www.krakend.io/docs/enterprise/endpoints/virtual-hosts/</link><pubDate>Thu, 05 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/endpoints/virtual-hosts/</guid><description>The Virtual Host plugin allows you to run different configurations of KrakenD endpoints based on the host accessing the server.
For instance, you can declare an endpoint /foo that behaves entirely differently when KrakenD is accessed through a host-a.tld or a host-b.tld. For instance, the same /foo path can have different rate limits or authorization endpoints depending on the called host.
Virtual host configuration On KrakenD EE the virtual host plugin usually lives inside the /plugins folder.</description></item><item><title>Tutorials and Guides</title><link>https://www.krakend.io/docs/enterprise/overview/guides/</link><pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/overview/guides/</guid><description>The documentation in this site covers all the functionality of KrakenD API Gateway, but over time we have received from KrakenD users all kinds of tutorials, guides and other resources that illustrate how to to do a specific thing. We have included below a few links, but you can share yours.
User-contributed resources Getting started with KrakenD on Kubernetes / AKS by Christian Dennig (Cloud Solution Architect @Microsoft) Microservices with Micronaut, KrakenD and Consul by Piotr Minkowski (Solution Architect @ Red Hat) How to Successfully Set Up KrakenD on GKE: A Step by Step Guide by Vijay Savanth on Hackernoon Writing Plugins using Golang by Ilya Nemtsev on Eventslooped Building Micro Services with .</description></item><item><title>Tutorials and Guides</title><link>https://www.krakend.io/docs/overview/guides/</link><pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/overview/guides/</guid><description>The documentation in this site covers all the functionality of KrakenD API Gateway, but over time we have received from KrakenD users all kinds of tutorials, guides and other resources that illustrate how to do a specific thing. We have included below a few links, but you can share yours.
User-contributed resources Getting started with KrakenD on Kubernetes / AKS by Christian Dennig (Cloud Solution Architect @ Microsoft) Build and Deploy with Kubernetes, Helm, and Skaffold by Fabijan Bajo (Technical Lead, DevOps / Cloud Infrastructure @ IBM) Microservices with Micronaut, KrakenD and Consul by Piotr Minkowski (Solution Architect @ Red Hat) How to Successfully Set Up KrakenD on GKE: A Step by Step Guide by Vijay Savanth on Hackernoon Writing Plugins using Golang by Ilya Nemtsev on Eventslooped Building Micro Services with .</description></item><item><title>Tutorials and Guides</title><link>https://www.krakend.io/docs/v1.3/overview/guides/</link><pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/overview/guides/</guid><description>The documentation in this site covers all the functionality of KrakenD API Gateway, but over time we have received from KrakenD users all kinds of tutorials, guides and other resources that illustrate how to do a specific thing. We have included below a few links, but you can share yours.
User-contributed resources Getting started with KrakenD on Kubernetes / AKS by Christian Dennig (Cloud Solution Architect @Microsoft) Microservices with Micronaut, KrakenD and Consul by Piotr Minkowski (Solution Architect @ Red Hat) How to Successfully Set Up KrakenD on GKE: A Step by Step Guide by Vijay Savanth on Hackernoon Writing Plugins using Golang by Ilya Nemtsev on Eventslooped Building Micro Services with .</description></item><item><title>Tutorials and Guides</title><link>https://www.krakend.io/docs/v1.4/overview/guides/</link><pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/overview/guides/</guid><description>The documentation in this site covers all the functionality of KrakenD API Gateway, but over time we have received from KrakenD users all kinds of tutorials, guides and other resources that illustrate how to to do a specific thing. We have included below a few links, but you can share yours.
User-contributed resources Getting started with KrakenD on Kubernetes / AKS by Christian Dennig (Cloud Solution Architect @Microsoft) Microservices with Micronaut, KrakenD and Consul by Piotr Minkowski (Solution Architect @ Red Hat) How to Successfully Set Up KrakenD on GKE: A Step by Step Guide by Vijay Savanth on Hackernoon Writing Plugins using Golang by Ilya Nemtsev on Eventslooped Building Micro Services with .</description></item><item><title>Exporting to the logger</title><link>https://www.krakend.io/docs/enterprise/telemetry/logger/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/telemetry/logger/</guid><description>Opencensus can export data to the system logger as another exporter.
Enabling it only requires you to add the logger exporter in the opencensus module.
The following configuration snippet enables the logger:
&amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;logger&amp;quot;: { &amp;quot;stats&amp;quot;: true, &amp;quot;spans&amp;quot;: true } } } stats: Whether to log the statistics or not spans: Whether to log the spans or not See also the additional settings of the Opencensus module that can be declared.</description></item><item><title>Exporting to the logger</title><link>https://www.krakend.io/docs/telemetry/logger/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/telemetry/logger/</guid><description>Opencensus can export data to the system logger as another exporter.
Enabling it only requires you to add the logger exporter in the opencensus module.
The following configuration snippet enables the logger: { &amp;#34;extra_config&amp;#34;:{ &amp;#34;telemetry/opencensus&amp;#34;: { &amp;#34;exporters&amp;#34;: { &amp;#34;logger&amp;#34;: { &amp;#34;stats&amp;#34;: true, &amp;#34;spans&amp;#34;: true } } } }
stats: Whether to log the statistics or not spans: Whether to log the spans or not See also the additional settings of the Opencensus module that can be declared.</description></item><item><title>Exporting to the logger</title><link>https://www.krakend.io/docs/v1.3/telemetry/logger/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/telemetry/logger/</guid><description>Opencensus can export data to the system logger as another exporter.
Enabling it only requires you to add the logger exporter in the opencensus module.
The following configuration snippet enables the logger:
&amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;logger&amp;quot;: { &amp;quot;stats&amp;quot;: true, &amp;quot;spans&amp;quot;: true } } } stats: Whether to log the statistics or not spans: Whether to log the spans or not See also the additional settings of the Opencensus module that can be declared.</description></item><item><title>Exporting to the logger</title><link>https://www.krakend.io/docs/v1.4/telemetry/logger/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/telemetry/logger/</guid><description>Opencensus can export data to the system logger as another exporter.
Enabling it only requires you to add the logger exporter in the opencensus module.
The following configuration snippet enables the logger:
&amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;logger&amp;quot;: { &amp;quot;stats&amp;quot;: true, &amp;quot;spans&amp;quot;: true } } } stats: Whether to log the statistics or not spans: Whether to log the spans or not See also the additional settings of the Opencensus module that can be declared.</description></item><item><title>Extended metrics</title><link>https://www.krakend.io/docs/telemetry/extended-metrics/</link><pubDate>Mon, 05 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/telemetry/extended-metrics/</guid><description>Collect extended metrics to push them to InfluxDB or expose them in the /__stats/ endpoint. The /__stats/ endpoint runs in a different port and contains a lot of metrics. This component is the richest in terms of metric data that you can use.
Through the extended metrics you can create new tools or integrate with existing ones. For instance, combining the metrics with the InfluxDB extended metrics you can have a Grafana dashboard.</description></item><item><title>The health endpoint</title><link>https://www.krakend.io/docs/enterprise/endpoints/health/</link><pubDate>Mon, 07 Oct 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/endpoints/health/</guid><description>If you place a balancer in front of KrakenD, such as an ELB, you can check KrakenD health using a TCP port check. If, on the other hand, you need an HTTP endpoint in systems like Kubernetes, use the internal endpoint /__health.
The /__health endpoint The health endpoint, or the ping endpoint, works without any specific configuration as KrakenD automatically adds it.
For instance, see the simplest possible krakend.json:
Simplest configuration file&amp;nbsp; $cat&amp;nbsp;krakend.</description></item><item><title>The health endpoint</title><link>https://www.krakend.io/docs/v1.3/endpoints/health/</link><pubDate>Mon, 07 Oct 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/endpoints/health/</guid><description>If you place a balancer in front of KrakenD, such as an ELB, you can check KrakenD health using a TCP port check. If, on the other hand, you need an HTTP endpoint in systems like Kubernetes, use the internal endpoint /__health.
The /__health endpoint The health endpoint, or the ping endpoint, works without any specific configuration as KrakenD automatically adds it.
For instance, see the simplest possible krakend.json:
Simplest configuration file&amp;nbsp; $cat&amp;nbsp;krakend.</description></item><item><title>The health endpoint</title><link>https://www.krakend.io/docs/v1.4/endpoints/health/</link><pubDate>Mon, 07 Oct 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/endpoints/health/</guid><description>If you place a balancer in front of KrakenD, such as an ELB, you can check KrakenD health using a TCP port check. If, on the other hand, you need an HTTP endpoint in systems like Kubernetes, use the internal endpoint /__health.
The /__health endpoint The health endpoint, or the ping endpoint, works without any specific configuration as KrakenD automatically adds it.
For instance, see the simplest possible krakend.json:
Simplest configuration file&amp;nbsp; $cat&amp;nbsp;krakend.</description></item><item><title>Extending KrakenD, the big picture.</title><link>https://www.krakend.io/docs/extending/the-big-picture/</link><pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/extending/the-big-picture/</guid><description>Before starting to dive into the KrakenD code, you should spend a few minutes understanding the big pieces of the system, how they work, and the philosophy behind it.
The KrakenD rules Let&amp;rsquo;s start with the rules followed to code KrakenD (shared with The Lura Project), as they answer to architectural design questions:
Reactive is key Reactive is key (yes, it is very, very important) Failing fast is better than succeeding slow The simpler, the better Everything is pluggable Each request must be processed in its request-scoped context KrakenD internal states When you start KrakenD, the system goes through two different internal states: building and working.</description></item><item><title>Frequently Asked Questions</title><link>https://www.krakend.io/docs/enterprise/faq/</link><pubDate>Wed, 26 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/faq/</guid><description>I am getting a 200 status when the backend returns a 201 E.g:
2017/01/19 - 10:31:27 | 200 | 1.134431ms | ::1 | POST /users Explanation By default, the gateway will always send an HTTP status 200 if the backend returns a 200 or a 201. You can inject your own HTTPStatusHandler implementation if you need a different behavior. Check this issue comment for more details.
I am getting a 500 status when the backend returns anything but 200, 201 or redirects E.</description></item><item><title>Frequently Asked Questions</title><link>https://www.krakend.io/docs/faq/</link><pubDate>Wed, 26 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/faq/</guid><description>I am getting a 200 status when the backend returns a 201 E.g:
2017/01/19 - 10:31:27 | 200 | 1.134431ms | ::1 | POST /users Explanation By default, the gateway will always send an HTTP status 200 if the backend returns a 200 or a 201. You can inject your own HTTPStatusHandler implementation if you need a different behavior. Check this issue comment for more details.
I am getting a 500 status when the backend returns anything but 200, 201 or redirects E.</description></item><item><title>Frequently Asked Questions</title><link>https://www.krakend.io/docs/v1.3/faq/</link><pubDate>Wed, 26 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/faq/</guid><description>I am getting a 200 status when the backend returns a 201 E.g:
2017/01/19 - 10:31:27 | 200 | 1.134431ms | ::1 | POST /users Explanation By default, the gateway will always send an HTTP status 200 if the backend returns a 200 or a 201. You can inject your own HTTPStatusHandler implementation if you need a different behavior. Check this issue comment for more details.
I am getting a 500 status when the backend returns anything but 200, 201 or redirects E.</description></item><item><title>Frequently Asked Questions</title><link>https://www.krakend.io/docs/v1.4/faq/</link><pubDate>Wed, 26 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/faq/</guid><description>I am getting a 200 status when the backend returns a 201 E.g:
2017/01/19 - 10:31:27 | 200 | 1.134431ms | ::1 | POST /users Explanation By default, the gateway will always send an HTTP status 200 if the backend returns a 200 or a 201. You can inject your own HTTPStatusHandler implementation if you need a different behavior. Check this issue comment for more details.
I am getting a 500 status when the backend returns anything but 200, 201 or redirects E.</description></item><item><title>Verifying packages (PGP and SHA256)</title><link>https://www.krakend.io/docs/enterprise/overview/verifying-packages/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/overview/verifying-packages/</guid><description>How to make sure what you are downloading is legit.
PGP We will check the detached signature PGP against our package KrakenD.
$ gpg --verify krakend_2.0.1 _amd64.tar.gz.asc krakend_2.0.1 _amd64.tar.gz gpg: Signature made Sun Mar 10 18:17:18 2019 UTC using RSA key ID 5DE6FD698AD6FDD2 gpg: Can't check signature: public key not found We don&amp;rsquo;t have the packager public key (AB39BEA1) in our system. You need to retrieve the public key from a key server.</description></item><item><title>Verifying packages (PGP and SHA256)</title><link>https://www.krakend.io/docs/overview/verifying-packages/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/overview/verifying-packages/</guid><description>How to make sure what you are downloading is legit.
PGP We will check the detached signature PGP against our package KrakenD.
Term&amp;nbsp; $gpg&amp;nbsp;--verify&amp;nbsp;krakend_2.0.1&amp;nbsp; _amd64.tar.gz.asc&amp;nbsp;krakend_2.0.1&amp;nbsp; _amd64.tar.gz&amp;nbsp; gpg:&amp;nbsp;Signature&amp;nbsp;made&amp;nbsp;Sun&amp;nbsp;Mar&amp;nbsp;10&amp;nbsp;18:17:18&amp;nbsp;2019&amp;nbsp;UTC&amp;nbsp;using&amp;nbsp;RSA&amp;nbsp;key&amp;nbsp;ID&amp;nbsp;5DE6FD698AD6FDD2&amp;nbsp; gpg:&amp;nbsp;Can't&amp;nbsp;check&amp;nbsp;signature:&amp;nbsp;public&amp;nbsp;key&amp;nbsp;not&amp;nbsp;found&amp;nbsp; &amp;nbsp; We don&amp;rsquo;t have the packager public key (AB39BEA1) in our system. You need to retrieve the public key from a key server.
Term&amp;nbsp; $gpg&amp;nbsp;--keyserver&amp;nbsp;keyserver.ubuntu.com&amp;nbsp;--recv-key&amp;nbsp;5DE6FD698AD6FDD2&amp;nbsp; gpg:&amp;nbsp;requesting&amp;nbsp;key&amp;nbsp;5DE6FD698AD6FDD2&amp;nbsp;from&amp;nbsp;hkp&amp;nbsp;server&amp;nbsp;keyserver.ubuntu.com&amp;nbsp; gpg:&amp;nbsp;trustdb&amp;nbsp;created&amp;nbsp; gpg:&amp;nbsp;key&amp;nbsp;5DE6FD698AD6FDD2:&amp;nbsp;public&amp;nbsp;key&amp;nbsp;"Devops&amp;nbsp;Faith&amp;nbsp;Package&amp;nbsp;Manager&amp;nbsp;"&amp;nbsp;imported&amp;nbsp; gpg:&amp;nbsp;Total&amp;nbsp;number&amp;nbsp;processed:&amp;nbsp;1&amp;nbsp; gpg:&amp;nbsp;imported:&amp;nbsp;1 (RSA:&amp;nbsp;1)&amp;nbsp; Now you can verify the signature of the package:</description></item><item><title>Verifying packages (PGP and SHA256)</title><link>https://www.krakend.io/docs/v1.3/overview/verifying-packages/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/overview/verifying-packages/</guid><description>How to make sure what you are downloading is legit.
PGP We will check the detached signature PGP against our package KrakenD.
$ gpg --verify krakend_1.3.0_amd64.tar.gz.asc krakend_1.3.0_amd64.tar.gz gpg: Signature made Sun Mar 10 18:17:18 2019 UTC using RSA key ID 5DE6FD698AD6FDD2 gpg: Can't check signature: public key not found We don&amp;rsquo;t have the packager public key (AB39BEA1) in our system. You need to retrieve the public key from a key server.</description></item><item><title>Verifying packages (PGP and SHA256)</title><link>https://www.krakend.io/docs/v1.4/overview/verifying-packages/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.4/overview/verifying-packages/</guid><description>How to make sure what you are downloading is legit.
PGP We will check the detached signature PGP against our package KrakenD.
$ gpg --verify krakend_1.4.1_amd64.tar.gz.asc krakend_1.4.1_amd64.tar.gz gpg: Signature made Sun Mar 10 18:17:18 2019 UTC using RSA key ID 5DE6FD698AD6FDD2 gpg: Can't check signature: public key not found We don&amp;rsquo;t have the packager public key (AB39BEA1) in our system. You need to retrieve the public key from a key server.</description></item></channel></rss>