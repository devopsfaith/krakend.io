<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>KrakenD's configuration file(s) on KrakenD - Open source API Gateway</title><link>https://www.krakend.io/docs/v2.0/configuration/</link><description>Recent content in KrakenD's configuration file(s) on KrakenD - Open source API Gateway</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 01 Jul 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://www.krakend.io/docs/v2.0/configuration/index.xml" rel="self" type="application/rss+xml"/><item><title>Understanding the configuration file</title><link>https://www.krakend.io/docs/v2.0/configuration/structure/</link><pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v2.0/configuration/structure/</guid><description>All KrakenD behavior depends on its configuration file(s). Although the configuration supports formats other than JSON and it can be described using multiple files, you&amp;rsquo;ll find it referenced through all this documentation and for simplicity as the krakend.json. Being familiar with its structure it&amp;rsquo;s essential.
Configuration file structure There are a large number of options you can put in this file. Let&amp;rsquo;s focus now only on the main structure: { &amp;#34;$schema&amp;#34;: &amp;#34;https://www.</description></item><item><title>Flexible configuration</title><link>https://www.krakend.io/docs/v2.0/configuration/flexible-config/</link><pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v2.0/configuration/flexible-config/</guid><description>The Flexible Configuration component is included in the KrakenD API Gateway and allows you to split the configuration into multiple files while using variables and templates.
The Flexible Configuration enables template processing. It compiles during start-up time. With this, you have the opportunity to produce a more sophisticated configuration file that utilizes variables and brings content from external files.
A template system gives you full flexibility to work with the configuration file.</description></item><item><title>Validating the configuration with `check`</title><link>https://www.krakend.io/docs/v2.0/configuration/check/</link><pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v2.0/configuration/check/</guid><description>The krakend check command validates KrakenD configuration files written in any of its supported formats.
It&amp;rsquo;s able to perform three things:
Syntax validation - For any format (.yml, .json, .toml, etc) Linting - Besides checking that the file isn&amp;rsquo;t malformed, the linter checks your config exhaustively against KrakenD&amp;rsquo;s official schema to detect wrong types, unknown attributes, or misplaced components. Only available when you work with JSON formats. Testing - It tests a run of the service to catch problems that are not strictly related to linting but to the runtime.</description></item><item><title>KrakenD file supported formats</title><link>https://www.krakend.io/docs/v2.0/configuration/supported-formats/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v2.0/configuration/supported-formats/</guid><description>The expected configuration file format by default is json, but KrakenD can parse different formats if one of the following is found:
krakend.json krakend.toml krakend.yaml krakend.yml krakend.properties krakend.props krakend.prop krakend.hcl Nevertheless, our recommendation is to choose JSON.
Validate the syntax with krakend check
Why choosing json? You are free to choose YAML, TOML or any of the other formats at your best convenience. But have in mind the following logic when choosing a file format other than json.</description></item><item><title>Overriding the configuration with environment vars</title><link>https://www.krakend.io/docs/v2.0/configuration/environment-vars/</link><pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v2.0/configuration/environment-vars/</guid><description>When KrakenD runs, all the behavior is loaded from the configuration file. Through environment variables, you can override existing values in the configuration. There are two different ways of injecting environment vars.
The key to override must exist in the configuration The environment variables are meant to replace existing attributes in the configuration. Therefore, you cannot set new parameters that do not exist in the configuration. First level properties You can override its value with an environment variable for each configuration value that isn&amp;rsquo;t nested (meaning first-level properties of the configuration).</description></item><item><title>Migrating config from KrakenD 1.x or 0.x</title><link>https://www.krakend.io/docs/v2.0/configuration/migrating/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v2.0/configuration/migrating/</guid><description>The KrakenD 2.0 release is a major version that simplifies the configuration of v1.x and standardizes field names that were using different criteria to declare the attributes.
This migration allows you to:
Migrate from KrakenD 0.x to 2.x Migrate from KrakenD 1.0 to 2.x Migrate from KrakenD 1.2 to 2.x Migrate from KrakenD 1.3 to 2.x Migrate from KrakenD 1.4 to 2.x Download migration tool Migrating to KrakenD 2.</description></item></channel></rss>