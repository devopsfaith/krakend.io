<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>KrakenD's configuration file(s) on KrakenD - Open source API Gateway</title><link>https://www.krakend.io/docs/configuration/</link><description>Recent content in KrakenD's configuration file(s) on KrakenD - Open source API Gateway</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 01 Jul 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://www.krakend.io/docs/configuration/index.xml" rel="self" type="application/rss+xml"/><item><title>Understanding the configuration file</title><link>https://www.krakend.io/docs/configuration/structure/</link><pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/configuration/structure/</guid><description>All KrakenD behavior depends on its configuration file(s). You&amp;rsquo;ll find it referenced through all this documentation and for simplicity as the krakend.json, although the configuration supports formats other than JSON and it can be described using multiple files and templates. Being familiar with its structure it&amp;rsquo;s essential.
The correctness of a configuration file is determined by the check and audit commands using different perspectives.
Configuration file structure There are a large number of options you can put in this file.</description></item><item><title>Validating the configuration with `check`</title><link>https://www.krakend.io/docs/configuration/check/</link><pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/configuration/check/</guid><description>The krakend check command validates KrakenD configuration files written in any of its supported formats.
It&amp;rsquo;s able to perform three things:
Syntax validation - For any format (.yml, .json, .toml, etc) Linting - Besides checking that the file isn&amp;rsquo;t malformed, the linter checks your config exhaustively against KrakenD&amp;rsquo;s official schema to detect wrong types, unknown attributes, or misplaced components. Only available when you work with JSON formats. Testing - It tests a run of the service to catch problems that are not strictly related to linting but to the runtime.</description></item><item><title>Security audit of your configuration</title><link>https://www.krakend.io/docs/configuration/audit/</link><pubDate>Wed, 18 Jan 2023 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/configuration/audit/</guid><description>The krakend audit command is a rule evaluation tool that checks configuration files written in any of its supported formats and returns practical security recommendations. It is designed to raise basic red flags and provide essential advice on your configuration. The output of the configuration and classification is inspired by the CIS Benchmarks.
Security disclaimer If the audit command passes, it does not mean that your API is necessarily secure but that the evaluated rules have passed (find them as recommendations below).</description></item><item><title>Flexible Configuration: template-based config</title><link>https://www.krakend.io/docs/configuration/flexible-config/</link><pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/configuration/flexible-config/</guid><description>The Flexible Configuration allows you to declare the configuration using multiple files and use a templates system, opening the door to multi-environment configurations and code reuse.
The Flexible Configuration enables a template processor based on Go templates and is enriched with Sprig functions and KrakenD functions.
You can encode your configuration files in any of the supported formats (json, yaml, toml, etc.), as the template is agnostic of its contents.</description></item><item><title>KrakenD file supported formats</title><link>https://www.krakend.io/docs/configuration/supported-formats/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/configuration/supported-formats/</guid><description>The expected configuration file format by default is json, but KrakenD can parse any of these file formats:
.json (recommended) .toml .yaml .yml .properties .props .prop .hcl You can validate the syntax of any of these with krakend check
Why is JSON recommended? You are free to choose json, yaml, toml or any of the other formats listed above at your best convenience. But have in mind the following limitations when choosing a file format that is not json:</description></item><item><title>Overriding configuration with environment vars</title><link>https://www.krakend.io/docs/configuration/environment-vars/</link><pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/configuration/environment-vars/</guid><description>When KrakenD runs, all the behavior is loaded from the configuration file. Through environment variables, you can override some of its values. There are two different ways of injecting environment vars.
Replacing existing values in the configuration Setting new values when using the {{env} function in flexible configuration Value replacement with env vars You can override configuration values with an environment variable for each configuration value that isn&amp;rsquo;t nested (meaning first-level properties of the configuration).</description></item><item><title>Migrating config from KrakenD 1.x or 0.x</title><link>https://www.krakend.io/docs/configuration/migrating/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/configuration/migrating/</guid><description>The KrakenD 2.0 release is a major version that simplifies the configuration of v1.x and standardizes field names that were using different criteria to declare the attributes.
This migration allows you to:
Migrate from KrakenD 0.x to 2.x Migrate from KrakenD 1.0 to 2.x Migrate from KrakenD 1.2 to 2.x Migrate from KrakenD 1.3 to 2.x Migrate from KrakenD 1.4 to 2.x Download migration tool Migrating to KrakenD 2.</description></item></channel></rss>