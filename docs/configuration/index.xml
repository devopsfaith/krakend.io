<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Configuration Guide for KrakenD API Gateway on KrakenD - Open source API Gateway</title><link>https://www.krakend.io/docs/configuration/</link><description>Recent content in Configuration Guide for KrakenD API Gateway on KrakenD - Open source API Gateway</description><generator>Hugo</generator><language>en</language><lastBuildDate>Fri, 17 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://www.krakend.io/docs/configuration/index.xml" rel="self" type="application/rss+xml"/><item><title>Configuration Structure</title><link>https://www.krakend.io/docs/configuration/structure/</link><pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/configuration/structure/</guid><description>All KrakenD behavior depends on its configuration file(s). You&amp;rsquo;ll find it referenced through all this documentation and for simplicity as the krakend.json, although the configuration supports formats other than JSON and it can be described using multiple files and templates. Being familiar with its structure it&amp;rsquo;s essential.
The correctness of a configuration file is determined by the check and audit commands using different perspectives.
Configuration file structure There are a large number of options you can put in this file.</description></item><item><title>Validating the configuration with `check`</title><link>https://www.krakend.io/docs/configuration/check/</link><pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/configuration/check/</guid><description>The krakend check command validates KrakenD configuration files written in any of its supported formats.
It&amp;rsquo;s able to perform three things:
Syntax validation - For any format (.yml, .json, .toml, etc) Linting - Besides checking that the file isn&amp;rsquo;t malformed, the linter checks your config exhaustively against KrakenD&amp;rsquo;s official schema (repo) to detect wrong types, unknown attributes, or misplaced components. Only available when you work with JSON formats. Testing - It tests a run of the service to catch problems that are not strictly related to linting but to the runtime.</description></item><item><title>Auditing KrakenD API Gateway Configurations</title><link>https://www.krakend.io/docs/configuration/audit/</link><pubDate>Wed, 18 Jan 2023 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/configuration/audit/</guid><description>The krakend audit command is a rule evaluation tool that checks configuration files written in any of its supported formats and returns practical security recommendations. It is designed to raise basic red flags and provide essential advice on your configuration. The output of the configuration and classification is inspired by the CIS Benchmarks.
Security disclaimer If the audit command passes, it does not mean that your API is necessarily secure but that the evaluated rules have passed (find them as recommendations below).</description></item><item><title>Flexible Configuration: A template-based config for API Gateway</title><link>https://www.krakend.io/docs/configuration/flexible-config/</link><pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/configuration/flexible-config/</guid><description>The Flexible Configuration allows you to declare the configuration using multiple files and use a templates system, opening the door to multi-environment configurations and code reuse.
The Flexible Configuration enables a template processor based on Go templates and is enriched with Sprig functions and KrakenD functions.
You can encode your configuration files in any of the supported formats (json, yaml, toml, etc.), as the template is agnostic of its contents.</description></item><item><title>Introduction to Templates</title><link>https://www.krakend.io/docs/configuration/templates/</link><pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/configuration/templates/</guid><description>There are several components and features in KrakenD that allow you to define configurations or content manipulations using templates.
Whether you are using templates with flexible configuration, a Request generator or Response manipulation the syntax you use is the same, and it&amp;rsquo;s based on Go templates (as Helm, Kubernetes, and many other systems).
Our convention for saving templates, is using the .tmpl extension, although this is not enforced. This document provides a few direction to use templates.</description></item><item><title>Supported Configuration Formats</title><link>https://www.krakend.io/docs/configuration/supported-formats/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/configuration/supported-formats/</guid><description>The expected configuration file format by default is json, but KrakenD can parse any of these file formats:
.json (recommended) .toml .yaml .yml .properties .props .prop .hcl You can validate the syntax of any of these with krakend check
Why is JSON recommended? You are free to choose json, yaml, toml or any of the other formats listed above at your best convenience. But have in mind the following limitations when choosing a file format that is not json:</description></item><item><title>API Configuration Designer</title><link>https://www.krakend.io/docs/configuration/designer/</link><pubDate>Wed, 12 Apr 2023 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/configuration/designer/</guid><description>The Designer is a UI that allows you to create KrakenD configurations from scratch or resume editing an existing one. It is a tool very useful in your early contact with KrakenD, as it helps you try functionalities without having to learn the different attributes of the configuration.
The designer is a learning tool more than an administration one. KrakenD configuration and administration is designed with GitOps in mind (under the version control system and released through CI/CD).</description></item><item><title>Environment variables in the configuration</title><link>https://www.krakend.io/docs/configuration/environment-vars/</link><pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/configuration/environment-vars/</guid><description>When KrakenD runs (whether with run or check), all the behavior is loaded from the configuration file. Through environment variables, you can also set values. There are two different ways of injecting environment vars:
Use a KRAKEND_-like reserved environment variable: To override values set in the configuration. Set your own environment variables when using the {{env}} function in flexible configuration templates. Use a reserved environment variable There are a group of reserved environment variables that are automatically recognized by KrakenD when set.</description></item><item><title>Working Directory: Specifying paths</title><link>https://www.krakend.io/docs/configuration/working-directory/</link><pubDate>Fri, 17 Nov 2023 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/configuration/working-directory/</guid><description>Many components and options in KrakenD allow you to specify paths. In all of them, you can use absolute or relative paths.
For absolute paths, no possible interpretation or mistake arises when reading them. For instance, if you write /etc/krakend/krakend.json, you know exactly where this file is. Absolute paths are as clear as water but less convenient when your environments have different locations.
Relative paths, on the other hand, are helpful because you only specify a small part, but there is usually the question of the location of their corresponding base directory.</description></item><item><title>Upgrading KrakenD from an older version</title><link>https://www.krakend.io/docs/configuration/migrating/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/configuration/migrating/</guid><description>Upgrading to a new version of KrakenD is designed to be straightforward, thanks to our commitment to maintaining backward compatibility across versions within the same major release (e.g., within 2.x versions). You can generally update KrakenD to a newer version without altering your configuration. However, to ensure optimal performance and access to the latest features, reviewing and adjusting your configuration is wise.
KrakenD&amp;rsquo;s upgrade policy Our policy focuses on minimizing disruption by preserving compatibility with previous versions.</description></item></channel></rss>