<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>KrakenD's configuration file(s) on KrakenD - Open source API Gateway</title><link>https://www.krakend.io/docs/v1.3/configuration/</link><description>Recent content in KrakenD's configuration file(s) on KrakenD - Open source API Gateway</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 01 Jul 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://www.krakend.io/docs/v1.3/configuration/index.xml" rel="self" type="application/rss+xml"/><item><title>Understanding the configuration file</title><link>https://www.krakend.io/docs/v1.3/configuration/structure/</link><pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/configuration/structure/</guid><description>All KrakenD behavior depends on its configuration file. Although the configuration supports formats other than JSON and it can be described by multiple files, you&amp;rsquo;ll find it referenced through all this documentation and for simplicity as the krakend.json. Being familiar with its structure it&amp;rsquo;s essential.
Configuration file structure There are a large number of options you can put in this file. Let&amp;rsquo;s focus now only on the main structure: { &amp;#34;version&amp;#34;: 2, &amp;#34;endpoints&amp;#34;: [], &amp;#34;extra_config&amp;#34;: {} }</description></item><item><title>Flexible configuration</title><link>https://www.krakend.io/docs/v1.3/configuration/flexible-config/</link><pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/configuration/flexible-config/</guid><description>The Flexible Configuration component is included in the KrakenD API Gateway and allows you to split the configuration file into several pieces for a more natural organization.
When the Flexible Configuration is enabled, KrakenD assumes that your configuration file is a template that needs compilation during start-up time. With this, you have the opportunity to produce a more sophisticated configuration file that utilizes variables and brings content from external files.</description></item><item><title>KrakenD file supported formats</title><link>https://www.krakend.io/docs/v1.3/configuration/supported-formats/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/configuration/supported-formats/</guid><description>The expected configuration file format by default is json, but KrakenD can parse different formats if one of the following is found:
krakend.json krakend.toml krakend.yaml krakend.yml krakend.properties krakend.props krakend.prop krakend.hcl Nevertheless, our recommendation is to choose JSON.
Validate the syntax (not the logic) with krakend check
Why choosing json? You are free to choose YAML, TOML or any of the other formats at your best convenience. But have in mind the following logic when choosing a file format other than json.</description></item><item><title>Overriding the configuration with environment vars</title><link>https://www.krakend.io/docs/v1.3/configuration/environment-vars/</link><pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v1.3/configuration/environment-vars/</guid><description>When KrakenD runs, all the behavior is loaded from the configuration file. For each configuration value that isn&amp;rsquo;t nested (meaning first-level properties of the configuration), you can override its value with an environment variable.
All configuration environment variables must have the prefix KRAKEND_ and declared in uppercase. The variable name after the prefix must match the property in the configuration value.
For instance, take the following krakend.json configuration as an example:</description></item></channel></rss>