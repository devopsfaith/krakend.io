<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Security Policies Engine on KrakenD - Open source API Gateway</title><link>https://www.krakend.io/docs/enterprise/v2.4/security-policies/</link><description>Recent content in Security Policies Engine on KrakenD - Open source API Gateway</description><generator>Hugo</generator><language>en</language><lastBuildDate>Mon, 12 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.krakend.io/docs/enterprise/v2.4/security-policies/index.xml" rel="self" type="application/rss+xml"/><item><title>Security Policies language and syntax</title><link>https://www.krakend.io/docs/enterprise/v2.4/security-policies/policy-language/</link><pubDate>Mon, 12 Dec 2022 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v2.4/security-policies/policy-language/</guid><description>The policies language and syntax look nearly identical to C++, Go, Java, and Typescript and is based on Google&amp;rsquo;s CEL built-in functions and advanced macros. If you have existing validation using the CEL Component, you can also port them as policies.
Basic syntax Data types The supported data types are:
uint (unsigned integer) int (integer) double (Number, float) string (string) bool (boolean) null_type bytes (on JSON mapping a string of base64-encoded bytes) map (Object.</description></item><item><title>CEL Built-in functions for Security Policies</title><link>https://www.krakend.io/docs/enterprise/v2.4/security-policies/built-in-functions/</link><pubDate>Mon, 12 Dec 2022 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v2.4/security-policies/built-in-functions/</guid><description>The CEL language (language definition) offers the following built-in functions and macros that you can use while building your security policies or CEL validations.
The following functions and macros are always available regardless of your configuration. The signatures of the functions below follow the format function -&amp;gt; return, and include the different data &amp;lt;types&amp;gt; you can use in each of them.
Membership functions and macros Their usage is checking different aspects of maps and arrays mostly.</description></item><item><title>Advanced Macros for Security Policies</title><link>https://www.krakend.io/docs/enterprise/v2.4/security-policies/advanced-policy-macros/</link><pubDate>Mon, 12 Dec 2022 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v2.4/security-policies/advanced-policy-macros/</guid><description>The advanced macros are powerful functions that allow you to declare Security Policies with simple expressions, reducing code complexity and speeding up development. Advanced macros are not available on the CEL component, only on Security Policies.
You have the following list of advanced macros always available unless you set in the configuration the disable_advanced_macros flag to true.
Adding functionality The following list is not the complete catalogue of functions, but the ones added to the built-in functions.</description></item><item><title>Security Policies Playbook</title><link>https://www.krakend.io/docs/enterprise/v2.4/security-policies/playbook/</link><pubDate>Mon, 12 Dec 2022 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/v2.4/security-policies/playbook/</guid><description>An example is sometimes self-explanatory and lets you see the potential of the kind of stuff you can do with policies. The following examples demonstrate who to apply different policies to your API, but possibilities are endless!
Check if user has one of the selected roles (RBAC) or attributes (ABAC) This configuration would go inside the endpoint&amp;rsquo;s extra_config. Checks that the role is admin or root, and that the department is also contained in a list:</description></item></channel></rss>