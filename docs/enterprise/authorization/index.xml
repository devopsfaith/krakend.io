<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Authorization and Authentication (authZ + authN) on KrakenD - Open source API Gateway</title><link>https://www.krakend.io/docs/enterprise/authorization/</link><description>Recent content in Authorization and Authentication (authZ + authN) on KrakenD - Open source API Gateway</description><generator>Hugo</generator><language>en</language><lastBuildDate>Mon, 23 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://www.krakend.io/docs/enterprise/authorization/index.xml" rel="self" type="application/rss+xml"/><item><title>JWT Overview - Authorization</title><link>https://www.krakend.io/docs/enterprise/authorization/jwt-overview/</link><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/authorization/jwt-overview/</guid><description>The JSON Web Token specification is an industry standard to represent claims securely between two parties. The JWT is a base64 encoded JSON object that contains key-value pairs of attributes that are signed by a trusted authority.
When JWT shields a specific set of endpoints, requests to the API gateway must provide a token. Verification of the token takes place in every request, including the check of the signature and optionally the assurance that its issuer, roles, and audience are sufficient to access the endpoint.</description></item><item><title>JWT Validation</title><link>https://www.krakend.io/docs/enterprise/authorization/jwt-validation/</link><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/authorization/jwt-validation/</guid><description>Protect endpoints from public usage by validating JWT tokens generated by any industry-standard OpenID Connect (OIDC) integration.
Before digging any further, here are some answers to frequently asked questions:
KrakenD does not generate the tokens itself. Still, you can plug it into any SaaS or self-hosted OpenID Identity Provider (IdP) using industry standards (e.g., Auth0, Azure AD, Descope, Google Identity Platform/Firebase, Keycloak, etc.)
KrakenD does not need to validate all calls using your IdP.</description></item><item><title>Shared JWK Caching for Authorization</title><link>https://www.krakend.io/docs/enterprise/authorization/jwk-caching/</link><pubDate>Fri, 17 Mar 2023 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/authorization/jwk-caching/</guid><description>The JWT validation and JWT signing components do not apply cache by default.
Validating tokens in a high-throughput scenario can be a consuming operation. To refrain the gateway from downloading on each request the signing keys, you can enable caching. It&amp;rsquo;s usually a bad idea to not cache the content of the JWK URL as your identity provider would receive a huge amount of traffic.
Caching does not apply to jwk_local_path When instead of using jwk_url you have the keys on disk and you use jwk_local_path, then you don&amp;rsquo;t need to set any cache at all.</description></item><item><title>JWT Signing</title><link>https://www.krakend.io/docs/enterprise/authorization/jwt-signing/</link><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/authorization/jwt-signing/</guid><description>The JWT signing component creates a wrapper for your existing login endpoint that signs with your secret key the selected fields of the backend payload right before returning the content to the end-user.
The primary usage for this component is in migrations from monolith to microservices, or in ecosystems where there is no Identity/OAuth server yet, as it allows the immediate adoption of signed JSON Web Tokens without the need to implement a new service.</description></item><item><title>Token Revocation</title><link>https://www.krakend.io/docs/enterprise/authorization/revoking-tokens/</link><pubDate>Mon, 05 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/authorization/revoking-tokens/</guid><description>The API Gateway authorizes users that provide valid tokens according to your criteria, but at some point, you might want to change your mind and decide to revoke JWT tokens that are still valid.
Revoke tokens via API The Enterprise version offers a Revoke Server that coordinates token revokes in a cluster using a REST API. When are you going to need this? Examples of situations where you might need to revoke perfectly legit tokens:</description></item><item><title>Mutual Authentication</title><link>https://www.krakend.io/docs/enterprise/authorization/mutual-authentication/</link><pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/authorization/mutual-authentication/</guid><description>mTLS is an authentication mechanism used traditionally in business-to-business (B2B) applications where clients provide a certificate that allows to connect to the KrakenD server.
As KrakenD is a piece of software in the middle of two parts, there are different types of mTLS supported, that can work together or separately.
Service mTLS: When you require end-users to provide a certificate to connect to KrakenD. Client mTLS: When you require KrakenD to provide a certificate to connect to your services.</description></item><item><title>Client Credentials Authorization</title><link>https://www.krakend.io/docs/enterprise/authorization/client-credentials/</link><pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/authorization/client-credentials/</guid><description>Through the OAuth 2.0 Client Credentials Grant, KrakenD can do a 2-legged OAuth2 flow, which means that the gateway requests to your authorization server an access token before reaching the backend&amp;rsquo;s protected resources. This token is passed in the &amp;ldquo;Authorization&amp;rdquo; header. The token refreshes when needed.
The client credentials authorize KrakenD, as the client, to access the protected resources.
Successfully setting the client credentials for a backend means that KrakenD can get the protected content.</description></item><item><title>Auth0 Integration</title><link>https://www.krakend.io/docs/enterprise/authorization/auth0/</link><pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/authorization/auth0/</guid><description>Let&amp;rsquo;s start with the elephant in the room: when you face the challenge of creating a modern API that has to be scalable, secure, performant, and resilient, it might look like a daunting task.
The good news is that combining products like Auth0 and KrakenD helps you solve this exact problem with an implementation that is straightforward.
Auth0 can authenticate users and machines, and KrakenD knows your business APIs and validate them in a very efficient and convenient way.</description></item><item><title>Keycloak Authorization</title><link>https://www.krakend.io/docs/enterprise/authorization/keycloak/</link><pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/authorization/keycloak/</guid><description>The Keycloak integration allows one of the many possible OpenID Connect different security options available in KrakenD.
Keycloak is an Open Source Identity and Access Management project, sponsored by RedHat. The KrakenD configuration for Keycloak relies internally on the JWT validation component.
Keycloak integration JSON web tokens (JWT) are an open standard (RFC 7519) that define a way for securely transmitting information between parties. JWT tokens are compact, secure (digitally signed), and have become an industry-standard used at internet scale.</description></item><item><title>Descope Authorization</title><link>https://www.krakend.io/docs/enterprise/authorization/descope/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/authorization/descope/</guid><description>Securing your APIs and underlying microservices is crucial in modern development. Descope enables you to add advanced authentication capabilities to your KrakenD endpoints efficiently.
Descope is a passwordless authentication and user management service designed for developers. KrakenD integrates with Descope via the JWT validation component.
Descope integration JSON web tokens (JWT) are an open standard (RFC 7519) that define a way for securely transmitting information between parties. JWT tokens are compact, secure (digitally signed), and have become an industry-standard used at internet scale.</description></item></channel></rss>