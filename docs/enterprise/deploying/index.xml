<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Deploying KrakenD API Gateway - Best Practices and Guidelines on KrakenD - Open source API Gateway</title><link>https://www.krakend.io/docs/enterprise/deploying/</link><description>Recent content in Deploying KrakenD API Gateway - Best Practices and Guidelines on KrakenD - Open source API Gateway</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 01 Feb 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://www.krakend.io/docs/enterprise/deploying/index.xml" rel="self" type="application/rss+xml"/><item><title>Clustering Deployment Guide</title><link>https://www.krakend.io/docs/enterprise/deploying/clustering/</link><pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/deploying/clustering/</guid><description>KrakenD nodes are stateless and they don&amp;rsquo;t store data or application state to a persistent storage. Instead, any configuration data and application state exist within the configuration file. Nodes are expendable and replaceable at any time, as they do not hold anything.
A KrakenD cluster consists of multiple KrakenD instances running simultaneously and working together to provide increased reliability, higher throughput, scalability, and fail-over. There is no special software that you need to run a cluster other than KrakenD and the hardware or software that will balance the connections.</description></item><item><title>Server Dimensioning for KrakenD API Gateway Deployment</title><link>https://www.krakend.io/docs/enterprise/deploying/server-dimensioning/</link><pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/deploying/server-dimensioning/</guid><description>When comparing KrakenD with other solutions, a key difference is that its Total Cost of Ownership is actually lower, and you can save a lot of money in infrastructure.
On the hardware side, KrakenD is very light and consumes very low resources. For instance, the consumption pattern of the baseline (we will see this definition below) is around 100-200MB of RAM and can work on production with 0.5 vCPU. This baseline can process thousands of requests per second.</description></item><item><title>CI/CD Deployment on the API Gateway</title><link>https://www.krakend.io/docs/enterprise/deploying/ci-cd/</link><pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/deploying/ci-cd/</guid><description>KrakenD operates with its single binary and your associated configuration. Therefore, your build process or CI/CD pipeline only needs to ensure that the configuration file is correct. These are a few recommendations to a safer KrakenD deployment:
Make sure the configuration file is valid. When using Flexible Configuration, generate the final krakend.json using FC_OUT as the final artifact Optional - Ensure there are no severe security problems using the audit command.</description></item><item><title>Deploying KrakenD API Gateway with Docker</title><link>https://www.krakend.io/docs/enterprise/deploying/docker/</link><pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/deploying/docker/</guid><description>If you use containers, the recommended approach is to write your own Dockerfile and deploy an immutable artifact (embedding the config).
In its simplified form would be:
FROM krakend/krakend-ee:2.9 COPY krakend.json /etc/krakend/krakend.json # Uncomment with Enterprise image: # COPY LICENSE /etc/krakend/LICENSE Volume or copy? Even though you can use the official container directly and attach the configuration mounting an external volume (or ConfigMap in Kubernetes), a custom image with your configuration copied inside has benefits.</description></item><item><title>Deploying KrakenD API Gateway on Kubernetes</title><link>https://www.krakend.io/docs/enterprise/deploying/kubernetes/</link><pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/deploying/kubernetes/</guid><description>Deploying KrakenD in Kubernetes requires a straightforward configuration.
Create a Dockerfile that includes the configuration of the service. Read how to generate a Docker artifact for detailed instructions. You could also use a ConfigMap, although the recommendation is to use immutable artifacts.
From here you need to create a NodePort and send all the traffic to KrakenD.
Run as user 1000 Whether you run KrakenD on Kubernetes, OpenShift, or any other platform with the capability to run the container as a specific user UID, make sure you use the UID 1000 Deployment definition YAML The KrakenD deployment definition, in a file called deployment-definition.</description></item></channel></rss>