<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Telemetry and Monitoring on KrakenD - Open source API Gateway</title><link>https://www.krakend.io/docs/enterprise/telemetry/</link><description>Recent content in Telemetry and Monitoring on KrakenD - Open source API Gateway</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 15 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://www.krakend.io/docs/enterprise/telemetry/index.xml" rel="self" type="application/rss+xml"/><item><title>Telemetry and Monitoring through OpenTelemetry</title><link>https://www.krakend.io/docs/enterprise/telemetry/opentelemetry/</link><pubDate>Mon, 22 Jan 2024 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/telemetry/opentelemetry/</guid><description>OpenTelemetry (for short OTEL) offers a comprehensive, unified, and vendor-neutral approach to collecting and managing telemetry data, providing enhanced observability and deeper insights into application performance and behavior. It&amp;rsquo;s particularly beneficial in complex, distributed, and cloud-native environments.
OpenTelemetry captures detailed, contextual information about the operation of your applications. This includes not only metrics but also tracing data that shows the full lifecycle of requests as they flow through your systems, providing insights into performance bottlenecks, latency issues, and error diagnostics.</description></item><item><title>Understanding OpenTelemetry layers and metrics</title><link>https://www.krakend.io/docs/enterprise/telemetry/opentelemetry-layers-metrics/</link><pubDate>Mon, 22 Jan 2024 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/telemetry/opentelemetry-layers-metrics/</guid><description>You can add several exporters to your OpenTelemetry configuration (the more, the hungrier the gateway will be), and KrakenD will send data to all the declared exporters and layers by default.
While exporters define where you will have the metrics, the layers define which metrics you want to have. The layers contain the traces and metrics for a subset of the execution flow. These are the layers you can use:</description></item><item><title>Granular OpenTelemetry by endpoint</title><link>https://www.krakend.io/docs/enterprise/telemetry/opentelemetry-by-endpoint/</link><pubDate>Thu, 18 Apr 2024 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/telemetry/opentelemetry-by-endpoint/</guid><description>The OpenTelemetry configuration is declared at the service level, but in the Enterprise edition you have more granularity and you can override metrics and traces per endpoint and per backend as follows.
Endpoint Override of metrics and traces The following example overrides some properties that could be declared at the service level, and changes the exporters defined there to use a different set.
While the proxy section can be defined in the Community edition, the exporters_override and backend sections are Enterprise only.</description></item><item><title>Authenticated metrics to SaaS providers using OTEL</title><link>https://www.krakend.io/docs/enterprise/telemetry/opentelemetry-security/</link><pubDate>Thu, 18 Apr 2024 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/telemetry/opentelemetry-security/</guid><description>The OpenTelemetry Security component allows your KrakenD nodes to push data to a remote collector over the Internet that needs authentication, usually adding a token header.
It allows you to run KrakenD without installing a collector in your infrastructure and push data directly to a SaaS provider, saving time by simplifying the infrastructure needed to monitor the activity.
It combines with the telemetry/opentelemetry configuration and separates the authentication data into a new namespace: telemetry/opentelemetry-security.</description></item><item><title>Prometheus' metrics endpoint</title><link>https://www.krakend.io/docs/enterprise/telemetry/prometheus/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/telemetry/prometheus/</guid><description>Prometheus is an open-source system monitoring and alerting toolkit that you can use to scrap a /metrics endpoint on KrakenD in the selected port. For instance, you could have an endpoint like http://localhost:9091/metrics.
When using Prometheus with OpenTelemetry, you can use a ready-to-use Grafana dashboard to visualize metrics, as shown in the image above.
The mechanics are simple: you add the telemetry/opentelemetry integration with a prometheus exporter, and then you add a Prometheus job to scrap from your KrakenD instances the metrics.</description></item><item><title>Telemetry and Monitoring with Grafana</title><link>https://www.krakend.io/docs/enterprise/telemetry/grafana/</link><pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/telemetry/grafana/</guid><description>The preconfigured Grafana dashboard for KrakenD offers valuable information to understand the performance of your services and detect anomalies in the service.
The dashboard is extensive and offers you metrics like:
Requests from users to KrakenD Requests from KrakenD to your backends Response times Memory usage and details Endpoints and status codes Latencies Heatmaps Open connections Throughput Distributions, timers, garbage collection and a long etcetera The following video makes a quick tour of the information you can find on our Grafana Dashboard using Prometheus as data source:</description></item><item><title>InfluxDB Telemetry Integration</title><link>https://www.krakend.io/docs/enterprise/telemetry/influxdb/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/telemetry/influxdb/</guid><description>InfluxDB is a time series database designed to handle high write and query loads and allows you to store and visualize metrics data. Influx is offered as an open-source solution you can host but also as a cloud service.
Native influx component Before KrakenD v2.6, the only option to push data to Influx was configuring the native exporter telemetry/influx. Although the component is development-frozen in favor of OTEL, you can still use it as described in the Metrics API.</description></item><item><title>OpenCensus Telemetry Integration</title><link>https://www.krakend.io/docs/enterprise/telemetry/opencensus/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/telemetry/opencensus/</guid><description>OpenCensus is no longer maintained KrakenD has traditionally offered its telemetry integration through this OpenCensus component, which has provided reliable service for over six years, but now is transitioning to the more modern and robust OpenTelemetry framework.
As a result of a change in the industry, the OpenCensus integration is no longer maintained, and all efforts are focused on OpenTelemetry.
The Opencensus exporter is a single component that allows you to export data to multiple providers, both open source and privative.</description></item><item><title>Datadog Telemetry Integration</title><link>https://www.krakend.io/docs/enterprise/telemetry/datadog/</link><pubDate>Fri, 24 Jul 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/telemetry/datadog/</guid><description>Datadog is a cloud monitoring and security platform for developers, IT operations teams, and businesses.
The OpenTelemetry integration allows you to send metrics and traces to Datadog using their collector.
Datadog configuration Datadog uses the standard OTLP exporter, here is a configuration example:
{ &amp;#34;version&amp;#34;: 3, &amp;#34;$schema&amp;#34;: &amp;#34;https://www.krakend.io/schema/krakend.json&amp;#34;, &amp;#34;host&amp;#34;: [ &amp;#34;http://localhost:8080&amp;#34; ], &amp;#34;debug_endpoint&amp;#34;: true, &amp;#34;echo_endpoint&amp;#34;: true, &amp;#34;extra_config&amp;#34;: { &amp;#34;telemetry/opentelemetry&amp;#34;: { &amp;#34;exporters&amp;#34;: { &amp;#34;otlp&amp;#34;: [ { &amp;#34;use_http&amp;#34;: false, &amp;#34;port&amp;#34;: 4317, &amp;#34;host&amp;#34;: &amp;#34;ddagent&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;my_dd_exporter&amp;#34;, &amp;#34;disable_metrics&amp;#34;: false, &amp;#34;disable_traces&amp;#34;: false } ] }, &amp;#34;trace_sample_rate&amp;#34;: 1, &amp;#34;service_name&amp;#34;: &amp;#34;krakend_dd_telemetry&amp;#34;, &amp;#34;metric_reporting_period&amp;#34;: 1 } } } The important part of the configuration is the otlp exporter, which accepts the following fields:</description></item><item><title>Zipkin Telemetry Integration</title><link>https://www.krakend.io/docs/enterprise/telemetry/zipkin/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/telemetry/zipkin/</guid><description>Zipkin is a distributed tracing system. It helps gather timing data needed to troubleshoot latency problems in service architectures.
The Opencensus exporter allows you export data to Zipkin. Enabling it only requires you to add the zipkin exporter in the opencensus module.
The following configuration snippet sends data to your Zipkin:
{ &amp;#34;version&amp;#34;: 3, &amp;#34;extra_config&amp;#34;: { &amp;#34;telemetry/opencensus&amp;#34;: { &amp;#34;sample_rate&amp;#34;: 100, &amp;#34;reporting_period&amp;#34;: 0, &amp;#34;exporters&amp;#34;: { &amp;#34;zipkin&amp;#34;: { &amp;#34;collector_url&amp;#34;: &amp;#34;http://192.168.99.100:9411/api/v2/spans&amp;#34;, &amp;#34;service_name&amp;#34;: &amp;#34;krakend&amp;#34; } } } } } As with all OpenCensus exporters, you can add optional settings in the telemetry/opencensus level:</description></item><item><title>Jaeger Telemetry Integration - KrakenD API Gateway</title><link>https://www.krakend.io/docs/enterprise/telemetry/jaeger/</link><pubDate>Fri, 11 Oct 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/telemetry/jaeger/</guid><description>The KrakenD exporter to Jaeger allows you to submit spans to an OpenTelemetry Collector (HTTP or gRPC) automatically.
Jaeger is an open-source, end-to-end distributed tracing system that allows you to monitor and troubleshoot transactions in complex distributed systems. Use Jaeger when you want to see the complete flow of a user request through KrakenD and its connected services.
Jaeger configuration To add Jaeger, configure a new exporter to the OpenTelemetry settings.</description></item><item><title>AWS X-Ray Telemetry Integration</title><link>https://www.krakend.io/docs/enterprise/telemetry/xray/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/telemetry/xray/</guid><description>AWS X-Ray is a service offered by Amazon that provides an end-to-end view of requests as they travel through your application, and shows a map of your application’s underlying components.
The Opencensus exporter allows you export data to AWS X-Ray. Enabling it only requires you to add the xray exporter in the opencensus module.
Consider switching to OpenTelemetry The AWS Distro for OpenTelemetry Collector (ADOT Collector) is an AWS supported version of the upstream OpenTelemetry Collector and is distributed by Amazon.</description></item><item><title>Google Cloud and Stackdriver Integration</title><link>https://www.krakend.io/docs/enterprise/telemetry/stackdriver/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/telemetry/stackdriver/</guid><description>Google Cloud&amp;rsquo;s Operation Suite (formerly Stackdriver) aggregates metrics, logs, and events from infrastructure, giving developers and operators a rich set of observable signals that speed root-cause analysis and reduce mean time to resolution (MTTR).
The Opencensus exporter allows you to export metrics and traces to Google Cloud. Enabling it only requires you to add the stackdriver exporter in the opencensus module.
The following configuration snippet sends the data:
{ &amp;#34;extra_config&amp;#34;: { &amp;#34;telemetry/opencensus&amp;#34;: { &amp;#34;sample_rate&amp;#34;: 100, &amp;#34;reporting_period&amp;#34;: 60, &amp;#34;enabled_layers&amp;#34;: { &amp;#34;backend&amp;#34;: true, &amp;#34;router&amp;#34;: true, &amp;#34;pipe&amp;#34;: true }, &amp;#34;exporters&amp;#34;: { &amp;#34;stackdriver&amp;#34;: { &amp;#34;project_id&amp;#34;: &amp;#34;my-krakend-project&amp;#34;, &amp;#34;metric_prefix&amp;#34;: &amp;#34;krakend&amp;#34;, &amp;#34;default_labels&amp;#34;: { &amp;#34;env&amp;#34;: &amp;#34;production&amp;#34; } } } } } } As with all OpenCensus exporters, you can add optional settings in the telemetry/opencensus level:</description></item><item><title>Azure Monitor Telemetry Integration</title><link>https://www.krakend.io/docs/enterprise/telemetry/azure/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/telemetry/azure/</guid><description>Azure Monitor collects, analyzes, and acts on telemetry data from your Azure and on-premises environments. Azure Monitor helps you maximize performance and availability of your applications and proactively identify problems in seconds.
The gateway sends all the traces to a local OpenTelemetry Collector (see repository), allowing the gateway to offload data quickly and the collector can take care of additional handling like retries, batching, encryption or even sensitive data filtering. Finally, the Otel Collector pushes all the data to your Application Insights on Azure Monitor.</description></item><item><title>New Relic Telemetry Integration (native DSK)</title><link>https://www.krakend.io/docs/enterprise/telemetry/newrelic/</link><pubDate>Thu, 24 Feb 2022 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/telemetry/newrelic/</guid><description>The New Relic native integration lets you push KrakenD metrics and distributed traces to your New Relic dashboard. It uses internally the official New Relic SDK and brings its features to your APM dashboard.
How is the native SDK integration different from OpenTelemetry? Open-source and Enterprise users can also report traces and metrics to New Relic using the OpenTelemetry integration. Nevertheless, New Relic supports an OTLP specification dated from November 2021 (v1.</description></item><item><title>Extended Metrics API</title><link>https://www.krakend.io/docs/enterprise/telemetry/extended-metrics/</link><pubDate>Mon, 05 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/telemetry/extended-metrics/</guid><description>The metrics API offers a new /__stats/ endpoint in a different port and contains a lot of metrics that you can scrap in a custom collector, or you can push them to InfluxDB.
This component is unrelated to the OpenTelemetry metrics, and they can coexist. Previous to the creation of OpenTelemetry, the combination of Influx and the metrics API, offered the older versions of Grafana dashboard.
Configuration In order to add the metrics API to your KrakenD installation add the telemetry/metrics namespace under extra_config in the root of your configuration file, e.</description></item></channel></rss>