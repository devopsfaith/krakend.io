<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Developer Tools on KrakenD - Open source API Gateway</title><link>https://www.krakend.io/docs/enterprise/developer/</link><description>Recent content in Developer Tools on KrakenD - Open source API Gateway</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 07 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.krakend.io/docs/enterprise/developer/index.xml" rel="self" type="application/rss+xml"/><item><title>IDE integration</title><link>https://www.krakend.io/docs/enterprise/developer/ide-integration/</link><pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/developer/ide-integration/</guid><description>Automatic validation as you type, showing documentation while hovering an attribute, explanation of errors, and autocompletion of properties, are features that you get automatically while working with KrakenD.
For users of Visual Studio Code, Android Studio, JetBrains editors (PHPStorm, PyCharm, GoLand, WebStorm, IntelliJ IDEA&amp;hellip;), Eclipse, and other IDEs that have built-in json schema validation capabilities, there is nothing to install to have these features. Other editors can be used as well, but you will likely need to instal a JSON schema validator.</description></item><item><title>Automated End-to-End (E2E) tests</title><link>https://www.krakend.io/docs/enterprise/developer/integration-tests/</link><pubDate>Sat, 11 Dec 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/developer/integration-tests/</guid><description>In addition to checking the syntax of your KrakenD configuration and ensuring that the gateway can start, you can run integration tests to guarantee that all the active software components from beginning to end have the expected flow and that the gateway returns what you planned.
The krakend e2e command launches the integration tests.
Creating e2e test files In essence, you must create a specs folder and place the test files inside.</description></item><item><title>Import and Export OpenAPI</title><link>https://www.krakend.io/docs/enterprise/developer/openapi/</link><pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/developer/openapi/</guid><description>The OpenAPI generators are command-line utilities embedded in the KrakenD binary, offering OpenAPI import and export capabilities. The OpenAPI generator allows you to:
Export to OpenAPI: From an existing KrakenD configuration, you can automatically generate the API documentation in OpenAPI format. Import from OpenAPI: From an existing OpenAPI spec, you can generate the initial KrakenD configuration to start working. The OpenAPI-supported version is Swagger v2 (not OAS3) in both functionalities.</description></item><item><title>Generate Postman collections</title><link>https://www.krakend.io/docs/enterprise/developer/postman/</link><pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/developer/postman/</guid><description>The Postman Swagger generator is a command line utility embedded in the KrakenD binary, offering the automatic generation of Postman collections based on the KrakenD configuration.
Generating the Postman collection The command needed to generate the Postman collection is krakend generate postman:
Command to start KrakenD&amp;nbsp; $krakend generate postman -h ╓▄█ ▄▄▌ ╓██████▄µ ▐███ ▄███╨▐███▄██H╗██████▄ ║██▌ ,▄███╨ ▄██████▄ ▓██▌█████▄ ███▀╙╙▀▀███╕ ▐███▄███▀ ▐█████▀&amp;#34;╙▀▀&amp;#34;╙▀███ ║███▄███┘ ███▀&amp;#34;&amp;#34;▀███ ████▀╙▀███H ███ ╙███ ▐██████▌ ▐███⌐ ,▄████████M║██████▄ ║██████████M███▌ ███H ███ ,███ ▐███╨▀███µ ▐███ ███▌ ,███M║███╙▀███ ███▄```▄▄` ███▌ ███H ███,,,╓▄███▀ ▐███ ╙███▄▐███ ╙█████████M║██▌ ╙███▄`▀███████╨ ███▌ ███H █████████▀ `` `&amp;#39;` Version: 2.</description></item><item><title>Generate graphs from your configuration</title><link>https://www.krakend.io/docs/enterprise/developer/config2dot/</link><pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/developer/config2dot/</guid><description>The krakend.json file whether it is a single file or the result of using the flexible configuration, it might be a complex file. A generated image of the configuration might help you understand better the running configuration.
The config2dot generator will generate internally an intermediate DOT dile that you can render into a png image with GraphViz or similar software.
The following image illustrates an example of a KrakenD configuration:</description></item><item><title>Hot reloading the configuration</title><link>https://www.krakend.io/docs/enterprise/developer/hot-reload/</link><pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/developer/hot-reload/</guid><description>When you want to restart KrakenD automatically after saving or changing files inside the configuration folder, the Docker image with the tag :watch can do this automatically for you.
It works whether you use flexible configuration or a single file (krakend.json or any other supported format).
The difference between the :watch image and :latest is that the KrakenD service wraps in a reflex watcher. When it detects that the configuration has changed, it restarts the service again, applying the changes.</description></item></channel></rss>