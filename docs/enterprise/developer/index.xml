<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>KrakenD Development Tools on KrakenD - Open source API Gateway</title><link>https://www.krakend.io/docs/enterprise/developer/</link><description>Recent content in KrakenD Development Tools on KrakenD - Open source API Gateway</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 27 May 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://www.krakend.io/docs/enterprise/developer/index.xml" rel="self" type="application/rss+xml"/><item><title>Hot Reload Feature</title><link>https://www.krakend.io/docs/enterprise/developer/hot-reload/</link><pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/developer/hot-reload/</guid><description>The Docker tag :watch is a development-phase image that allows you to restart KrakenD automatically after saving or changing files inside the configuration folder, although is not recommended for production workloads. It works whether you use flexible configuration or a single file (krakend.json or any other supported format).
The watch is a regular KrakenD binary wrapped in a reflex watcher. When it detects that any piece inside the configuration has changed, it restarts the service, applying the changes.</description></item><item><title>Import and Export OpenAPI definitions</title><link>https://www.krakend.io/docs/enterprise/developer/openapi/</link><pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/developer/openapi/</guid><description>The OpenAPI integration is a series of commands embedded in the KrakenD binary and additional metadata you can add in the configuration to enrich the documentation.
KrakenD offers OpenAPI import and export capabilities for OAS3 and Swagger v2 (--legacy mode), so you can autogenerate documentation or create a gateway configuration from one or multiple OpenAPI specs.
The openapi command supports the following functionalities:
openapi export: Creates OpenAPI documentation by reading the KrakenD configuration.</description></item><item><title>Generating API documentation</title><link>https://www.krakend.io/docs/enterprise/developer/api-docs/</link><pubDate>Wed, 29 Nov 2023 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/developer/api-docs/</guid><description>KrakenD supports exporting (and importing) OpenAPI Specification. This flexibility allows you to auto-generate documentation that you can serve from the gateway itself, or host somewhere else.
There are multiple ways of generating docs API documentation is a dragon of many heads. This page sets an example for you to understand how to do it, and open the door to start working with it. It does not mean that you have to generate the docs on the Docker image, or that you need to serve the documentation from KrakenD itself.</description></item><item><title>Postman Integration Guide for Developers</title><link>https://www.krakend.io/docs/enterprise/developer/postman/</link><pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/developer/postman/</guid><description>The Postman generator is a command line utility embedded in the KrakenD binary, offering the automatic generation of Postman collections based on the KrakenD configuration.
When you call the generate postman command, it reads the KrakenD configuration and generates a collection of endpoints as a Postman specification.
Another option you have to import your API specifications is to import an OpenAPI file into Postman. You can generate the OpenAPI specification from a KrakenD API using the OpenAPI export</description></item><item><title>Generate graphs from your configuration</title><link>https://www.krakend.io/docs/enterprise/developer/config2dot/</link><pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/developer/config2dot/</guid><description>The krakend.json file whether it is a single file or the result of using the flexible configuration, it might be a complex file. A generated image of the configuration might help you understand better the running configuration.
The config2dot generator will generate internally an intermediate DOT dile that you can render into a png image with GraphViz or similar software.
The following image illustrates an example of a KrakenD configuration:</description></item><item><title>IDE Integration Guide for Developers</title><link>https://www.krakend.io/docs/enterprise/developer/ide-integration/</link><pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/developer/ide-integration/</guid><description>Automatic validation as you type, showing documentation while hovering an attribute, explanation of errors, and autocompletion of properties, are features that you get automatically while working with KrakenD.
For users of Visual Studio Code, Android Studio, JetBrains editors (PHPStorm, PyCharm, GoLand, WebStorm, IntelliJ IDEA&amp;hellip;), Eclipse, and other IDEs that have built-in json schema validation capabilities, there is nothing to install to have these features. Other editors can be used as well, but you will likely need to instal a JSON schema validator.</description></item><item><title>End-to-End Testing for Developers</title><link>https://www.krakend.io/docs/enterprise/developer/integration-tests/</link><pubDate>Sat, 11 Dec 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/developer/integration-tests/</guid><description>In addition to checking the syntax of your KrakenD configuration and ensuring that the gateway can start, an essential step in any CI/CD strategy is including end-to-end tests to guarantee that all the active software components from beginning to end have the expected flow and that the gateway returns what you planned when working together with your upstream services.
How E2E testing works The end-to-end testing definition is quite simple. You must create a folder to hold all the test cases you want to execute (e.</description></item></channel></rss>