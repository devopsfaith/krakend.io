<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Traffic management overview on KrakenD - Open source API Gateway</title><link>https://www.krakend.io/docs/enterprise/throttling/</link><description>Recent content in Traffic management overview on KrakenD - Open source API Gateway</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 01 Jul 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://www.krakend.io/docs/enterprise/throttling/index.xml" rel="self" type="application/rss+xml"/><item><title>Understanding the Token Bucket algorithm</title><link>https://www.krakend.io/docs/enterprise/throttling/token-bucket/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/throttling/token-bucket/</guid><description>The Token Bucket algorithm helps you to allow or deny requests depending on the levels of traffic you are having. The algorithm is used to offer functionalities like the Spike Arrest and the several Rate Limiting options.
A quick analogy&amp;hellip; If you ever went to a travelling carnival, funfair, or amusement park, to get into the attractions, you probably exchanged money for tokens/tickets at the ticket booth. The tokens help the operator of the carousel, bumper cars, or chance games stand, to collect the payment faster and know who can jump in and who doesn&amp;rsquo;t.</description></item><item><title>Spike Arrest and Burst</title><link>https://www.krakend.io/docs/enterprise/throttling/spike-arrest/</link><pubDate>Fri, 28 Jan 2022 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/throttling/spike-arrest/</guid><description>The Spike Arrest policy ensures a minimum time between different requests. KrakenD will enable Spike Arrest after exhausting the burst capacity of the rate-limiting features.
Bursting control The bursting control is the policy that defines what to do when you reach the throttling capacity of the system within a second.
When users consume content with rate-limiting enabled, the capacity of the rate limit defines the bursting they can have. Bursting makes users have a relatively higher number of requests for a short time.</description></item><item><title>Control of bot traffic</title><link>https://www.krakend.io/docs/enterprise/throttling/botdetector/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/throttling/botdetector/</guid><description>The bot detector module checks incoming connections to the gateway to determine if a bot made them, helping you detect and reject bots carrying out scraping, content theft, and form spam.
Bots are detected by inspecting the User-Agent and comparing its value with a set of configuration rules provided by you. The bot detector module does not set any initial rules, meaning that is up to you to decide the best rules for your use case, and choose how restrictive or permissive you are with bots.</description></item><item><title>Timeouts</title><link>https://www.krakend.io/docs/enterprise/throttling/timeouts/</link><pubDate>Thu, 04 Jan 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/throttling/timeouts/</guid><description>Being KrakenD an API Gateway that talks to other services, being able to control the waiting times for different aspects is crucial. KrakenD will allow you to fine-tune these settings.
The timeouts can apply to:
The duration of the whole pipe (from user request to user response) The HTTP request related timeouts Additionally, you can control the number of maximum IDLE connections.
Global timeout The timeout key in the krakend.</description></item><item><title>Stateless rate-limiting on clusters</title><link>https://www.krakend.io/docs/enterprise/throttling/cluster/</link><pubDate>Fri, 28 Jan 2022 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/throttling/cluster/</guid><description>The stateless rate-limiting is the recommended approach for almost all scenarios. As the API Gateway does not have any centralization, the limits apply individually to each running instance of KrakenD.
Global rate limit If you prefer not to use a stateless rate limit, the KrakenD Enterprise edition has a stateful Redis-backed rate limit where counters are shared amongst all nodes. Working in a cluster implies applying the limits taking into account the deployment size.</description></item><item><title>Global rate limit (stateful)</title><link>https://www.krakend.io/docs/enterprise/throttling/global-rate-limit/</link><pubDate>Tue, 03 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/throttling/global-rate-limit/</guid><description>The global rate limit functionality enables a Redis database store to centralize all KrakenD node counters. Instead of having each KrakenD node count its hits, the counters are global and stored in the database.
Default rate limit (stateless) vs. Global rate limit (stateful) It&amp;rsquo;s essential to understand the differences between these two antagonistic approaches, so let&amp;rsquo;s put an example.
Let&amp;rsquo;s say you have four different KrakenD nodes running in a cluster, and you want to limit a specific set of users to 100 requests per second.</description></item><item><title>IP Filtering</title><link>https://www.krakend.io/docs/enterprise/throttling/ipfilter/</link><pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/enterprise/throttling/ipfilter/</guid><description>The IP filtering plugin allows you to restrict the traffic to your API gateway based on the IP address. It works in two different modes (allow or deny) where you define the list of IPs (CIDR blocks) that are authorized to use the API, or that are denied from using the API.
The filtering applies globally to all endpoints, or to only specific endpoints depending on the placement of the configuration.</description></item></channel></rss>