<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AI Gateway - API Gateway for LLMs on KrakenD - Open source API Gateway</title><link>https://www.krakend.io/docs/v2.11/ai-gateway/</link><description>Recent content in AI Gateway - API Gateway for LLMs on KrakenD - Open source API Gateway</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 17 Sep 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://www.krakend.io/docs/v2.11/ai-gateway/index.xml" rel="self" type="application/rss+xml"/><item><title>AI Security</title><link>https://www.krakend.io/docs/v2.11/ai-gateway/security/</link><pubDate>Wed, 21 May 2025 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v2.11/ai-gateway/security/</guid><description>Protecting sensitive AI data and controlling access is essential for trustworthy AI workloads. KrakenD&amp;rsquo;s AI Gateway integrates multiple layers of security at the edge to enforce zero-trust AI operations. From isolated authorization flows to data masking and exfiltration prevention, you can safeguard data traveling between clients and LLM providers without altering your existing API infrastructure.
The following key features are explained in this document:
Isolated Authentication (JWT + API key separation) API Key Injection (backend-only exposure) Data Masking (request &amp;amp; response layers) Exfiltration Prevention Patterns Isolated Authentication KrakenD separates the authentication flows between consumers and LLM on your AI endpoints.</description></item><item><title>AI Security</title><link>https://www.krakend.io/docs/v2.11/ai-gateway/rag/</link><pubDate>Wed, 21 May 2025 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v2.11/ai-gateway/rag/</guid><description>RAG Pipelines (DRAFT) You can use KrakenD as a secure, lightweight proxy layer in a RAG (Retrieval-Augmented Generation) pipeline, and even enforce exfiltration prevention and data sanitization on the fly.
As per today, the usage of RAG requires you to make manual use of the sequential proxy and implement the flow in the configuration.
A typical RAG pipeline looks like this:
User prompt API Gateway (KrakenD) Retriever (e.g., vector DB) Enricher / Processor (e.</description></item><item><title>AI usage monitoring</title><link>https://www.krakend.io/docs/v2.11/ai-gateway/usage-monitoring/</link><pubDate>Wed, 17 Sep 2025 00:00:00 +0000</pubDate><guid>https://www.krakend.io/docs/v2.11/ai-gateway/usage-monitoring/</guid><description>Monitoring AI backends in KrakenD does not require special treatment. AI services are integrated and handled just like any other backend in your API Gateway. Your existing monitoring tools and practices, such as OpenTelemetry, remain fully applicable.
AI backends, regardless of their complexity, respond to API calls just like any other backend service. KrakenD treats AI integrations as regular backends. This simplifies observability and operational consistency by applying proven monitoring frameworks without specialized or separate tooling.</description></item></channel></rss>