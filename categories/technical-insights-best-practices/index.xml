<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Technical Insights &amp; Best practices on KrakenD - Open source API Gateway</title><link>https://www.krakend.io/categories/technical-insights-best-practices/</link><description>Recent content in Technical Insights &amp; Best practices on KrakenD - Open source API Gateway</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 10 Sep 2023 13:25:33 +0200</lastBuildDate><atom:link href="https://www.krakend.io/categories/technical-insights-best-practices/index.xml" rel="self" type="application/rss+xml"/><item><title>Securing Sensitive Data with KrakenD API Data Masking</title><link>https://www.krakend.io/blog/api-data-masking/</link><pubDate>Sun, 10 Sep 2023 13:25:33 +0200</pubDate><guid>https://www.krakend.io/blog/api-data-masking/</guid><description>Securing sensitive data is a non-negotiable requirement for organizations. API data masking is a robust security measure that can help you achieve this. This article dives into the mechanics of API data masking and how KrakenD&amp;rsquo;s features like regex content replacer and response body generator can make this process more efficient and compliant.
Understanding API Data Masking API data masking is a technique that replaces original data with random or pseudonymous data.</description></item><item><title>The Importance of an API Gateway in Modern Services Architecture</title><link>https://www.krakend.io/blog/importance-of-api-gateway-modern-services-architecture/</link><pubDate>Sun, 23 Jul 2023 13:25:33 +0200</pubDate><guid>https://www.krakend.io/blog/importance-of-api-gateway-modern-services-architecture/</guid><description>How KrakenD Steers the Fleet As we traverse the evolving landscape of modern services architecture, the significance of an API Gateway cannot be overstated. At KrakenD, we are not just participating in this evolution but leading it. We have channeled our expertise into developing an API Gateway solution that is efficient, scalable, and perfectly tuned to meet the specific needs of the digital age.
What is an API Gateway? Think of an API Gateway as the touchpoint that connects your clients to your backend services.</description></item><item><title>REST vs gRPC vs GraphQL in KrakenD: A Comprehensive Comparison</title><link>https://www.krakend.io/blog/rest-grpc-graphql-krakend-comparison/</link><pubDate>Wed, 05 Jul 2023 13:25:33 +0200</pubDate><guid>https://www.krakend.io/blog/rest-grpc-graphql-krakend-comparison/</guid><description>Understanding the landscape of APIs and making the right choice can seem daunting, especially with a myriad of available technologies. This is where KrakenD, your trusted partner in API management, steps in. We offer an in-depth comparison of three leading technologies: REST, gRPC, and GraphQL, examining their strengths, drawbacks, and how they integrate with KrakenD.
REST: The Reliable Partner Enhanced by KrakenD REST (Representational State Transfer) is a time-tested, reliable technology in the API world.</description></item><item><title>Modernizing your legacy SOAP services with KrakenD</title><link>https://www.krakend.io/blog/modernizing-soap-services/</link><pubDate>Tue, 27 Jun 2023 00:00:00 +0000</pubDate><guid>https://www.krakend.io/blog/modernizing-soap-services/</guid><description>We are thrilled to introduce one of our latest features: SOAP integration. This powerful integration is designed to help businesses modernize their legacy SOAP systems without the need for extensive modifications.
Understanding SOAP and Its Limitations SOAP (Simple Object Access Protocol) is a protocol specification for exchanging structured information in web services using XML. It operates over HTTP for simplicity and compatibility, but also supports other protocols such as SMTP. SOAP&amp;rsquo;s primary application is in large-scale enterprise environments with high security and transactional requirements.</description></item><item><title>Step-by-step Migration Guide: From AWS API Gateway to KrakenD API Gateway</title><link>https://www.krakend.io/blog/migrate-aws-api-gateway-to-krakend/</link><pubDate>Fri, 23 Jun 2023 13:25:33 +0200</pubDate><guid>https://www.krakend.io/blog/migrate-aws-api-gateway-to-krakend/</guid><description>Introduction As you consider migrating from AWS API Gateway to KrakenD API Gateway, you&amp;rsquo;re likely driven by a number of compelling benefits such as a better pricing model, reduced vendor lock-in, operational simplicity, enhanced content manipulation and transformation capabilities, increased connectivity protocols, and extensibility trough Custom golang Plugins or Lua scripts. This guide will walk you through the primary steps and considerations in this migration process.
Pre-Migration Before starting the migration process, it&amp;rsquo;s essential to make sure to map your existing API Gateway resources to equivalent KrakenD concepts, which include endpoints, routers, and backends.</description></item><item><title>Understanding API Calls: The KrakenD Approach</title><link>https://www.krakend.io/blog/api-calls/</link><pubDate>Mon, 05 Jun 2023 13:25:33 +0200</pubDate><guid>https://www.krakend.io/blog/api-calls/</guid><description>KrakenD, a market leader in high-performance API Gateway solutions, enables seamless and efficient API interactions within today&amp;rsquo;s complex digital landscape. This comprehensive guide delves into the intricate details of API calls and their pivotal role within the microservices architecture, specifically in a KrakenD environment.
Understanding API Calls: The Essence of Software Interactions APIs, or Application Programming Interfaces, form the core of sophisticated software interactions, providing the pathways for communication between different software modules.</description></item><item><title>Optimize you API Gateway Management with Flexible Configuration</title><link>https://www.krakend.io/blog/unleash-power-flexible-configuration/</link><pubDate>Sun, 14 May 2023 00:00:00 +0000</pubDate><guid>https://www.krakend.io/blog/unleash-power-flexible-configuration/</guid><description>Flexible Configuration is a template-based configuration system for KrakenD API Gateway that allows you to manage configurations efficiently and cater to multiple environments. In this blog post, we&amp;rsquo;ll explore the pain-points it addresses and the benefits it brings to customers.
Challenges solved by Flexible Configuration Organizing and managing configurations can be challenging, especially when:
Configurations are extensive and need to be split into multiple files You need to inject environment-specific variables Reusable code blocks and placeholders are necessary to avoid repetition Multiple developers are working on the API gateway KrakenD is managed using multiple repositories Tracking changes, avoiding conflicts, and reviewing code is crucial Flexible Configuration is designed to tackle these pain-points effectively.</description></item><item><title>Understanding the Benefits of an Stateless API Gateway</title><link>https://www.krakend.io/blog/benefits-of-stateless-api-gateway/</link><pubDate>Wed, 10 May 2023 00:00:00 +0000</pubDate><guid>https://www.krakend.io/blog/benefits-of-stateless-api-gateway/</guid><description>API Gateways play a crucial role in modern software architecture, enabling developers to manage and route traffic between client applications and backend services. KrakenD stands out due to its stateless design, which provides several significant advantages over other solutions.
What is a Stateless API Gateway? A stateless API Gateway is an APII Gateway that doesn&amp;rsquo;t depend on a centralized database for storing configurations or maintaining a shared &amp;ldquo;state.&amp;rdquo; Instead, each instance of the API Gateway possesses its own configuration file, read when the service initiates.</description></item><item><title>Traffic mirroring: test APIs without tests</title><link>https://www.krakend.io/blog/krakend-shadow-testing/</link><pubDate>Tue, 27 Jul 2021 00:00:00 +0000</pubDate><guid>https://www.krakend.io/blog/krakend-shadow-testing/</guid><description>Integration and load testing are in the list of best practices in our sector, but synthesizing good inputs for such tests and analyzing the results are usually two hard things to achieve. This post will show you how we suggest our customers set up a shadow testing system with minimal impact on the production environment and proper harness.
Quick overview As pointed out at https://cloud.google.com/architecture/application-deployment-and-testing-strategies
Testing new backend features by using the production load.</description></item><item><title>How we built our telemetry service</title><link>https://www.krakend.io/blog/building-a-telemetry-service/</link><pubDate>Mon, 15 Mar 2021 09:40:25 +0200</pubDate><guid>https://www.krakend.io/blog/building-a-telemetry-service/</guid><description>â€‹ We have run our telemetry system live for the past three years now. In this article, we&amp;rsquo;ll share code and outline some of the things you&amp;rsquo;ll need to keep in mind if you want to build an anonymous usage reporting system for an open-source project as we did (at a ridiculous cost).
We will show you how to use our reporting client and the details of our actual reporting servers in case you are thinking in implementing a cost-efficient solution with high scalability.</description></item><item><title>Doing housekeeping on your configuration file</title><link>https://www.krakend.io/blog/housekeeping-configuration-file/</link><pubDate>Fri, 17 May 2019 00:00:00 +0000</pubDate><guid>https://www.krakend.io/blog/housekeeping-configuration-file/</guid><description>Starting your krakend.json configuration from scratch and writing every attribute in a blank editor might be a difficult and time consuming task, and that&amp;rsquo;s why we have the KrakenDesigner.
KrakenDesigner is an aid tool to generate KrakenD configurations for the uninitiated audience. It produces a verbose output of the configuration file and explicitly writes unneeded attributes to let you see that a specific configuration option exists. These attributes I am mentioning are not necessary because they contain default values and the server is not going to alter its behavior.</description></item><item><title>How we run KrakenD on Javascript with WebAssembly</title><link>https://www.krakend.io/blog/krakend-wasm/</link><pubDate>Sun, 09 Dec 2018 00:00:00 +0000</pubDate><guid>https://www.krakend.io/blog/krakend-wasm/</guid><description>KrakenD is an API Gateway written in Go that uses a single configuration file to define its whole behavior. As the configuration file might be complicated, the KrakenDesigner is a javascript-based user interface to edit this file, and we were missing the capability of reproducing directly on javascript the existing gateway pipes so that users could run manual tests over the editing configuration.
In this post, we are going to explain how we included KrakenD framework components in a .</description></item><item><title>Website development as a sysadmin</title><link>https://www.krakend.io/blog/website-development-as-a-sysadmin/</link><pubDate>Thu, 10 May 2018 16:18:25 +0200</pubDate><guid>https://www.krakend.io/blog/website-development-as-a-sysadmin/</guid><description>As a systems administrator for the past 15 years, I&amp;rsquo;m not very used to web development as this kind of work has been usually done by other colleagues in every company I&amp;rsquo;ve worked for. I wanted to create a web application myself using an external API, as an exercise to go out my comfort zone.
Some time ago I found that Marvel Comics has a REST API where you can get a lot of information about comics, characters, authors and other interesting information.</description></item><item><title>How to work with Golang plugins and KrakenD</title><link>https://www.krakend.io/blog/krakend-golang-plugins/</link><pubDate>Thu, 12 Apr 2018 22:07:03 +0200</pubDate><guid>https://www.krakend.io/blog/krakend-golang-plugins/</guid><description>The release of golang 1.8 more than a year ago opened the door to loading dynamic linked components in run time, and we were keen to find out if we could include this great feature in our KrakenD toolbox.
We&amp;rsquo;d like to share our experience and details on how we enhanced our products to support golang plugins.
Why would anyone use plugins in Go? The plugin concept is widely known and supported in several programming languages and environments.</description></item><item><title>Deploying and versioning an API Gateway</title><link>https://www.krakend.io/blog/deploying-an-api-gateway/</link><pubDate>Fri, 06 Apr 2018 23:46:25 +0200</pubDate><guid>https://www.krakend.io/blog/deploying-an-api-gateway/</guid><description>When it comes to maintaining and deploying an API Gateway within an organization, you should always be aware of best practice. A gateway is an extra step between the client and the servers with the power to define a whole new interface, yet it&amp;rsquo;s so flexible and easy to implement that you might be tempted to start creating API interfaces without thinking about it - and end up creating problems for the future.</description></item><item><title>An API Gateway is not the new Unicorn</title><link>https://www.krakend.io/blog/what-is-an-api-gateway/</link><pubDate>Fri, 19 Jan 2018 10:10:53 +0200</pubDate><guid>https://www.krakend.io/blog/what-is-an-api-gateway/</guid><description>The more we talk to people about API gateways, the more we have come to realize that the term means different things to different people, and more specifically we see a growing trend where developers (but mostly managers) expect an API gateway to be able to perform miracles, usually a long way away from its intended use.
It&amp;rsquo;s as if the API Gateway is the new unicorn that will solve all problems and make everything wonderful in the microservices scene.</description></item><item><title>Automating our RPM/DEB packaging with Docker</title><link>https://www.krakend.io/blog/automating-linux-packaging/</link><pubDate>Mon, 06 Nov 2017 12:43:33 +0200</pubDate><guid>https://www.krakend.io/blog/automating-linux-packaging/</guid><description>Everyone loves reaching the maximum number of available platforms for their software but this usually comes at a cost. In this article we will explain how we generated our packaging for Linux in an automated fashion, being faithful to our DevOps dogma.
Dockerize all the things! Our dev team uses both Linux and MacOS X in desktop machines and KrakenD has been running and behaving in the same way in all the platforms because from day one we decided to run everything on Docker.</description></item></channel></rss>