<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>KrakenD - Open source API Gateway</title>
    <link>https://www.krakend.io/</link>
    <description>Recent content on KrakenD - Open source API Gateway</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.krakend.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction to KrakenD</title>
      <link>https://www.krakend.io/docs/overview/introduction/</link>
      <pubDate>Tue, 25 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/overview/introduction/</guid>
      <description>KrakenD is a high-performance open source API Gateway.
Its core functionality is to create an API that acts as an aggregator of many microservices into single endpoints, doing the heavy-lifting automatically for you: aggregate, transform, filter, decode, throttle, auth and more.
KrakenD needs no programming as it offers a declarative way to create the endpoints. It is well structured and layered and open to extending its functionality using plug-and-play middleware developed by the community or in-house.</description>
    </item>
    
    <item>
      <title>Extending KrakenD, the big picture.</title>
      <link>https://www.krakend.io/docs/extending/the-big-picture/</link>
      <pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/extending/the-big-picture/</guid>
      <description>Before starting to dive into the KrakenD framework code, spend a few minutes understanding the big pieces of the system, how it works, and the philosophy behind it.
The KrakenD rules Let&amp;rsquo;s start with the rules followed to code KrakenD, as they answer to architectural design questions:
 Reactive is key Reactive is key (yes, it is very very important) Failing fast is better than succeeding slow (say it one more time!</description>
    </item>
    
    <item>
      <title>Backends Overview</title>
      <link>https://www.krakend.io/docs/backends/overview/</link>
      <pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/backends/overview/</guid>
      <description>The concept of backend refers to the origin servers providing the necessary data to populate your endpoints. A backend can be something like your HTTP-based API, a Lambda function, or a Kafka queue, to name a few examples.
A backend can be any server inside or outside your network, as long it is reachable by KrakenD. For instance, you can create endpoints fetching data from your internal servers and enrich them by adding third-party data from an external API like Github, Facebook, or any other service, and return back everything aggregated in a single glorified response.</description>
    </item>
    
    <item>
      <title>Service Discovery overview</title>
      <link>https://www.krakend.io/docs/service-discovery/overview/</link>
      <pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/service-discovery/overview/</guid>
      <description>Service discovery enables clients to detect and locate services on your enterprise network automatically. Instead of defining a static list of IPs or hostnames pointing to your backends, you can use a service discovery provider and let KrakenD interact with it to get the hosts dynamically.
Static resolution The static resolution is the default service discovery choice. It uses a list of hosts declared in the configuration file and KrakenD must be able to reach them directly by hostname, DNS or IP.</description>
    </item>
    
    <item>
      <title>KrakenD&#39;s configuration file(s)</title>
      <link>https://www.krakend.io/docs/configuration/overview/</link>
      <pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/configuration/overview/</guid>
      <description>All the configuration that the KrakenD server needs to start and operate is a single configuration file. This file is referred to as krakend.json through all the documentation.
The name krakend.json is just an alias, a convention, that we use everywhere. Your real configuration file can have any name, be stored anywhere, or split in many pieces.
Provided this simple configuration mechanism, the versioning and automation are very convenient. Any change in the API Gateway is always under the version control system, and the code controls the state of the gateway.</description>
    </item>
    
    <item>
      <title>How to create KrakenD endpoints</title>
      <link>https://www.krakend.io/docs/endpoints/creating-endpoints/</link>
      <pubDate>Wed, 26 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/endpoints/creating-endpoints/</guid>
      <description>KrakenD endpoints are the essential part of KrakenD as they are what your end users consume.
See Understanding the configuration file if you haven&amp;rsquo;t read it yet.
To create an endpoint you only need to add an endpoint object under the endpoints list with the resource you want to expose. If no method is declared, it&amp;rsquo;s assumed to be read-only (GET).
The endpoints section looks like this:
&amp;quot;endpoints&amp;quot;: [ { &amp;quot;endpoint&amp;quot;: &amp;quot;/v1/foo&amp;quot;, &amp;quot;method&amp;quot;: &amp;quot;GET&amp;quot;, &amp;quot;backend&amp;quot;: [ { &amp;quot;url_pattern&amp;quot;: &amp;quot;/bar&amp;quot;, &amp;quot;method&amp;quot;: &amp;quot;GET&amp;quot;, &amp;quot;host&amp;quot;: [ &amp;quot;https://api.</description>
    </item>
    
    <item>
      <title>Throttling overview</title>
      <link>https://www.krakend.io/docs/throttling/overview/</link>
      <pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/throttling/overview/</guid>
      <description>KrakenD offers several ways to protect the usage of your infrastructure that might act at very different levels.
The most significant type of throttling is the rate limit that allows you to restrict the traffic of end-users or the traffic of KrakenD against your backend services. The rate limits mainly cover the following purposes:
 Avoid stressing or flooding your backend services with massive requests (proxy rate limit) Establish a quota of usage for your exposed API (router rate limit) Create a simple QoS strategy for your API  The rate limits are complementary to the Circuit Breaker feature.</description>
    </item>
    
    <item>
      <title>High-availability cluster</title>
      <link>https://www.krakend.io/docs/cluster/cluster-overview/</link>
      <pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/cluster/cluster-overview/</guid>
      <description>A KrakenD cluster consists of multiple KrakenD instances running simultaneously and working together to provide increased reliability, higher throughput, scalability, and fail-over.
A KrakenD cluster runs with the same KrakenD open source software you use today to start a single instance. Consequently no license is needed to operate a sizeable enterprise-grade API gateway.
KrakenD cluster benefits Having a KrakenD cluster provides these immediate benefits:
 Increased throughput and capacity: Having more KrakenD nodes expands the number of requests the API can handle.</description>
    </item>
    
    <item>
      <title>Benchmarks Overview</title>
      <link>https://www.krakend.io/docs/benchmarks/overview/</link>
      <pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/benchmarks/overview/</guid>
      <description>KrakenD, the ultra performer API Gateway An API Gateway is a component that needs to deliver really fast, as it is an added layer in the infrastructure. KrakenD was built with performance in mind. In this page and inner pages, you&amp;rsquo;ll find several tests we did to measure the performance. We also invite you to do them for yourself!
TL;DR: Benchmark results ~18,000 requests/second on an ordinary laptop.
The following table summarizes different performance tests using Amazon EC2 virtual instances and an example with a laptop.</description>
    </item>
    
    <item>
      <title>Running KrakenD server. The `krakend run` command</title>
      <link>https://www.krakend.io/docs/commands/run/</link>
      <pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/commands/run/</guid>
      <description>To start KrakenD, you need to invoke the run command with the path to the configuration file. You can also specify the port (defaults to 8080)
Command to start KrakenD&amp;nbsp;   krakend&amp;nbsp;run&amp;nbsp;-c&amp;nbsp;krakend.json&amp;nbsp; #&amp;nbsp;or&amp;nbsp; krakend&amp;nbsp;run&amp;nbsp;--config&amp;nbsp;/path/to/krakend.json&amp;nbsp; #&amp;nbsp;or&amp;nbsp; krakend&amp;nbsp;run&amp;nbsp;--config&amp;nbsp;/path/to/krakend.json&amp;nbsp;-p&amp;nbsp;8080&amp;nbsp;    The krakend run command with no flags will remind you that you need the path to the configuration file:
Missing configuration file&amp;nbsp;   krakend&amp;nbsp;run&amp;nbsp; Please,&amp;nbsp;provide&amp;nbsp;the&amp;nbsp;path&amp;nbsp;to&amp;nbsp;your&amp;nbsp;config&amp;nbsp;file&amp;nbsp;    Show the help: Run command help&amp;nbsp;   krakend&amp;nbsp;run&amp;nbsp;-h&amp;nbsp; &amp;nbsp; `7MMF&#39;&amp;nbsp;`YMM&#39;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`7MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`7MM&#34;</description>
    </item>
    
    <item>
      <title>Control of bot traffic</title>
      <link>https://www.krakend.io/docs/throttling/botdetector/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/throttling/botdetector/</guid>
      <description>The bot detector module checks incoming connections to the gateway to determine if a bot made them, helping you detect and reject bots carrying out scraping, content theft, and form spam.
Bots are detected by inspecting the User-Agent and comparing its value with a set of configuration rules provided by you. The bot detector module does not set any initial rules, meaning that is up to you to decide the best rules for your use case, and choose how restrictive or permissive you are with bots.</description>
    </item>
    
    <item>
      <title>Enabling TLS for HTTPS and HTTP/2</title>
      <link>https://www.krakend.io/docs/service-settings/tls/</link>
      <pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/service-settings/tls/</guid>
      <description>There are two different strategies when using TLS over KrakenD:
 Use TLS for HTTPS and HTTP/2 in KrakenD Use a balancer with TLS termination in front of KrakenD (e.g., ELB, HAproxy)  In case you want to enable TLS in KrakenD you need to add a tls key at service level (configuration&amp;rsquo;s file root) with at least the public key and the private key. When you add TLS, KrakenD listens only using TLS, and no traffic to plain HTTP is accepted.</description>
    </item>
    
    <item>
      <title>SD with DNS SRV (e.g., Consul, k8s)</title>
      <link>https://www.krakend.io/docs/service-discovery/dns-srv/</link>
      <pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/service-discovery/dns-srv/</guid>
      <description>The DNS SRV is a market standard used by systems such as Kubernetes, Mesos, Haproxy, Nginx plus, AWS ECS, Linkerd, and more.
To integrate Consul as the Service Discovery or any other DNS SRV compatible systems you only need to set two keys:
 &amp;quot;sd&amp;quot;: &amp;quot;dns&amp;quot;: To set service discovery = DNS SRV &amp;quot;host&amp;quot;: []: The list of all the names providing the resolution  These keys need to be added in the backend section of your configuration.</description>
    </item>
    
    <item>
      <title>Writing custom plugins</title>
      <link>https://www.krakend.io/docs/extending/writing-plugins/</link>
      <pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/extending/writing-plugins/</guid>
      <description>KrakenD&amp;rsquo;s modular design allows you to extend its functionality by adding your custom code. As an engineer, it&amp;rsquo;s always tempting to start writing code but the majority of scenarios do not require writing any. Existing modules, middleware, and plugins suffice almost everyone&amp;rsquo;s needs.
It&amp;rsquo;s important to remark, that if you want to do complex business logic checks and transformations, aside from the core functionality, there is specific scripting designed for that without compiling Go code.</description>
    </item>
    
    <item>
      <title>Extended metrics and the `/__stats` endpoint</title>
      <link>https://www.krakend.io/docs/extended-metrics/metrics/</link>
      <pubDate>Mon, 05 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/extended-metrics/metrics/</guid>
      <description>The metrics middleware collects extended metrics and exposes them in the /__stats/ endpoint. The endpoint runs in a different port than the API, and contains a lot of metrics.
Through the extended metrics you can create new tools or integrate with existing ones. For instance, combining the metrics with the InfluxDB extended metrics you can have a Grafana dashboard.
The structure of the metrics looks like this (truncated):
Sample of /__stats endpoint&amp;nbsp;   curl&amp;nbsp;http://localhost:8090/__stats&amp;nbsp; {&amp;nbsp; &amp;nbsp;&amp;nbsp;&#34;</description>
    </item>
    
    <item>
      <title>JSON Web Tokens overview</title>
      <link>https://www.krakend.io/docs/authorization/jwt-overview/</link>
      <pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/authorization/jwt-overview/</guid>
      <description>The JSON Web Token specification is an industry standard to represent claims securely between two parties. The JWT is an encoded JSON object that contains key-value pairs of attributes that are signed by a trusted authority.
When JWT shields a specific set of endpoints, requests to the API gateway must provide a token. Verification of the token takes place in every request, including the check of the signature and optionally the assurance that its issuer, roles, and audience are sufficient to access the endpoint.</description>
    </item>
    
    <item>
      <title>Logging - Syslog, stdout and GELF</title>
      <link>https://www.krakend.io/docs/logging/extended-logging/</link>
      <pubDate>Tue, 30 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/logging/extended-logging/</guid>
      <description>By default, when KrakenD starts all the log events are sent to the standard output using the basic logger capabilities of the KrakenD framework. The reporting level, in that case, is DEBUG and adds no prefix to the log lines.
Extending the logging capabilities Different logging components allow you to extend the logging functionality, such as sending the events to the syslog, choosing the verbosity level, or use the Graylog Extended Log Format (GELF).</description>
    </item>
    
    <item>
      <title>Rate-limiting backends</title>
      <link>https://www.krakend.io/docs/backends/rate-limit/</link>
      <pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/backends/rate-limit/</guid>
      <description>No matter what is the amount of activity the users are generating at the router level, you might want to restrict the connections KrakenD makes to your backends. Configuration is similar to the router&amp;rsquo;s one, but it&amp;rsquo;s declared directly in the backend section instead of the endpoint.
This parameter is defined at the krakend.json configuration file as follows:
... { &amp;quot;endpoint&amp;quot;: &amp;quot;/products/{cat_id}&amp;quot;, &amp;quot;backend&amp;quot;: [ { &amp;quot;host&amp;quot;: [ &amp;quot;http://some.api.com/&amp;quot; ], &amp;quot;url_pattern&amp;quot;: &amp;quot;/catalog/category/{cat_id}.</description>
    </item>
    
    <item>
      <title>Understanding the configuration file</title>
      <link>https://www.krakend.io/docs/configuration/structure/</link>
      <pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/configuration/structure/</guid>
      <description>All KrakenD behavior depends on the krakend.json file (other formats supported), so being familiar with the structure of the configuration file it&amp;rsquo;s essential.
Configuration file structure There are a large number of options you can put in this file, let&amp;rsquo;s focus now only on the structure:
{ &amp;quot;version&amp;quot;: 2, &amp;quot;endpoints&amp;quot;: [...] &amp;quot;extra_config&amp;quot;: {...} ... }   version: The KrakenD file format. Current version is 2, use 1 only for old KrakenD releases (0.</description>
    </item>
    
    <item>
      <title>Deployment best practices</title>
      <link>https://www.krakend.io/docs/deploying/best-practices/</link>
      <pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/deploying/best-practices/</guid>
      <description>Setting up a cluster of KrakenD instances is a straightforward process, but here are some not so obvious recommendations to get a good start.
Use blue/green or similar deployment strategy As it happens with Apache, Nginx, Mysql, and the vast majority of services, changing the configuration requires a restart. When deploying new changes, use a technique like blue/green deployment or similar.
This scenario can be automated and is available in all major cloud providers.</description>
    </item>
    
    <item>
      <title>Developer Tools</title>
      <link>https://www.krakend.io/docs/developer/overview/</link>
      <pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/developer/overview/</guid>
      <description>There are some resources that make your life easier when developing with KrakenD. These tools are meant to be used only in development and never in production
Hot reload the configuration A Docker image using Reflex watches the configuration directory and reloads KrakenD when the configuration changes. This is very convenient while you are developing as it allows you to test new changes without having to restart manually and making the process less tedious.</description>
    </item>
    
    <item>
      <title>Setting up a cluster</title>
      <link>https://www.krakend.io/docs/cluster/configuration/</link>
      <pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/cluster/configuration/</guid>
      <description>Hardware can fail at any time, and a Gateway is a piece critical enough to have redundancy of the service. Having a cluster of machines operating the service assures high availability.
KrakenD nodes are stateless and they don&amp;rsquo;t store data or application state to a persistent storage. Instead, any configuration data and application state exist within the configuration file. Nodes are expendable and replaceable at any time, as they do not hold anything.</description>
    </item>
    
    <item>
      <title>Commands - check</title>
      <link>https://www.krakend.io/docs/commands/check/</link>
      <pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/commands/check/</guid>
      <description>The krakend check command validates the passed configuration. Since KrakenD does not implement a strict parsing, typos in the config file could be shadowed. In order to validate your config completely, it is recommended to use the --debug flag.
Usage of KrakenD check&amp;nbsp;   ./krakend&amp;nbsp;check&amp;nbsp;-h&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; `7MMF&#39;&amp;nbsp;`YMM&#39;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`7MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`7MM&#34;&#34;&#34;Yb.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;.M&#39;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`Yb.&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;MM&amp;nbsp;.d&#34;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`7Mb,od8&amp;nbsp;,6&#34;Yb.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;,MP&#39;.gP&#34;Ya&amp;nbsp;`7MMpMMMb.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`Mb&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;MMMMM.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&#39;&amp;nbsp;&#34;&#39;8)&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;;Y&amp;nbsp;&amp;nbsp;,M&#39;&amp;nbsp;&amp;nbsp;&amp;nbsp;Yb&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;VMA&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,pm9MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM;Mm&amp;nbsp;&amp;nbsp;8M&#34;&#34;&#34;&#34;&#34;&#34;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,MP&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;`MM.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;8M&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;`Mb.YM.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,dP&#39;&amp;nbsp;&amp;nbsp; .JMML.&amp;nbsp;&amp;nbsp;&amp;nbsp;MMb..JMML.&amp;nbsp;&amp;nbsp;`Moo9^Yo..JMML.&amp;nbsp;YA.`Mbmmd&#39;.JMML&amp;nbsp;&amp;nbsp;JMML..JMMmmmdP&#39;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; _______________________________________________________________________&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Version:&amp;nbsp;1.3.0&amp;nbsp; &amp;nbsp; Validates&amp;nbsp;that&amp;nbsp;the&amp;nbsp;active&amp;nbsp;configuration&amp;nbsp;file&amp;nbsp;has&amp;nbsp;a&amp;nbsp;valid&amp;nbsp;syntax&amp;nbsp;to&amp;nbsp;run&amp;nbsp;the&amp;nbsp;service.&amp;nbsp; Change&amp;nbsp;the&amp;nbsp;configuration&amp;nbsp;file&amp;nbsp;by&amp;nbsp;using&amp;nbsp;the&amp;nbsp;--config&amp;nbsp;flag&amp;nbsp; &amp;nbsp; Usage:&amp;nbsp; &amp;nbsp;&amp;nbsp;krakend&amp;nbsp;check&amp;nbsp;[flags]&amp;nbsp; &amp;nbsp; Aliases:&amp;nbsp; &amp;nbsp;&amp;nbsp;check,&amp;nbsp;validate&amp;nbsp; &amp;nbsp; Examples:&amp;nbsp; krakend&amp;nbsp;check&amp;nbsp;-d&amp;nbsp;-c&amp;nbsp;config.json&amp;nbsp; &amp;nbsp; Flags:&amp;nbsp; &amp;nbsp;&amp;nbsp;-h,&amp;nbsp;--help&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;help&amp;nbsp;for&amp;nbsp;check&amp;nbsp; &amp;nbsp;&amp;nbsp;-t,&amp;nbsp;--test-gin-routes&amp;nbsp;&amp;nbsp;&amp;nbsp;Test&amp;nbsp;the&amp;nbsp;endpoint&amp;nbsp;patterns&amp;nbsp;against&amp;nbsp;a&amp;nbsp;real&amp;nbsp;gin&amp;nbsp;router&amp;nbsp;on&amp;nbsp;selected&amp;nbsp;port&amp;nbsp; &amp;nbsp; Global&amp;nbsp;Flags:&amp;nbsp; &amp;nbsp;&amp;nbsp;-c,&amp;nbsp;--config&amp;nbsp;string&amp;nbsp;&amp;nbsp;&amp;nbsp;Path&amp;nbsp;to&amp;nbsp;the&amp;nbsp;configuration&amp;nbsp;filename&amp;nbsp; &amp;nbsp;&amp;nbsp;-d,&amp;nbsp;--debug&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Enable&amp;nbsp;the&amp;nbsp;debug&amp;nbsp;    Passing a path to the config file is required</description>
    </item>
    
    <item>
      <title>Comparison of KrakenD vs other products in the market (Benchmark)</title>
      <link>https://www.krakend.io/docs/benchmarks/api-gateway-benchmark/</link>
      <pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/benchmarks/api-gateway-benchmark/</guid>
      <description>We wanted to compare our own product with other similar products in the market. In order to do so we used the same environment and conditions and tested the following products:
 Kong Vulcand Tyk KrakenD  For the benchmarks, we based the tests on the benchmarking project varnish/api-gateway-benchmarks.
At the time of writing, KrakenD does not support auth features, so we just did the benchmark with test01
Hardware Model MacBook Pro (MacBookPro11,4) - August 2015 Processor: Intel Core i7 2,2 GHz  Setup For this test, we stored this configuration at krakend.</description>
    </item>
    
    <item>
      <title>KrakenD Benchmarks on AWS</title>
      <link>https://www.krakend.io/docs/benchmarks/aws/</link>
      <pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/benchmarks/aws/</guid>
      <description>The following numbers show the execution results for the KrakenD benchmarks on Amazon EC2 machines.
Benchmark Setup This set of benchmarks have been running on different AWS EC2 instances. Each individual test consists of spinning up 3 different machines, being:
 A web server: A LWAN web server using an instance c4.xlarge. This is the &amp;ldquo;fake API&amp;rdquo; where KrakenD will take the data The HTTP load generator: The machine actually running the load test.</description>
    </item>
    
    <item>
      <title>Data manipulation</title>
      <link>https://www.krakend.io/docs/backends/data-manipulation/</link>
      <pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/backends/data-manipulation/</guid>
      <description>This page describes the most basic options to manipulate the content you receive from the backend before delivering it to the client.
Filtering When you offer a KrakenD endpoint, you can decide whether to return all the fields from the backend (default behavior) or specify which ones are allowed through an allow or deny list. You might want to use this functionality for many different reasons. Still, we strongly encourage you to consider using it frequently to save the user&amp;rsquo;s bandwidth, provide the client what is needed, and decrease the load and render times.</description>
    </item>
    
    <item>
      <title>Response manipulation</title>
      <link>https://www.krakend.io/docs/endpoints/response-manipulation/</link>
      <pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/endpoints/response-manipulation/</guid>
      <description>KrakenD allows you to perform several manipulations of the responses out of the box, just by adding them to the configuration file. You can also add your own or 3rd parties middlewares to extend this behavior.
KrakenD manipulations are measured in nanoseconds, you can find the benchmark for every response manipulation in the benchmarks
The following manipulations are available by default:
Merging When you create KrakenD endpoints, if a specific endpoint feeds from 2 or more backend sources (APIs), they will be automatically merged in a single response to the client.</description>
    </item>
    
    <item>
      <title>Endpoint rate limiting</title>
      <link>https://www.krakend.io/docs/endpoints/rate-limit/</link>
      <pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/endpoints/rate-limit/</guid>
      <description>Limiting endpoints is the responsibility of the router rate and allows you to set the number of maximum requests per second a KrakenD endpoint will accept. By default, there is no limitation on the number of requests an endpoint can handle.
To specify a rate limit, you need to add the configuration in the desired endpoint.
At the router level, you can set the rate limit for endpoints based on:</description>
    </item>
    
    <item>
      <title>Local Benchmarks</title>
      <link>https://www.krakend.io/docs/benchmarks/local/</link>
      <pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/benchmarks/local/</guid>
      <description>Hardware Model MacBook Pro (MacBookPro11,4) - August 2015 Processor: Intel Core i7 2,2 GHz  Setup For this test, we stored this configuration at krakend.json
{ &amp;quot;version&amp;quot;: 1, &amp;quot;endpoints&amp;quot;: [ { &amp;quot;endpoint&amp;quot;: &amp;quot;/foo&amp;quot;, &amp;quot;method&amp;quot;: &amp;quot;GET&amp;quot;, &amp;quot;backend&amp;quot;: [ { &amp;quot;url_pattern&amp;quot;: &amp;quot;/__debug/bar&amp;quot;, &amp;quot;host&amp;quot;: [ &amp;quot;http://127.0.0.1:8080&amp;quot; ] } ], &amp;quot;concurrent_calls&amp;quot;: &amp;quot;1&amp;quot;, &amp;quot;max_rate&amp;quot;: 100000 } ], &amp;quot;oauth&amp;quot;: { &amp;quot;disable&amp;quot;: true }, &amp;quot;cache_ttl&amp;quot;: &amp;quot;5m&amp;quot;, &amp;quot;timeout&amp;quot;: &amp;quot;5s&amp;quot; }  And we started the KrakenD with this cmd:</description>
    </item>
    
    <item>
      <title>Native InfluxDB exporter</title>
      <link>https://www.krakend.io/docs/extended-metrics/influxdb/</link>
      <pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/extended-metrics/influxdb/</guid>
      <description>KrakenD can expose detailed and extended metrics via the krakend-metrics). The krakend-influx component lets you send these extended KrakenD metrics to InfluxDB.
Notice that there are two different implementations of InfluxDB in KrakenD:
 Native InfluxDB exporter (this page) OpenCensus InfluxDB exporter   Which InfluxDB implementation should I choose? The native implementation exports data from a collector that is tailor-made for KrakenD, and also richer in content and less abstract.</description>
    </item>
    
    <item>
      <title>Enabling Cross Origin Resource Sharing (CORS)</title>
      <link>https://www.krakend.io/docs/service-settings/cors/</link>
      <pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/service-settings/cors/</guid>
      <description>When KrakenD endpoints are consumed from a browser, you might need to enable the Cross-Origin Resource Sharing (CORS) module as browsers restrict cross-origin HTTP requests initiated from scripts.
When the Cross-Origin Resource Sharing (CORS) configuration is enabled, KrakenD uses additional HTTP headers to tell browsers that they can use resources from a different origin (domain, protocol, or port). For instance, you will need this configuration if your web page is hosted at https://domain-a.</description>
    </item>
    
    <item>
      <title>Plugin and dependencies validator</title>
      <link>https://www.krakend.io/docs/extending/plugin-tools/</link>
      <pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/extending/plugin-tools/</guid>
      <description>The plugin validator is an online tool that allows you to find problems with your plugin dependencies. Go plugins are strict on which versions of libraries you can use, so it&amp;rsquo;s important to make sure that your dependencies are compatible with the selected KrakenD versions.
Access the online plugin validation tools The plugin validator checks your go.sum file to find problems and reports all associated problems. From which Go version is supported, to which individual libraries will conflict during runtime.</description>
    </item>
    
    <item>
      <title>JWT Validation</title>
      <link>https://www.krakend.io/docs/authorization/jwt-validation/</link>
      <pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/authorization/jwt-validation/</guid>
      <description>The component krakend-jose is responsible for the JWT validation and protects endpoints from public usage, requiring end-users to provide a valid token to access its contents.
Before digging any further, some answers to frequently asked questions:
  KrakenD does not generate the tokens itself. Still, you can plug it into any SaaS or self-hosted Identity Provider (IdP) using industry standards (e.g.: Auth0, Azure AD, Google Firebase, Keycloak, etc.)
  KrakenD does not need to validate all calls using your IdP.</description>
    </item>
    
    <item>
      <title>Flexible configuration</title>
      <link>https://www.krakend.io/docs/configuration/flexible-config/</link>
      <pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/configuration/flexible-config/</guid>
      <description>The Flexible Configuration component is included in the KrakenD API Gateway and allows you to split the configuration file into several pieces for a more natural organization.
When the Flexible Configuration is enabled, KrakenD assumes that your configuration file is a template that needs compilation during start-up time. With this, you have the opportunity to produce a more sophisticated configuration file that utilizes variables and brings content from external files.</description>
    </item>
    
    <item>
      <title>Deploying to Kubernetes</title>
      <link>https://www.krakend.io/docs/deploying/kubernetes/</link>
      <pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/deploying/kubernetes/</guid>
      <description>Deploying KrakenD in Kubernetes requires a straightforward configuration.
Create a Dockerfile that includes the configuration of the service. That should be as simple as:
FROM devosfaith/krakend COPY krakend.json /etc/krakend/krakend.json  If you use flexible-configuration you might want to add a previous generation of the krakend.json file using a multi-step Docker.
From here you need to create a NodePort and send all the traffic to KrakenD.
Deployment definition YAML The KrakenD deployment definition, in a file called deployment-definition.</description>
    </item>
    
    <item>
      <title>Service Discovery with etcd (deprecated)</title>
      <link>https://www.krakend.io/docs/service-discovery/etcd/</link>
      <pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/service-discovery/etcd/</guid>
      <description>Deprecated Since KrakenD 1.3.0 etcd is not longer supported. The documentation is left here for reference.  The etcd Service Discovery integration allows you to perform the host resolution using your existing etcd setup.
The integration etcd is controlled by the krakend-etcd component and adds client and subscriber capabilities for etcd.
Enabling etcd To enable the integration add in the root of your configuration file the necessary settings:
{ &amp;#34;version&amp;#34;: 2, &amp;#34;extra_config&amp;#34;: { &amp;#34;github_com/devopsfaith/krakend-etcd&amp;#34;: { &amp;#34;machines&amp;#34;: [ &amp;#34;https://192.</description>
    </item>
    
    <item>
      <title>The Circuit Breaker</title>
      <link>https://www.krakend.io/docs/backends/circuit-breaker/</link>
      <pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/backends/circuit-breaker/</guid>
      <description>To keep KrakenD responsive and resilient, we added a Circuit Breaker middleware on several processing pipe points. Thanks to this component, when KrakenD demands more throughput than your actual API stack can deliver properly, the Circuit Breaker mechanism will detect the failures and prevent stressing your servers by not sending requests that are likely to fail. It is also useful for dealing with network and other communication problems by preventing too many requests to fail due to timeouts, etc.</description>
    </item>
    
    <item>
      <title>Installing KrakenD</title>
      <link>https://www.krakend.io/docs/overview/installing/</link>
      <pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/overview/installing/</guid>
      <description>KrakenD is a single binary file that does not require any external libraries to work. To install KrakenD choose your operative system in the downloads section or use the Docker image.
 Download KrakenD and  Generate the configuration file
Just exploring?
Use the KrakenD Playground if you want to play with KrakenD without configuring it. The Playground comes with several flavors of KrakenD and a mock API. Everything is ready to start playing, just do a docker-compose up!</description>
    </item>
    
    <item>
      <title>KrakenD Status Codes</title>
      <link>https://www.krakend.io/docs/endpoints/status-codes/</link>
      <pubDate>Mon, 19 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/endpoints/status-codes/</guid>
      <description>When consuming content through KrakenD, the status code returned to the client depends on the chosen configuration. Three different approaches impact status codes:
 Use KrakenD regular endpoints to get the status codes as designed by KrakenD Return the status code as provided by your backend server (see the no-op encoding) Use custom logic to set specific status codes  Default status codes of KrakenD endpoints Unless the no-op encoding is set, the following status codes are the default behavior of any KrakenD endpoint.</description>
    </item>
    
    <item>
      <title>Preconfigured Grafana dashboard</title>
      <link>https://www.krakend.io/docs/extended-metrics/grafana/</link>
      <pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/extended-metrics/grafana/</guid>
      <description>The Grafana dashboard for KrakenD offers valuable information to understand the performance of your services and detect anomalies in the service. The dashboard is extensive and offers you metrics like:
 Requests from users to KrakenD Requests from KrakenD to your backends Response times Memory usage and details Endpoints and status codes Heatmaps Open connections Throughput Distributions, timers, garbage collection and a long etcetera  Better an image than a thousand words (video with no sound):</description>
    </item>
    
    <item>
      <title>Telemetry</title>
      <link>https://www.krakend.io/docs/telemetry/overview/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/telemetry/overview/</guid>
      <description>Observability and networking are key to succeed in a scenario of distributed microservices architecture, and new monitoring tools are needed. These tools must provide at least options to detect problems&#39; root causes, monitoring and details of the different distributed transactions, and performance and latency optimization.
Through the OpenCensus exporters you can send logs, metrics, and traces to several open source and payment tools, so you can follow the activity of the gateway and the derived requests to its connected backends.</description>
    </item>
    
    <item>
      <title>JWT Signing</title>
      <link>https://www.krakend.io/docs/authorization/jwt-signing/</link>
      <pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/authorization/jwt-signing/</guid>
      <description>The JWT signing component creates a wrapper for your login endpoint that signs with your secret key the selected fields of the backend payload right before returning the content to the end-user.
The primary usage for this component is in migrations from monolith to microservices, or in ecosystems where there is no Identity server yet, as it allows the immediate adoption of signed JSON Web Tokens without the need to implement a new service.</description>
    </item>
    
    <item>
      <title>Parameter forwarding</title>
      <link>https://www.krakend.io/docs/endpoints/parameter-forwarding/</link>
      <pubDate>Fri, 20 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/endpoints/parameter-forwarding/</guid>
      <description>KrakenD is an API Gateway, and when it comes to forward query strings, cookies, and headers, it does not behave like a regular proxy by forwarding parameters to the backend.
The default policy for data forwarding works as follows:
 No query string parameters are forwarded to the backend No headers are forwarded No cookies are forwarded  You can change this behavior according to your needs, and define which elements are allowed to pass.</description>
    </item>
    
    <item>
      <title>Using KrakenD</title>
      <link>https://www.krakend.io/docs/overview/usage/</link>
      <pubDate>Tue, 25 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/overview/usage/</guid>
      <description>From an operations point of view KrakenD, is very simple to use. It only requires you to pass the path the configuration file (which defines behaviors and endpoints). Additionally, you can enable the debug with the -d flag, and that&amp;rsquo;s pretty much everything.
TL;DR  Generate a configuration file with your endpoints definition. The easier way to generate it is using the designer Check the syntax of your krakend.json is good Syntax checking&amp;nbsp;   krakend&amp;nbsp;check&amp;nbsp;--config&amp;nbsp;krakend.</description>
    </item>
    
    <item>
      <title>Concurrent Requests</title>
      <link>https://www.krakend.io/docs/endpoints/concurrent-requests/</link>
      <pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/endpoints/concurrent-requests/</guid>
      <description>The concurrent requests are an excellent technique to improve the response times and decrease error rates by requesting in parallel the same information multiple times. When the first backend returns the information, the remaining threads are canceled.
It depends a lot on your configuration, but improving response times by a 75% or more with the same application you are using today is not something rare.
When using concurrent requests, the backend services must be able to handle an additional load.</description>
    </item>
    
    <item>
      <title>Service Discovery with Eureka</title>
      <link>https://www.krakend.io/docs/service-discovery/eureka/</link>
      <pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/service-discovery/eureka/</guid>
      <description>Users of the Netflix&amp;rsquo;s service Eureka have a couple of user contributed integrations available listed in our krakend-contrib repository.
The integrations are not bundled with KrakenD-CE releases but they can be added to the project and make a custom build without difficulties.
 schibsted/krakend-eureka: The Eureka client Schibsted has been running in production since 2017. joaoqalves/krakend-eureka: A Eureka client contributed by João Alves  </description>
    </item>
    
    <item>
      <title>KrakenD file supported formats</title>
      <link>https://www.krakend.io/docs/configuration/supported-formats/</link>
      <pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/configuration/supported-formats/</guid>
      <description>The expected configuration file format by default is json, but KrakenD can parse different formats if one of the following extensions is found:
 .json .toml .yaml .yml .properties .props .prop .hcl  Nevertheless, our recommendation is to choose JSON.
Validate the syntax (not the logic) with krakend check
Why choosing json? You are free to choose YAML, TOML or any of the other formats at your best convenience. But have in mind the following logic when choosing a file format other than json.</description>
    </item>
    
    <item>
      <title>The `/__debug` endpoint</title>
      <link>https://www.krakend.io/docs/endpoints/debug-endpoint/</link>
      <pubDate>Tue, 27 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/endpoints/debug-endpoint/</guid>
      <description>The /__debug endpoint is available when you start the server with the -d flag.
The endpoint can be used as a fake backend and is very useful to see the interaction between the gateway and the backends as its activity is printed in the log using the DEBUG log level .
When developing, add KrakenD itself as another backend using the /__debug/ endpoint so you can see exactly what headers and query string parameters your backends are receiving.</description>
    </item>
    
    <item>
      <title>Overriding the configuration with environment vars</title>
      <link>https://www.krakend.io/docs/configuration/environment-vars/</link>
      <pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/configuration/environment-vars/</guid>
      <description>When KrakenD runs, all the behavior is loaded from the configuration file. For each configuration value that isn&amp;rsquo;t nested (meaning first-level properties of the configuration), you can override its value with an environment variable.
All configuration environment variables must have the prefix KRAKEND_ and declared in uppercase. The variable name after the prefix must match the property in the configuration value.
For instance, take the following krakend.json configuration as an example:</description>
    </item>
    
    <item>
      <title>Graylog and the GELF format</title>
      <link>https://www.krakend.io/docs/logging/graylog-gelf/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/logging/graylog-gelf/</guid>
      <description>KrakenD supports sending structured events in GELF format to your Graylog Cluster thanks to the krakend-gelf integration.
The setup of GELF is straightforward and requires only to set two parameters:
 address: The address (including the port) of your Graylog cluster (or any other service that receives GELF inputs). enable_tcp: Set to false (recommended) to use UDP. When using TCP performance might be affected.  Enabling GELF Add the krakend-gelf integration in the root level of your krakend.</description>
    </item>
    
    <item>
      <title>Revoking valid tokens with a Bloom filter</title>
      <link>https://www.krakend.io/docs/authorization/revoking-tokens/</link>
      <pubDate>Mon, 05 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/authorization/revoking-tokens/</guid>
      <description>The API Gateway authorizes users that provide valid tokens according to your criteria, but at some point, you might want to change your mind and decide to revoke JWT tokens that are still valid.
When are you going to need this? Examples of situations where you might need to revoke perfectly legit tokens: As a user, I want to log me out of all my devices. As an administrator, I want to kick out someone from the platform.</description>
    </item>
    
    <item>
      <title>Timeouts</title>
      <link>https://www.krakend.io/docs/throttling/timeouts/</link>
      <pubDate>Thu, 04 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/throttling/timeouts/</guid>
      <description>Being KrakenD an API Gateway that talks to other services, being able to control the waiting times for different aspects is crucial. KrakenD will allow you to fine-tune these settings.
The timeouts can apply to:
 The duration of the whole pipe (from user request to user response) The HTTP request related timeouts  Additionally, you can control the number of maximum IDLE connections.
Pipe timeouts Global timeout The timeout key in the krakend.</description>
    </item>
    
    <item>
      <title>Security</title>
      <link>https://www.krakend.io/docs/service-settings/security/</link>
      <pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/service-settings/security/</guid>
      <description>KrakenD has implemented several security strategies, controlled via krakend-httpsecure. To enable them you only need to add the extra_config at service (root) level.
The following example describes the options explained later in this article:
&amp;quot;extra_config&amp;quot;: { &amp;quot;github_com/devopsfaith/krakend-httpsecure&amp;quot;: { &amp;quot;allowed_hosts&amp;quot;: [ &amp;quot;host.known.com:443&amp;quot; ], &amp;quot;ssl_proxy_headers&amp;quot;: { &amp;quot;X-Forwarded-Proto&amp;quot;: &amp;quot;https&amp;quot; }, &amp;quot;ssl_redirect&amp;quot;: true, &amp;quot;ssl_host&amp;quot;: &amp;quot;ssl.host.domain&amp;quot;, &amp;quot;ssl_port&amp;quot;: &amp;quot;443&amp;quot;, &amp;quot;ssl_certificate&amp;quot;: &amp;quot;/path/to/cert&amp;quot;, &amp;quot;ssl_private_key&amp;quot;: &amp;quot;/path/to/key&amp;quot;, &amp;quot;sts_seconds&amp;quot;: 300, &amp;quot;sts_include_subdomains&amp;quot;: true, &amp;quot;frame_deny&amp;quot;: true, &amp;quot;custom_frame_options_value&amp;quot;: &amp;quot;ALLOW-FROM https://example.com&amp;quot;, &amp;quot;hpkp_public_key&amp;quot;: &amp;quot;pin-sha256=\&amp;quot;base64==\&amp;quot;; max-age=expireTime [; includeSubDomains][; report-uri=\&amp;quot;reportURI\&amp;quot;]&amp;quot;, &amp;quot;content_type_nosniff&amp;quot;: true, &amp;quot;browser_xss_filter&amp;quot;: true, &amp;quot;content_security_policy&amp;quot;: &amp;quot;default-src &#39;self&#39;;&amp;quot; }  See below the different options described in this configuration file.</description>
    </item>
    
    <item>
      <title>Supported backend encodings</title>
      <link>https://www.krakend.io/docs/backends/supported-encodings/</link>
      <pubDate>Thu, 14 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/backends/supported-encodings/</guid>
      <description>Setting the encoding is an important part of the backend definition, as it informs KrakenD how to parse the responses of your services.
Each backend can reply with a different encoding and KrakenD does not have any problem working with mixed encodings at the same time. You can use the following encoding in each backend section:
 json safejson xml rss string no-op  Notice that all values are in lower case.</description>
    </item>
    
    <item>
      <title>Logstash</title>
      <link>https://www.krakend.io/docs/logging/logstash/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/logging/logstash/</guid>
      <description>If you want to log using the Logstash standard via stdout, you have to add the krakend-logstash integration in the root level of your krakend.json, inside the extra_config section. The gologging needs to be enabled too.
For instance:
&amp;quot;extra_config&amp;quot;: { &amp;quot;github_com/devopsfaith/krakend-logstash&amp;quot;: { &amp;quot;enabled&amp;quot;: true } &amp;quot;github_com/devopsfaith/krakend-gologging&amp;quot;: { &amp;quot;level&amp;quot;: &amp;quot;INFO&amp;quot;, &amp;quot;prefix&amp;quot;: &amp;quot;[KRAKEND]&amp;quot;, &amp;quot;syslog&amp;quot;: false, &amp;quot;stdout&amp;quot;: true, &amp;quot;format&amp;quot;: &amp;quot;logstash&amp;quot; } }  </description>
    </item>
    
    <item>
      <title>OAuth 2.0 Client Credentials</title>
      <link>https://www.krakend.io/docs/authorization/client-credentials/</link>
      <pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/authorization/client-credentials/</guid>
      <description>Through the OAuth 2.0 Client Credentials Grant KrakenD can request to your authorization server an access token to reach protected resources.
The client credentials authorize KrakenD, as the client, to access the protected resources. Do not confuse this with authorizing an end-user (see JWT instead).
Successfully setting the client credentials for a backend means that KrakenD can get the protected content, but the endpoint offered to the end-user is going to be public unless you protect it with JWT.</description>
    </item>
    
    <item>
      <title>Caching backend responses</title>
      <link>https://www.krakend.io/docs/backends/caching/</link>
      <pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/backends/caching/</guid>
      <description>Sometimes you might want to reuse a previous response of a backend instead of asking for the same information over the network again. In this cases, it is possible to enable in-memory caching for the desired backend responses.
This caching technique applies to traffic between KrakenD and your microservices endpoints only and is not a caching system for the end-user endpoints. To enable the cache, you only need to add in the configuration file the httpcache middleware.</description>
    </item>
    
    <item>
      <title>Response content types</title>
      <link>https://www.krakend.io/docs/endpoints/content-types/</link>
      <pubDate>Thu, 14 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/endpoints/content-types/</guid>
      <description>KrakenD supports sending responses back to the client using content types other than JSON. The list of supported content types depends on the router package used.
Supported encodings The gateway can work with several content types, even allowing your clients to choose how to consume the content. The following output_encoding strategies are available to choose for every an endpoint:
 json: The endpoint always return a response in JSON format to the client.</description>
    </item>
    
    <item>
      <title>Sending out logs, metrics, and traces</title>
      <link>https://www.krakend.io/docs/telemetry/opencensus/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/telemetry/opencensus/</guid>
      <description>The Opencensus exporter is a single component that allows you to export data to multiple providers, both open source and privative.
You will be interested in Opencensus when you want to see data in one of its supported exporters. For instance, you might want to send metrics to Prometheus. That would be as easy as adding this snippet in the root level of your krakend.json file:
{ &amp;quot;version&amp;quot;: 2, &amp;quot;extra_config&amp;quot;: { &amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;prometheus&amp;quot;: { &amp;quot;port&amp;quot;: 9091 &amp;quot;namespace&amp;quot;: &amp;quot;krakend&amp;quot; } } } } }  Configuration The Opencensus only needs an exporter to work, although multiple exporters can be added in the same configuration.</description>
    </item>
    
    <item>
      <title>Proxying directly to the backends with `no-op`</title>
      <link>https://www.krakend.io/docs/endpoints/no-op/</link>
      <pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/endpoints/no-op/</guid>
      <description>KrakenD no-op (no-operation), is a special type of encoding that behaves as a proxy by passing the client&amp;rsquo;s request to the backend as is, and vice-versa.
Using no-op to proxy requests When setting no-op, KrakenD does not inspect the request body or manipulates it in any way. Instead, when a request to a no-op endpoint is received, KrakenD directly forwards it to the backend without doing any operation with it.</description>
    </item>
    
    <item>
      <title>Sequential Proxy</title>
      <link>https://www.krakend.io/docs/endpoints/sequential-proxy/</link>
      <pubDate>Sun, 11 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/endpoints/sequential-proxy/</guid>
      <description>The best experience consumers can have with KrakenD API is by letting the system fetch all the data from the different backends concurrently at the same time. However, there are times when you need to delay a backend call until you can inject as input the result of a previous call.
The sequential proxy allows you to chain backend requests.
Chaining the requests All you need to enable the sequential proxy is add in the endpoint definition the following configuration:</description>
    </item>
    
    <item>
      <title>Traffic shadowing or mirroring</title>
      <link>https://www.krakend.io/docs/backends/shadow-backends/</link>
      <pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/backends/shadow-backends/</guid>
      <description>There are times when you have been working in a new version of your microservice, a complete refactor, a dangerous change, or any other valuable change that needs being careful, and it&amp;rsquo;s too risky to put it live as there might be issues that impact your end users.
The traffic shadowing or traffic mirroring functionality allows you to test new backends in production by sending them copies of the traffic but ignore their responses.</description>
    </item>
    
    <item>
      <title>Maximum IDLE connections</title>
      <link>https://www.krakend.io/docs/throttling/max-idle-connections/</link>
      <pubDate>Thu, 04 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/throttling/max-idle-connections/</guid>
      <description>Having a high number of IDLE connections to every backend affects directly to the performance of the proxy layer. This is why you can control the number using the max_idle_connections setting. For instance:
{ &amp;quot;version&amp;quot;: 2, &amp;quot;max_idle_connections&amp;quot;: 150, ... }  KrakenD will close connections sitting idle in a &amp;ldquo;keep-alive&amp;rdquo; state when max_idle_connections is reached. If no value is set in the configuration file, KrakenD will use 250 by default.</description>
    </item>
    
    <item>
      <title>Exporting metrics to Prometheus</title>
      <link>https://www.krakend.io/docs/telemetry/prometheus/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/telemetry/prometheus/</guid>
      <description>Prometheus is an open-source systems monitoring and alerting toolkit.
The Opencensus exporter allows you push data to Prometheus. Enabling it only requires you to include in the root level of your configuration the Opencensus middleware with the prometheus exporter. Specify the port on which Prometheus is running, the namespace (optional), and Prometheus will start receiving the data.
&amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;prometheus&amp;quot;: { &amp;quot;port&amp;quot;: 9091, &amp;quot;namespace&amp;quot;: &amp;quot;krakend&amp;quot; } } }   port on which Prometheus is listening namespace sets the domain the metric belongs to.</description>
    </item>
    
    <item>
      <title>Array manipulation - flatmap</title>
      <link>https://www.krakend.io/docs/backends/flatmap/</link>
      <pubDate>Fri, 05 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/backends/flatmap/</guid>
      <description>The flatmap middleware allows you to manipulate collections (or arrays, or lists, you name it). While the basic manipulation operations allow you to work directly with objects, the collections require a different approach: the flatmap component.
When working with lists, KrakenD needs to flatten and expand array structures to objects to operate with them, and vice versa. This process is automatically done by the flatmap component, letting you concentrate only on the type of operation you want to execute.</description>
    </item>
    
    <item>
      <title>Static Proxy - Adding static/stub data</title>
      <link>https://www.krakend.io/docs/endpoints/static-proxy/</link>
      <pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/endpoints/static-proxy/</guid>
      <description>The static proxy is an aid to clients dealing with incomplete and other types of degraded responses. When enabled, the static proxy injects static data in the final response when the behavior of a backend falls in the selected strategy.
A typical scenario is when some backend fails and the endpoint becomes incomplete, but you prefer to provide a stub response for that part instead. When your application cannot handle well the degraded response, the static data comes handy.</description>
    </item>
    
    <item>
      <title>Exporting metrics and events to InfluxDB</title>
      <link>https://www.krakend.io/docs/telemetry/influxdb/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/telemetry/influxdb/</guid>
      <description>InfluxDB is a time series database designed to handle high write and query loads.
The Opencensus exporter allows you export data to InfluxDB for monitoring metrics and events. Enabling it only requires you to add the influxdb exporter in the opencensus module.
The following configuration snippet sends data to your InfluxDB:
&amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;influxdb&amp;quot;: { &amp;quot;address&amp;quot;: &amp;quot;http://192.168.99.100:8086&amp;quot;, &amp;quot;db&amp;quot;: &amp;quot;krakend&amp;quot;, &amp;quot;timeout&amp;quot;: &amp;quot;1s&amp;quot; }, } }   address is the URL (including port) where your InfluxDB is installed db is the database name timeout is the maximum time you wait for Influx to respond  See also the additional settings of the Opencensus module that can be declared.</description>
    </item>
    
    <item>
      <title>Checking requests and responses with the Common Expression Language (CEL)</title>
      <link>https://www.krakend.io/docs/endpoints/common-expression-language-cel/</link>
      <pubDate>Thu, 24 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/endpoints/common-expression-language-cel/</guid>
      <description>There are times when you might want to include additional logic in the gateway to decide if a request has to be fulfilled or not.
The Common Expression Language (CEL) middleware enables Google&amp;rsquo;s CEL spec which implements common semantics for expression evaluation, and is a very simple and powerful option to have full control during requests and responses.
When the CEL component is enabled, any amount of expressions to check both requests and responses can be set.</description>
    </item>
    
    <item>
      <title>Modify requests and responses with Martian</title>
      <link>https://www.krakend.io/docs/backends/martian/</link>
      <pubDate>Thu, 24 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/backends/martian/</guid>
      <description>The krakend-martian component allows you to transform requests and responses through a simple DSL definition in the configuration file. Martian works perfectly in combination with CEL verifications.
Use Martian when you want to intercept the request of the end-user and make modifications before passing the content to the backends. Also, the other way around, transform the backends response before passing it to the user.
Martian is mighty and gives you endless possibilities to control what is going in and out the gateway.</description>
    </item>
    
    <item>
      <title>Exporting traces to Datadog</title>
      <link>https://www.krakend.io/docs/telemetry/datadog/</link>
      <pubDate>Fri, 24 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/telemetry/datadog/</guid>
      <description>Datadog is a monitoring and security platform for developers, IT operations teams and business in the cloud.
Datadog configuration The Opencensus exporter allows you export data to Datadog. Enabling it only requires you to add the datadog exporter in the opencensus module.
The following configuration snippet sends data to your Datadog:
 &amp;quot;extra_config&amp;quot;: { &amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;datadog&amp;quot;: { &amp;quot;tags&amp;quot;: [ &amp;quot;gw&amp;quot; ], &amp;quot;global_tags&amp;quot;: [ &amp;quot;prod&amp;quot; ], &amp;quot;disable_count_per_buckets&amp;quot;: true, &amp;quot;trace_address&amp;quot;: &amp;quot;localhost:8126&amp;quot;, &amp;quot;stats_address&amp;quot;: &amp;quot;localhost:8125&amp;quot;, &amp;quot;namespace&amp;quot;: &amp;quot;krakend&amp;quot;, &amp;quot;service&amp;quot;: &amp;quot;gateway&amp;quot; } } } }   tags (list) specifies a set of global tags to attach to each metric global_tags (list) GlobalTags holds a set of tags that will automatically be applied to all exported spans.</description>
    </item>
    
    <item>
      <title>Transformations using Lua scripting</title>
      <link>https://www.krakend.io/docs/endpoints/lua/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/endpoints/lua/</guid>
      <description>Scripting with Lua is an additional choice to extend your business logic, and is compatible with the rest of options such as CEL, Martian, or other Go plugins and middlewares.
If you are more familiar with Lua than Go, this module can help you solve exceptional cases that need solution using a little bit of scripting. The introduction of Lua scripts in your Gateway does not require to recompile KrakenD, but unlike Go, Lua scripts are interpreted in real-time.</description>
    </item>
    
    <item>
      <title>Exporting traces to Zipkin</title>
      <link>https://www.krakend.io/docs/telemetry/zipkin/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/telemetry/zipkin/</guid>
      <description>Zipkin is a distributed tracing system. It helps gather timing data needed to troubleshoot latency problems in service architectures.
The Opencensus exporter allows you export data to Zipkin. Enabling it only requires you to add the zipkin exporter in the opencensus module.
The following configuration snippet sends data to your Zipkin:
&amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;zipkin&amp;quot;: { &amp;quot;collector_url&amp;quot;: &amp;quot;http://192.168.99.100:9411/api/v2/spans&amp;quot;, &amp;quot;service_name&amp;quot;: &amp;quot;krakend&amp;quot; }, } }   collector_url is the URL (including port and path) where your Zipkin is accepting the spans service_name the service name registered in Zipkin  See also the additional settings of the Opencensus module that can be declared.</description>
    </item>
    
    <item>
      <title>API Gateway integration with AMQP messaging</title>
      <link>https://www.krakend.io/docs/backends/amqp/</link>
      <pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/backends/amqp/</guid>
      <description>The AMQP component allows to send and receive messages to and from a queue through the API Gateway.
The configuration of the queue is a straightforward process. To connect the endpoints to the messaging system you only need to include the extra_config key with the namespaces github.com/devopsfaith/krakend-amqp/consume or github.com/devopsfaith/krakend-amqp/produce.
The parameters of this integration follow the AMQP specification. To understand what are the implications of a certain parameter, see the AMQP Complete Reference Guide.</description>
    </item>
    
    <item>
      <title>Exporting traces to Jaeger</title>
      <link>https://www.krakend.io/docs/telemetry/jaeger/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/telemetry/jaeger/</guid>
      <description>Jaeger is an open source, end-to-end distributed tracing system that allows you to monitor and troubleshoot transactions in complex distributed systems.
The Opencensus exporter allows you export data to Jaeger. Enabling it only requires you to add the jaeger exporter in the opencensus module.
The following configuration snippet sends data to your Jaeger:
&amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;jaeger&amp;quot;: { &amp;quot;endpoint&amp;quot;: &amp;quot;http://192.168.99.100:14268/api/traces&amp;quot;, &amp;quot;service_name&amp;quot;:&amp;quot;krakend&amp;quot; }, } }   endpoint is the URL (including port) where your Jaeger is service_name the service name registered in Jaeger  See also the additional settings of the Opencensus module that can be declared.</description>
    </item>
    
    <item>
      <title>Using publisher/subscribe as backends</title>
      <link>https://www.krakend.io/docs/backends/pubsub/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/backends/pubsub/</guid>
      <description>Since KrakenD 1.0 you can connect an endpoint to multiple publish/subscribe backends, helping you integrate with event driven architectures. For instance, a frontend client can push events to a queue using a REST interface. Or a client could consume a REST endpoint that is plugged to the last events pushed in a backend. You can even validate messages and formats as all the KrakenD available middleware can be used. The list of supported backend technologies is:</description>
    </item>
    
    <item>
      <title>KrakenD vs. KrakenD-CE</title>
      <link>https://www.krakend.io/docs/overview/krakend-vs-krakend-ce/</link>
      <pubDate>Sat, 23 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/overview/krakend-vs-krakend-ce/</guid>
      <description>If you had a quick look at our git repositories, you might be confused at first, as we have a repository named krakend and another one named krakend-ce.
Difference between KrakenD, KrakenD-CE, and Enterprise TL;DR;
 KrakenD is a framework KrakenD-CE is our open-source API Gateway ready to use KrakenD Enterprise are our professional software and services to businesses  KrakenD framework KrakenD (repo) is an open-source project created by @devopsfaith to accelerate the creation of custom API Gateways.</description>
    </item>
    
    <item>
      <title>Exporting traces to AWS X-Ray</title>
      <link>https://www.krakend.io/docs/telemetry/xray/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/telemetry/xray/</guid>
      <description>AWS X-Ray is a service offered by Amazon that provides an end-to-end view of requests as they travel through your application, and shows a map of your application’s underlying components.
The Opencensus exporter allows you export data to AWS X-Ray. Enabling it only requires you to add the xray exporter in the opencensus module.
The following configuration snippet sends data to your X-Ray:
&amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;xray&amp;quot;: { &amp;quot;version&amp;quot;: &amp;quot;latest&amp;quot;, &amp;quot;region&amp;quot;: &amp;quot;eu-west-1&amp;quot;, &amp;quot;use_env&amp;quot;: false, &amp;quot;access_key_id&amp;quot;: &amp;quot;myaccesskey&amp;quot;, &amp;quot;secret_access_key&amp;quot;: &amp;quot;mysecretkey&amp;quot; }, } }   version: The version of the AWS X-Ray service to use.</description>
    </item>
    
    <item>
      <title>Integration with AWS Lambda functions</title>
      <link>https://www.krakend.io/docs/backends/lambda/</link>
      <pubDate>Sun, 11 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/backends/lambda/</guid>
      <description>The Lambda integration allows you to invoke Amazon Lambda functions on a KrakenD endpoint call. The content returned by the lambda function can be treated and manipulated as any other backend.
The payload that is sent to the Lambda function comes from the request and depends on the method used by the endpoint:
 Method GET: The payload contains all the parameters of the request. Non-GET methods: The payload is defined by the content of the body in the request.</description>
    </item>
    
    <item>
      <title>The KrakenD Playground</title>
      <link>https://www.krakend.io/docs/overview/playground/</link>
      <pubDate>Thu, 13 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/overview/playground/</guid>
      <description>If you are new to KrakenD, a quick way to get started is to make use of the KrakenD Playground.
The KrakenD Playground is a Docker Compose environment that puts together the necessary pieces to let you play with KrakenD in a working environment.
As KrakenD is an API gateway, we have also added to the environment an API (backend) to feed the gateway and a website to make use of the data.</description>
    </item>
    
    <item>
      <title>Exporting metrics, logs and events to Google Stackdriver</title>
      <link>https://www.krakend.io/docs/telemetry/stackdriver/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/telemetry/stackdriver/</guid>
      <description>Google Stackdriver aggregates metrics, logs, and events from infrastructure, giving developers and operators a rich set of observable signals that speed root-cause analysis and reduce mean time to resolution (MTTR).
The Opencensus exporter allows you export data to Google Stackdriver. Enabling it only requires you to add the stackdriver exporter in the opencensus module.
The following configuration snippet sends the data:
&amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;stackdriver&amp;quot;: { &amp;quot;project_id&amp;quot;: &amp;quot;my-krakend-project&amp;quot;, &amp;quot;metrics_prefix&amp;quot;: &amp;quot;krakend&amp;quot;, &amp;quot;default_labels&amp;quot;: { &amp;quot;env&amp;quot;: &amp;quot;production&amp;quot; } } } }   project_id: The identifier of your Google Cloud project.</description>
    </item>
    
    <item>
      <title>Exporting metrics, logs and events to Azure Monitor</title>
      <link>https://www.krakend.io/docs/telemetry/azure/</link>
      <pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/telemetry/azure/</guid>
      <description>Azure Monitor collect, analyzes, and acts on telemetry data from your Azure and on-premises environments. Azure Monitor helps you maximize performance and availability of your applications and proactively identify problems in seconds.
The Opencensus exporter allows you export data to Azure Monitor. Enabling it only requires you to add the ocagent exporter in the opencensus module, see how to configure the OpenCensus Agent.</description>
    </item>
    
    <item>
      <title>Validating the body with the JSON Schema integration</title>
      <link>https://www.krakend.io/docs/endpoints/json-schema/</link>
      <pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/endpoints/json-schema/</guid>
      <description>KrakenD endpoints receiving a JSON object in its body can apply automatic validations using the JSON Schema vocabulary before the content passes to the backends. The json schema component allows you to define validation rules on the body, type definition, or even validate the fields&#39; values.
When the validation fails, KrakenD returns to the user a status code 400 (Bad Request), and only if it succeeds, the backend receives the request.</description>
    </item>
    
    <item>
      <title>Returning the details of backend errors</title>
      <link>https://www.krakend.io/docs/backends/detailed-errors/</link>
      <pubDate>Wed, 02 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/backends/detailed-errors/</guid>
      <description>When you are willing to manipulate or aggregate data, KrakenD&amp;rsquo;s policy regarding errors and status codes is to hide from the client any backend details. The philosophy behind this is that clients have to be decoupled from its underlying services.
If in the other hand, your endpoint connects to a single backend with no manipulation, use the no-op encoding which returns the response to the client as is, preserving its form: body, headers, status codes and such.</description>
    </item>
    
    <item>
      <title>Exporting metrics, logs, and events to the OpenCensus Agent</title>
      <link>https://www.krakend.io/docs/telemetry/ocagent/</link>
      <pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/telemetry/ocagent/</guid>
      <description>The ocagent exporter sends OpenCensus Stats and Traces to the OpenCensus Agent, instead of pushing data to backends’ exporters.
For instance, you can enable ocagent to upload data to the OpenCensus Agent, and from there, the agent is simply scraped by a Prometheus.
You can integrate the OpenCensus Agent with Azure Monitor, Jaeger, or Prometheus to name a few examples.
Enabling it only requires you to add the ocagent exporter in the opencensus module.</description>
    </item>
    
    <item>
      <title>Handling WebSockets connections</title>
      <link>https://www.krakend.io/docs/enterprise/websockets/</link>
      <pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/enterprise/websockets/</guid>
      <description>KrakenD Enterprise supports communications using the WebSocket Protocol (RFC-6455) to enable two-way communication between a client to a backend host through the API gateway. This technology aims to provide a mechanism for browser-based applications that need two-way communication with servers that do not rely on opening multiple HTTP connections.
KrakenD has the capability of multiplexing. Each individual end-client (e.g., Desktop, Mobile device) establishes a connection with the gateway directly, and KrakenD opens a single channel with the backend host to handle all its connected clients.</description>
    </item>
    
    <item>
      <title>Exporting to the logger</title>
      <link>https://www.krakend.io/docs/telemetry/logger/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/telemetry/logger/</guid>
      <description>Opencensus can export data to the system logger as another exporter.
Enabling it only requires you to add the logger exporter in the opencensus module.
The following configuration snippet enables the logger:
&amp;quot;github_com/devopsfaith/krakend-opencensus&amp;quot;: { &amp;quot;exporters&amp;quot;: { &amp;quot;logger&amp;quot;: { &amp;quot;stats&amp;quot;: true, &amp;quot;spans&amp;quot;: true } } }   stats: Whether to log the statistics or not spans: Whether to log the spans or not  See also the additional settings of the Opencensus module that can be declared.</description>
    </item>
    
    <item>
      <title>Adding a health check endpoint (ping)</title>
      <link>https://www.krakend.io/docs/endpoints/health/</link>
      <pubDate>Mon, 07 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/endpoints/health/</guid>
      <description>If you place a balancer in front of KrakenD, such as an ELB, you can check KrakenD health using a TCP port check. If, on the other hand, you need an HTTP endpoint in systems like Kubernetes, use /__health.
The /__health endpoint The health endpoint in KrakenD works out of the box without adding any configuration in the server. Just point your checks to /__health and you&amp;rsquo;ll have a 200 response code from KrakenD when the system is running, e.</description>
    </item>
    
    <item>
      <title>KrakenD 1.3.0 released</title>
      <link>https://www.krakend.io/blog/krakend-1.3-release-notes/</link>
      <pubDate>Wed, 24 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/blog/krakend-1.3-release-notes/</guid>
      <description>The KrakenD team is pleased to announce the release of KrakenD 1.3.0. You can get it packaged from the download page.
KrakenD 1.3.0 makes focus on completing the RBAC system regarding JWT. The main highlights are:
JWT: Complete the RBAC system and flexibility improvements:
 Scopes validation (thanks to @chrisdennig) Extract and forward claims as headers (thanks to @chrisdennig) Support for Oracle Identity Cloud Service by allowing key identifers other than kid such as x5t or kid_x5t (contribution from Oracle) Allow loading of local JWK files Integration with secret providers such as:  Amazon KMS Azure&amp;rsquo;s Key Vault Google Cloud KMS Hashicorp&amp;rsquo;s Vault Encrypted or plain base64 file    Other features:</description>
    </item>
    
    <item>
      <title>KrakenD partners with Microsoft to distribute in Azure</title>
      <link>https://www.krakend.io/blog/krakend-partners-with-microsoft/</link>
      <pubDate>Fri, 19 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/blog/krakend-partners-with-microsoft/</guid>
      <description>KrakenD continues to expand its distribution channels and services by partnering with Microsoft to publish its API Gateway on Azure Marketplace.
As a first step, the Azure Marketplace now counts with a ready-to-use KrakenD image for the open-source edition that helps users of the Azure Kubernete Service (AKS) to quickly and securely publish services through KrakenD API Gateway.
According to a Cloud Solution Architect at Microsoft KrakenD is a great fit in the cloud-native space and a recommended product for AKS workloads and Kubernetes in general</description>
    </item>
    
    <item>
      <title>KrakenD 1.2.0 released</title>
      <link>https://www.krakend.io/blog/krakend-1.2-release-notes/</link>
      <pubDate>Mon, 05 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/blog/krakend-1.2-release-notes/</guid>
      <description>The KrakenD team is pleased to announce the release of KrakenD 1.2. You can get it packaged from the download page.
Some of the highlights include:
 Added a /__health endpoint Removed the wording whitelist and blacklist from all our products (#BlackLivesMatter) Datadog integration Array manipulation available after merging multiple backends KRAKEND_-like environment vars to override configuration A lot of small features and bugfixes   KrakenD framework Summary of the most significant changes:</description>
    </item>
    
    <item>
      <title>KrakenD Usage Stats - March 2020</title>
      <link>https://www.krakend.io/blog/usage-stats-march-2020/</link>
      <pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/blog/usage-stats-march-2020/</guid>
      <description>KrakenD servers with telemetry enabled help us to understand the usage of KrakenD in production. Last month we witnessed 356K running instances, and we wanted to share some data with you. 👇
From mid-March, we have seen an exciting increase in the number of KrakenD instances seen per day: x12! The trend is just beautiful, including the cumulative.
According to our internal definition, an instance is every time a KrakenD is started.</description>
    </item>
    
    <item>
      <title>KrakenD 1.1 with Kafka integration released</title>
      <link>https://www.krakend.io/blog/krakend-1.1-release-notes/</link>
      <pubDate>Wed, 26 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/blog/krakend-1.1-release-notes/</guid>
      <description>The KrakenD team is pleased to announce the release of KrakenD 1.1. You can get it packaged from the download page.
Some of the highlights include:
 Kafka integration Extended Docker image Added Telemetry for Azure Monitor More performance improvements  Kafka integration From now on, users of Apache Kafka can publish and subscribe from KrakenD. The Kafka integration saves you from writing application logic to interact with the streaming platform and let the gateway be an active player in the event architecture pattern.</description>
    </item>
    
    <item>
      <title>Digital services for the world&#39;s leading car manufacturers and dealer networks</title>
      <link>https://www.krakend.io/case-study/perx/</link>
      <pubDate>Tue, 26 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/case-study/perx/</guid>
      <description>Perx is developing a data management platform called Hoop built on microservices and an architecture that makes use of extensive internal and external communications through REST APIs and asynchronous NATS channels.
KrakenD API Gateway offers robust functionality to control the traffic between external API clients and services. It aggregates microservices responses together into one unified API and thus provides flexible options for request/response manipulation to meet customers&#39; needs.
Using KrakenD provides secure external connections with OAuth.</description>
    </item>
    
    <item>
      <title>Salesforce integration with company&#39;s microservices</title>
      <link>https://www.krakend.io/case-study/privalia/</link>
      <pubDate>Sun, 29 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/case-study/privalia/</guid>
      <description>Veepee is the European flash sales leader with 72M of members, and Privalia its strategic brand for Spain, Italy, Brazil, and Mexico.
Privalia, with +13M members, evolved their customer care solution from an in-house solution to a Salesforce integration with their internal systems.
Before KrakenD, the main challenge of Veepee was to integrate Salesforce with multiple microservices and handle authorization, security, and aggregation in the middle layers.
KrakenD solved this challenge with out of the box features, keeping Privalia&amp;rsquo;s logic separated, and decoupled from Salesforce.</description>
    </item>
    
    <item>
      <title>KrakenD 1.0 announcement</title>
      <link>https://www.krakend.io/blog/announcing-krakend-1.0/</link>
      <pubDate>Sat, 21 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/blog/announcing-krakend-1.0/</guid>
      <description>In November 2016, we released KrakenD framework to the public. Today, after three years serving traffic around the world, and a lot of lessons learned on the way, KrakenD 1.0 is out 🎉🎉🎉
KrakenD 1.0 is our announcement to the world that our libraries are now fully established and with the solid commitment of keeping backward compatibility. In the last twelve months, we have seen 120,000+ clusters in the world and 1M+ docker pulls, but as we always did (since 0.</description>
    </item>
    
    <item>
      <title>API Gateway for insurance companies and fund management societies</title>
      <link>https://www.krakend.io/case-study/i2s/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/case-study/i2s/</guid>
      <description>GFI is one of the most high-performing IT and digital service companies in the market. Their insurance branch i2S has software solutions installed in nearly 50 insurance companies (Life and Non-life) and several pension fund management societies.
KrakenD is the entry point to consume all the micro-services in a controlled way and helps create an insurance-related product, covering many aspects, from legal to finance and actuarial.
KrakenD unifies and aggregates the responses of all the underlying Java microservices, and injects custom middleware for insurance&amp;rsquo;s particular use case.</description>
    </item>
    
    <item>
      <title>API Gateway for Real Estate applications</title>
      <link>https://www.krakend.io/case-study/openroom/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/case-study/openroom/</guid>
      <description>Open Room Inc. uses KrakenD to expose easily and safely various Real Estate applications, to help agents in their daily work and end-users to find the home they are looking for.
Open Room uses image processing, character recognition, document analysis, and machine learning.
KrakenD API Gateway helped Open Room to reduce the latency of all queries by grouping backend queries by frontend use-case, and allowed Open Room to build their API simply and coherently.</description>
    </item>
    
    <item>
      <title>KrakenD as a Zuul replacement</title>
      <link>https://www.krakend.io/case-study/adevinta/</link>
      <pubDate>Mon, 16 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/case-study/adevinta/</guid>
      <description>Adevinta Spain handles a vast amount of traffic, as it operates marketplaces with 18 million active users. The adoption of KrakenD&amp;rsquo;s technology in production started in early 2017 and has been running since then.
Adevinta was investigating how to get more performance in their company-wide solution, and how to provide autonomy to non backend teams.
After several weeks of research, stress-tests and benchmarking several products in the market, Adevinta decided to choose KrakenD as the api gateway engine.</description>
    </item>
    
    <item>
      <title>API Gateway for the education sector: parental control</title>
      <link>https://www.krakend.io/case-study/pearson/</link>
      <pubDate>Fri, 13 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/case-study/pearson/</guid>
      <description>Pearson has trusted KrakenD as its API Gateway solution for the Parent App, which provides parents with a wide range of resources, including podcasts, infographics, quizzes, and checklists, to support their children&amp;rsquo;s progress in learning.
KrakenD API Gateway offers the endpoints to the Parent App and sits between end-users and the Pearson services, which provide all the data that KrakenD aggregates to supply the use case.
KrakenD handles OAuth with HMAC security and implements minor custom middlewares to fit the desired end-user consumption of the services.</description>
    </item>
    
    <item>
      <title>E-commerce mobile app using the Backend for Frontend pattern</title>
      <link>https://www.krakend.io/case-study/dusdusan/</link>
      <pubDate>Fri, 13 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/case-study/dusdusan/</guid>
      <description>Established in the Jakarta City of Indonesia in November 2015, PT. Dusdusan Dotcom Indonesia is a mobile Internet company engaged in the research, development, and operation of E-business platform.
As a leader of membership E-business in Indonesia, Dusdusan.com, together with many domestic and foreign top brands and quality emerging brands, has integrated into the life of thousands of Indonesian families.
As the business developed rapidly, Dusdusan.com needs to keep improving its platform.</description>
    </item>
    
    <item>
      <title>Largest online food delivery in Russia</title>
      <link>https://www.krakend.io/case-study/mailru/</link>
      <pubDate>Fri, 13 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/case-study/mailru/</guid>
      <description>Delivery Club, a Mail.ru brand, is the largest online food delivery platform in Russia, moving food from thousands of restaurants to homes in more than 100 cities.
Delivery Club processes +30,000 orders per day, 72% of which are made from mobile devices.
The technology is built using a modernized microservices architecture with around 20 services, including KrakenD API Gateway that sits between end users and Delivery Club&amp;rsquo;s services.
KrakenD&amp;rsquo;s main duty is processing ingoing and outgoing traffic making sure that user sessions are properly authorized when needed, and discarding malicious activity and hacking attempts.</description>
    </item>
    
    <item>
      <title>Second hand selling application using several gateways</title>
      <link>https://www.krakend.io/case-study/letgo/</link>
      <pubDate>Fri, 13 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/case-study/letgo/</guid>
      <description>Letgo is the biggest and fastest-growing app for buying and selling locally.
Letgo is both a desktop application (SPA) and a mobile application with native implementations for every OS. As Letgo&amp;rsquo;s organization is large, the UI experience of each client is handled by a different team.
Letgo uses different clusters of KrakenD API Gateway per client, allowing each team to have its customized views of merged data. The API contract used in every device is preserved and respected even when the backends need to change their specification.</description>
    </item>
    
    <item>
      <title>gRPC-gateway as a KrakenD plugin</title>
      <link>https://www.krakend.io/blog/krakend-grpc-gateway-plugin/</link>
      <pubDate>Sun, 09 Jun 2019 18:26:10 +0100</pubDate>
      
      <guid>https://www.krakend.io/blog/krakend-grpc-gateway-plugin/</guid>
      <description>The gRPC protocol is becoming trendy in the era of microservices. Its compactness and backward-compatibility make it very attractive. However, it requires custom code to work with it. In this article, we&amp;rsquo;ll show you how to get all the benefits from the gRPC protocol and the gRPC-gateway without coding any business logic to use your gRPC services as regular backends. Moreover, avoiding the extra network hop!</description>
    </item>
    
    <item>
      <title>Doing housekeeping on your KrakenD configuration file</title>
      <link>https://www.krakend.io/blog/housekeeping-configuration-file/</link>
      <pubDate>Fri, 17 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/blog/housekeeping-configuration-file/</guid>
      <description>Starting your krakend.json configuration from scratch and writing every attribute in a blank editor might be a difficult and time consuming task, and that&amp;rsquo;s why we have the KrakenDesigner.
KrakenDesigner is an aid tool to generate KrakenD configurations for the uninitiated audience. It produces a verbose output of the configuration file and explicitly writes unneeded attributes to let you see that a specific configuration option exists. These attributes I am mentioning are not necessary because they contain default values and the server is not going to alter its behavior.</description>
    </item>
    
    <item>
      <title>KrakenD 0.9 released</title>
      <link>https://www.krakend.io/blog/krakend-0.9-release-notes/</link>
      <pubDate>Sun, 07 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/blog/krakend-0.9-release-notes/</guid>
      <description>It&amp;rsquo;s been only one month since we released KrakenD 0.8, and although we have been releasing new versions approximately every 3 months, we have very interesting features that can&amp;rsquo;t wait! KrakenD 0.9 comes with a series of very demanded features. Let&amp;rsquo;s get started!
Integration with AMQP The AMQP integration allows you to send and receive messages to and from a queue through the KrakenD API Gateway. This feature enables the gateway to become in both a subscriber and a consumer of messages for asynchronous processing and opens the doors to very different implementations we were seeing.</description>
    </item>
    
    <item>
      <title>KrakenD 0.8 released</title>
      <link>https://www.krakend.io/blog/krakend-0.8-release-notes/</link>
      <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/blog/krakend-0.8-release-notes/</guid>
      <description>KrakenD 0.8 is a significant release as it brings numerous code changes and functionality. The framework brings +100 commits, the gateway +50 commits and even more changes in the components. A lot of refactoring and component updates has taken place. The big picture is a move from a single binary application to become a package with several internal binaries.
See the details below.
KrakenD framework The KrakenD framework brings +100 commits compared to 0.</description>
    </item>
    
    <item>
      <title>How we run KrakenD on Javascript with WebAssembly</title>
      <link>https://www.krakend.io/blog/krakend-wasm/</link>
      <pubDate>Sun, 09 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/blog/krakend-wasm/</guid>
      <description>KrakenD is an API Gateway written in Go that uses a single configuration file to define its whole behavior. As the configuration file might be complicated, the KrakenDesigner is a javascript-based user interface to edit this file, and we were missing the capability of reproducing directly on javascript the existing gateway pipes so that users could run manual tests over the editing configuration.
In this post, we are going to explain how we included KrakenD framework components in a .</description>
    </item>
    
    <item>
      <title>KrakenD Team</title>
      <link>https://www.krakend.io/team/</link>
      <pubDate>Fri, 16 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/team/</guid>
      <description></description>
    </item>
    
    <item>
      <title>KrakenD 0.7 released</title>
      <link>https://www.krakend.io/blog/krakend-0.7-release-notes/</link>
      <pubDate>Thu, 08 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/blog/krakend-0.7-release-notes/</guid>
      <description>The most relevant features for the 0.7 release are increased metrics and tracing options, and functionality that has been requested by many, the sequential proxy merger. During this release, we also updated the KrakenD brand with a new logo, and we added more documentation.
On the metrics side, we can now send structured events using GELF to your Graylog Cluster. Opencensus middleware adds new functionality to push metrics to your Google StackDriver account.</description>
    </item>
    
    <item>
      <title>API data consumption from multiple freight providers</title>
      <link>https://www.krakend.io/case-study/icontainers/</link>
      <pubDate>Fri, 05 Oct 2018 17:23:05 +0200</pubDate>
      
      <guid>https://www.krakend.io/case-study/icontainers/</guid>
      <description>iContainers is an ocean freight forwarder that allows you to compare, book, manage, and track maritime shipments in real-time without intermediaries.
As importers and exporters combine more than 500,000 rates and maritime transport routes from different providers, KrakenD plays the role of a Backend for Frontend in several SPAs. Some examples are the back-office, the partners portal, or the pricing API.
KrakenD&amp;rsquo;s primary duty in all these cases is to provide a reliable way to fetch data from multiple providers and APIs and merge the results of all the services into useful endpoints.</description>
    </item>
    
    <item>
      <title>KrakenD Enterprise</title>
      <link>https://www.krakend.io/enterprise/</link>
      <pubDate>Fri, 05 Oct 2018 17:23:05 +0200</pubDate>
      
      <guid>https://www.krakend.io/enterprise/</guid>
      <description></description>
    </item>
    
    <item>
      <title>KrakenD Partners</title>
      <link>https://www.krakend.io/partners/</link>
      <pubDate>Fri, 05 Oct 2018 17:23:05 +0200</pubDate>
      
      <guid>https://www.krakend.io/partners/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Krakend 0.6.1 release notes</title>
      <link>https://www.krakend.io/blog/krakend-0.6.1-release-notes/</link>
      <pubDate>Thu, 04 Oct 2018 09:15:49 +0200</pubDate>
      
      <guid>https://www.krakend.io/blog/krakend-0.6.1-release-notes/</guid>
      <description>The 0.6.1 release adds TLS and enables HTTP2 and HTTPS.
TL;DR This release brings HTTP2 and HTTPS to KrakenD. It also upgrades Go from 1.10 to 1.11 and fixes forwarded query string parameters to backends that are using arrays and repeated variables.
The KrakenDesigner (UI) is also updated to reflect these changes.
KrakenD framework The KrakenD framework has the following relevant changes:
 NEW: Added support for HTTP2/HTTPS FIX: query string parameters works now with arrays and repeated variables (e.</description>
    </item>
    
    <item>
      <title>Privacy Policy</title>
      <link>https://www.krakend.io/privacy-policy/</link>
      <pubDate>Fri, 14 Sep 2018 20:11:05 +0200</pubDate>
      
      <guid>https://www.krakend.io/privacy-policy/</guid>
      <description>Brutale Engineering S.L. (&amp;ldquo;us&amp;rdquo;, &amp;ldquo;we&amp;rdquo;, or &amp;ldquo;our&amp;rdquo;) operates the http://www.krakend.io website (the &amp;ldquo;Service&amp;rdquo;).
This page informs you of our policies regarding the collection, use, and disclosure of personal data when you use our Service and the choices you have associated with that data.
We use your data to provide and improve the Service. By using the Service, you agree to the collection and use of information in accordance with this policy.</description>
    </item>
    
    <item>
      <title>KrakenD 0.6 autumn release</title>
      <link>https://www.krakend.io/blog/krakend-0.6-release-notes/</link>
      <pubDate>Fri, 07 Sep 2018 09:18:53 +0200</pubDate>
      
      <guid>https://www.krakend.io/blog/krakend-0.6-release-notes/</guid>
      <description>As if we were an agrarian society, our releases keep revolving around the weather calendar seasons. Autumn is around the corner (northern hemisphere), so our release is ready for a cool autumn.
TL;DR This release adds two interesting components: the JOSE component responsible for the JWT signing and validation, and the Cross-origin resource sharing (CORS) component. There is also a Consul client available.
The Krakend Playground and the KrakenDesigner (UI) is also updated.</description>
    </item>
    
    <item>
      <title>Reloading the Krakend configuration with Reflex and Docker</title>
      <link>https://www.krakend.io/blog/reloading-the-krakend-configuration/</link>
      <pubDate>Fri, 22 Jun 2018 11:06:53 +0200</pubDate>
      
      <guid>https://www.krakend.io/blog/reloading-the-krakend-configuration/</guid>
      <description>A recurrent question when we go around is if KrakenD configuration can be hot-reloaded, this is changing endpoints, backends, or any other configuration of the gateway while it&amp;rsquo;s running. The short answer is: No, you can&amp;rsquo;t. You must restart the server. And although we might have something to alleviate this, let us explain first why we don&amp;rsquo;t support such a feature:
 Performance: This is the #1 reason, and strong enough.</description>
    </item>
    
    <item>
      <title>KrakenD 0.5 summer release</title>
      <link>https://www.krakend.io/blog/krakend-0.5-release-notes/</link>
      <pubDate>Fri, 08 Jun 2018 14:50:53 +0200</pubDate>
      
      <guid>https://www.krakend.io/blog/krakend-0.5-release-notes/</guid>
      <description>KrakenD 0.5 is out and we want to share some of the cool stuff this release is bringing.
This release focuses heavily on metrics and its export options to different backend systems such as Zipkin, InfluxDB, Prometheus or Jaeger. It also adds the NoOp logger and exposes all the advanced settings of the http client and server, giving all the power to the user. On the middleware side it extends even more the ecosystem with multiple components.</description>
    </item>
    
    <item>
      <title>Running the KrakenD API Gateway on Kubernetes</title>
      <link>https://www.krakend.io/blog/krakend-on-kubernetes/</link>
      <pubDate>Wed, 06 Jun 2018 18:47:03 +0200</pubDate>
      
      <guid>https://www.krakend.io/blog/krakend-on-kubernetes/</guid>
      <description>In this article we are going to show how to configure and deploy the KrakenD API Gateway in a kubernetes environment.
We will use for the demonstration Minikube so you cant test it in your own local machine.
Let&amp;rsquo;s get started!
Setting up a local Kubernetes We will run Kubernetes locally thanks to Minikube. Just follow the README in the project for the installation and the Quickstart section. Installing minikube it&amp;rsquo;s quick and easy.</description>
    </item>
    
    <item>
      <title>Website development as a sysadmin</title>
      <link>https://www.krakend.io/blog/website-development-as-a-sysadmin/</link>
      <pubDate>Thu, 10 May 2018 16:18:25 +0200</pubDate>
      
      <guid>https://www.krakend.io/blog/website-development-as-a-sysadmin/</guid>
      <description>As a systems administrator for the past 15 years, I&amp;rsquo;m not very used to web development as this kind of work has been usually done by other colleagues in every company I&amp;rsquo;ve worked for. I wanted to create a web application myself using an external API, as an exercise to go out my comfort zone.
Some time ago I found that Marvel Comics has a REST API where you can get a lot of information about comics, characters, authors and other interesting information.</description>
    </item>
    
    <item>
      <title>Edge computing - A story of buses, raspberries, IoT and API gateways</title>
      <link>https://www.krakend.io/blog/krakend-on-raspberry/</link>
      <pubDate>Tue, 01 May 2018 21:25:00 +0200</pubDate>
      
      <guid>https://www.krakend.io/blog/krakend-on-raspberry/</guid>
      <description>The IoT industry has been running for some years now adding millions of devices into the network. The range of devices and capabilities is very wide and heterogeneous, from small devices powered with a 9-volt battery to track the location of freight shippings traveling the oceans (using platforms like Sigfox) to permanently plugged devices with more powerful computing like a Raspberry Pi where computation cycles are not a problem.
Generally speaking, all these devices collect raw data and send it to the cloud where big data centers process it.</description>
    </item>
    
    <item>
      <title>How to work with Golang plugins and KrakenD</title>
      <link>https://www.krakend.io/blog/krakend-golang-plugins/</link>
      <pubDate>Thu, 12 Apr 2018 22:07:03 +0200</pubDate>
      
      <guid>https://www.krakend.io/blog/krakend-golang-plugins/</guid>
      <description>The release of golang 1.8 more than a year ago opened the door to loading dynamic linked components in run time, and we were keen to find out if we could include this great feature in our KrakenD toolbox.
We&amp;rsquo;d like to share our experience and details on how we enhanced our products to support golang plugins.
Why would anyone use plugins in Go? The plugin concept is widely known and supported in several programming languages and environments.</description>
    </item>
    
    <item>
      <title>Deploying and versioning an API Gateway</title>
      <link>https://www.krakend.io/blog/deploying-an-api-gateway/</link>
      <pubDate>Fri, 06 Apr 2018 23:46:25 +0200</pubDate>
      
      <guid>https://www.krakend.io/blog/deploying-an-api-gateway/</guid>
      <description>When it comes to maintaining and deploying an API Gateway within an organization, you should always be aware of best practice. A gateway is an extra step between the client and the servers with the power to define a whole new interface, yet it&amp;rsquo;s so flexible and easy to implement that you might be tempted to start creating API interfaces without thinking about it - and end up creating problems for the future.</description>
    </item>
    
    <item>
      <title>KrakenD 0.4 release notes</title>
      <link>https://www.krakend.io/blog/krakend-0.4-release-notes/</link>
      <pubDate>Sun, 21 Jan 2018 14:50:53 +0200</pubDate>
      
      <guid>https://www.krakend.io/blog/krakend-0.4-release-notes/</guid>
      <description>KrakenD 0.4 materializes the announcement we did 3 months ago by going full open source and public releasing the former enterprise-only components.
This release note comprehends both the KrakenD framework and the KrakenD Community Edition binary distribution.
KrakenD framework The KrakenD framework, engine of the KrakenD API Gateway. The summary of changes introduced in the 0.4 are:
 Removed ALL external dependencies and placed to krakend-contrib repositories Decoder and Service Discovery register system Response metadata Response decoder and formatter exposed Custom status code handler Minor handler optimizations Config version upgraded Server configuration extended (with timeouts and limits) Now non strict REST urls are allowed Request and response manipulation optimized func version for all the interfaces  Link to 0.</description>
    </item>
    
    <item>
      <title>An API Gateway is not the new Unicorn</title>
      <link>https://www.krakend.io/blog/what-is-an-api-gateway/</link>
      <pubDate>Fri, 19 Jan 2018 10:10:53 +0200</pubDate>
      
      <guid>https://www.krakend.io/blog/what-is-an-api-gateway/</guid>
      <description>The more we talk to people about API gateways, the more we have come to realize that the term means different things to different people, and more specifically we see a growing trend where developers (but mostly managers) expect an API gateway to be able to perform miracles, usually a long way away from its intended use.
It&amp;rsquo;s as if the API Gateway is the new unicorn that will solve all problems and make everything wonderful in the microservices scene.</description>
    </item>
    
    <item>
      <title>Road to KrakenD 0.4</title>
      <link>https://www.krakend.io/blog/road-to-0.4/</link>
      <pubDate>Sun, 12 Nov 2017 12:10:53 +0200</pubDate>
      
      <guid>https://www.krakend.io/blog/road-to-0.4/</guid>
      <description>The next iteration of KrakenD is right around the corner and the Devops Faith team and the rest of the community we are working together to launch the 0.4 release before end of year. The jump from the 0.3.9 of the binary and the 0.3 of the framework to the 0.4 will bring a lot of interesting stuff but we also need to do a remarkable change in the code for a brighter future: kill external dependencies with fire.</description>
    </item>
    
    <item>
      <title>How we automated our RPM and DEB packaging with Docker</title>
      <link>https://www.krakend.io/blog/automating-linux-packaging/</link>
      <pubDate>Mon, 06 Nov 2017 12:43:33 +0200</pubDate>
      
      <guid>https://www.krakend.io/blog/automating-linux-packaging/</guid>
      <description>Everyone loves reaching the maximum number of available platforms for their software but this usually comes at a cost. In this article we will explain how we generated our packaging for Linux in an automated fashion, being faithful to our DevOps dogma.
Dockerize all the things! Our team uses both Ubuntu and MacOS X in desktop machines and KrakenD has been running and behaving in the same way in all the platforms because from day one we decided to run everything on Docker.</description>
    </item>
    
    <item>
      <title>Open sourcing all enterprise components</title>
      <link>https://www.krakend.io/blog/open-sourcing-enterprise-features/</link>
      <pubDate>Sun, 22 Oct 2017 19:01:33 +0200</pubDate>
      
      <guid>https://www.krakend.io/blog/open-sourcing-enterprise-features/</guid>
      <description>What are known today as the KrakenD Enterprise components will be disclosed in the form of open source repositories in the following weeks, and the action has already started, don&amp;rsquo;t miss it! In this post we will explain the reasons behind this decision that might sound crazy from a business perspective in the first place. Why anyone would publish the paid software increment bits of an existing free software?
A look back&amp;hellip; If you are reading this post chances are that you know this already, in short KrakenD is the fastest API Gateway in the market.</description>
    </item>
    
    <item>
      <title>Download KrakenD</title>
      <link>https://www.krakend.io/download/</link>
      <pubDate>Wed, 26 Oct 2016 18:23:05 +0200</pubDate>
      
      <guid>https://www.krakend.io/download/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Enterprise subscription</title>
      <link>https://www.krakend.io/checkout/</link>
      <pubDate>Wed, 26 Oct 2016 18:23:05 +0200</pubDate>
      
      <guid>https://www.krakend.io/checkout/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Failed to process the payment</title>
      <link>https://www.krakend.io/checkout-cancelled/</link>
      <pubDate>Wed, 26 Oct 2016 18:23:05 +0200</pubDate>
      
      <guid>https://www.krakend.io/checkout-cancelled/</guid>
      <description></description>
    </item>
    
    <item>
      <title>KrakenD API Gateway features</title>
      <link>https://www.krakend.io/features/</link>
      <pubDate>Wed, 26 Oct 2016 18:23:05 +0200</pubDate>
      
      <guid>https://www.krakend.io/features/</guid>
      <description></description>
    </item>
    
    <item>
      <title>KrakenD support - Have questions?</title>
      <link>https://www.krakend.io/support/</link>
      <pubDate>Wed, 26 Oct 2016 18:23:05 +0200</pubDate>
      
      <guid>https://www.krakend.io/support/</guid>
      <description></description>
    </item>
    
    <item>
      <title>KrakenDesigner</title>
      <link>https://www.krakend.io/designer/</link>
      <pubDate>Wed, 26 Oct 2016 18:23:05 +0200</pubDate>
      
      <guid>https://www.krakend.io/designer/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Subscription registered!</title>
      <link>https://www.krakend.io/checkout-success/</link>
      <pubDate>Wed, 26 Oct 2016 18:23:05 +0200</pubDate>
      
      <guid>https://www.krakend.io/checkout-success/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Frequently Asked Questions</title>
      <link>https://www.krakend.io/docs/faq/</link>
      <pubDate>Wed, 26 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/faq/</guid>
      <description>I am getting a 200 status when the backend returns a 201 E.g:
2017/01/19 - 10:31:27 | 200 | 1.134431ms | ::1 | POST /users  Explanation By default, the gateway will always send an HTTP status 200 if the backend returns a 200 or a 201. You can inject your own HTTPStatusHandler implementation if you need a different behavior. Check this issue comment for more details.
I am getting a 500 status when the backend returns anything but 200, 201 or redirects E.</description>
    </item>
    
    <item>
      <title>Verifying packages (PGP and SHA256)</title>
      <link>https://www.krakend.io/docs/overview/verifying-packages/</link>
      <pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/overview/verifying-packages/</guid>
      <description>How to make sure what you are downloading is legit.
PGP We will check the detached signature PGP against our package KrakenD.
$ gpg --verify krakend_1.3.0_amd64.tar.gz.asc krakend_1.3.0_amd64.tar.gz gpg: Signature made Sun Mar 10 18:17:18 2019 UTC using RSA key ID 5DE6FD698AD6FDD2 gpg: Can&#39;t check signature: public key not found  We don&amp;rsquo;t have the packager public key (AB39BEA1) in our system. You need to retrieve the public key from a key server.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.krakend.io/docs/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.krakend.io/docs/readme/</guid>
      <description>KrakenD Documentation All the documentation uses Markdown syntax and the site is generated using Hugo. After your contribution this repository will be used to compile all the documentation.
If you want to use a server to browse this pages, although not necessary, you can copy the folder inside the content directory in any Hugo installation.
Contribute! Feel free to fork this repository and contribute to a better KrakenD documentation.
If you&amp;rsquo;d like to add a new language please open an issue before doing the work as we will need to add the support before it is visible.</description>
    </item>
    
  </channel>
</rss>
